
2024 LTU FE Vehicle Control Unit Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007158  08007158  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007160  08007160  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007160  08007160  00017160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08007168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f6c  20000028  08007190  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f94  08007190  00023f94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146f0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003125  00000000  00000000  00034789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  000378b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e89  00000000  00000000  00038b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000291ab  00000000  00000000  00039a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e3a  00000000  00000000  00062bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108817  00000000  00000000  000789ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ee8  00000000  00000000  00181208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  001860f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000028 	.word	0x20000028
 800021c:	00000000 	.word	0x00000000
 8000220:	080070ac 	.word	0x080070ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000002c 	.word	0x2000002c
 800023c:	080070ac 	.word	0x080070ac

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <nodeGuarding>:
 */

#include "CAN.h"

void nodeGuarding(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[1] = { (0x00U) };
 8000542:	2300      	movs	r3, #0
 8000544:	713b      	strb	r3, [r7, #4]
	uint32_t mailbox;

	txHeader.DLC = ECU_EMD_NMT_node_guarding_DLC;
 8000546:	2301      	movs	r3, #1
 8000548:	61bb      	str	r3, [r7, #24]
	txHeader.ExtId = DISABLE;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
	txHeader.IDE = CAN_ID_STD;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
	txHeader.RTR = CAN_RTR_REMOTE;
 8000552:	2302      	movs	r3, #2
 8000554:	617b      	str	r3, [r7, #20]
	txHeader.StdId = ECU_EMD_NMT_node_guarding_CANID;
 8000556:	f240 737a 	movw	r3, #1914	; 0x77a
 800055a:	60bb      	str	r3, [r7, #8]
	txHeader.TransmitGlobalTime = DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	773b      	strb	r3, [r7, #28]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	1d3a      	adds	r2, r7, #4
 8000564:	f107 0108 	add.w	r1, r7, #8
 8000568:	480a      	ldr	r0, [pc, #40]	; (8000594 <nodeGuarding+0x58>)
 800056a:	f002 f87a 	bl	8002662 <HAL_CAN_AddTxMessage>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <nodeGuarding+0x3c>
	{
		Error_Handler();
 8000574:	f001 f8d5 	bl	8001722 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000578:	bf00      	nop
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <nodeGuarding+0x58>)
 8000580:	f002 f93f 	bl	8002802 <HAL_CAN_IsTxMessagePending>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1f7      	bne.n	800057a <nodeGuarding+0x3e>

	return;
 800058a:	bf00      	nop
}
 800058c:	3720      	adds	r7, #32
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000008c 	.word	0x2000008c

08000598 <startNode>:

void startNode(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 800059e:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <startNode+0x7c>)
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	ECU_NMT_command_t nmt_t;
	uint8_t len, ide;

	nmt_t.ECU_NMT_CommandSpecifier = (0x01U);
 80005ac:	2301      	movs	r3, #1
 80005ae:	723b      	strb	r3, [r7, #8]
	nmt_t.ECU_NMT_NodeId = (0x7AU);
 80005b0:	237a      	movs	r3, #122	; 0x7a
 80005b2:	727b      	strb	r3, [r7, #9]

	Pack_ECU_NMT_command__DO_QUASAR_CANopen(&nmt_t, data, &len, &ide);
 80005b4:	1dbb      	adds	r3, r7, #6
 80005b6:	1dfa      	adds	r2, r7, #7
 80005b8:	f107 0110 	add.w	r1, r7, #16
 80005bc:	f107 0008 	add.w	r0, r7, #8
 80005c0:	f000 f8e2 	bl	8000788 <Pack_ECU_NMT_command__DO_QUASAR_CANopen>

	txHeader.DLC = ECU_NMT_command_DLC;
 80005c4:	2302      	movs	r3, #2
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.ExtId = DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
	txHeader.IDE = ide;
 80005cc:	79bb      	ldrb	r3, [r7, #6]
 80005ce:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.StdId = ECU_NMT_command_CANID;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 80005d8:	2300      	movs	r3, #0
 80005da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	f107 0210 	add.w	r2, r7, #16
 80005e6:	f107 0118 	add.w	r1, r7, #24
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <startNode+0x80>)
 80005ec:	f002 f839 	bl	8002662 <HAL_CAN_AddTxMessage>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <startNode+0x62>
	{
		Error_Handler();
 80005f6:	f001 f894 	bl	8001722 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 80005fa:	bf00      	nop
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <startNode+0x80>)
 8000602:	f002 f8fe 	bl	8002802 <HAL_CAN_IsTxMessagePending>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1f7      	bne.n	80005fc <startNode+0x64>

	return;
 800060c:	bf00      	nop
}
 800060e:	3730      	adds	r7, #48	; 0x30
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	080070c4 	.word	0x080070c4
 8000618:	2000008c 	.word	0x2000008c

0800061c <clearErrors>:

void clearErrors(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b090      	sub	sp, #64	; 0x40
 8000620:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 8000622:	4a28      	ldr	r2, [pc, #160]	; (80006c4 <clearErrors+0xa8>)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	EMD_RxPDO_3_t rxPDO3_t;
	uint8_t len, ide;

	rxPDO3_t.EMD_CMD_ActiveDischarge = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	757b      	strb	r3, [r7, #21]
	rxPDO3_t.EMD_CMD_ClearErrors = (0x01U);
 8000634:	2301      	movs	r3, #1
 8000636:	74fb      	strb	r3, [r7, #19]
	rxPDO3_t.EMD_CMD_ControlMode = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	743b      	strb	r3, [r7, #16]
	rxPDO3_t.EMD_CMD_DigitalOutput1 = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	763b      	strb	r3, [r7, #24]
	rxPDO3_t.EMD_CMD_DigitalOutput2 = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	75fb      	strb	r3, [r7, #23]
	rxPDO3_t.EMD_CMD_LimitationMode = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	75bb      	strb	r3, [r7, #22]
	rxPDO3_t.EMD_CMD_RestartRequest = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	753b      	strb	r3, [r7, #20]
	rxPDO3_t.EMD_CMD_SpeedRefLim = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
	rxPDO3_t.EMD_CMD_SpeedRefLim_VAL = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	74bb      	strb	r3, [r7, #18]
	rxPDO3_t.EMD_CMD_TorqueRefLim = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	813b      	strh	r3, [r7, #8]
	rxPDO3_t.EMD_CMD_TorqueRefLim_VAL = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	72bb      	strb	r3, [r7, #10]
	rxPDO3_t.EMD_MSGCNT_RxPDO3 = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	747b      	strb	r3, [r7, #17]

	Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(&rxPDO3_t, data, &len, &ide);
 8000660:	1dbb      	adds	r3, r7, #6
 8000662:	1dfa      	adds	r2, r7, #7
 8000664:	f107 0120 	add.w	r1, r7, #32
 8000668:	f107 0008 	add.w	r0, r7, #8
 800066c:	f000 f8c0 	bl	80007f0 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>

	txHeader.DLC = len;
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
	txHeader.ExtId = DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
	txHeader.IDE = ide;
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
	txHeader.RTR = CAN_RTR_DATA;
 800067c:	2300      	movs	r3, #0
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
	txHeader.StdId = EMD_RxPDO_3_CANID;
 8000680:	f240 437a 	movw	r3, #1146	; 0x47a
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.TransmitGlobalTime = DISABLE;
 8000686:	2300      	movs	r3, #0
 8000688:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	f107 0220 	add.w	r2, r7, #32
 8000694:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <clearErrors+0xac>)
 800069a:	f001 ffe2 	bl	8002662 <HAL_CAN_AddTxMessage>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <clearErrors+0x8c>
	{
		Error_Handler();
 80006a4:	f001 f83d 	bl	8001722 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 80006a8:	bf00      	nop
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <clearErrors+0xac>)
 80006b0:	f002 f8a7 	bl	8002802 <HAL_CAN_IsTxMessagePending>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f7      	bne.n	80006aa <clearErrors+0x8e>

	return;
 80006ba:	bf00      	nop
}
 80006bc:	3740      	adds	r7, #64	; 0x40
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	080070c4 	.word	0x080070c4
 80006c8:	2000008c 	.word	0x2000008c

080006cc <torqueControlMessage>:

void torqueControlMessage(int _speedRefLimit, int* _torqueRefLimit)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b092      	sub	sp, #72	; 0x48
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 80006d6:	4a2a      	ldr	r2, [pc, #168]	; (8000780 <torqueControlMessage+0xb4>)
 80006d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	EMD_RxPDO_3_t rxPDO3_t;
	uint8_t len, ide;

	rxPDO3_t.EMD_CMD_ActiveDischarge = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	777b      	strb	r3, [r7, #29]
	rxPDO3_t.EMD_CMD_ClearErrors = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	76fb      	strb	r3, [r7, #27]
	rxPDO3_t.EMD_CMD_ControlMode = (0x01U);
 80006ec:	2301      	movs	r3, #1
 80006ee:	763b      	strb	r3, [r7, #24]
	rxPDO3_t.EMD_CMD_DigitalOutput1 = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 3020 	strb.w	r3, [r7, #32]
	rxPDO3_t.EMD_CMD_DigitalOutput2 = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	77fb      	strb	r3, [r7, #31]
	rxPDO3_t.EMD_CMD_LimitationMode = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	77bb      	strb	r3, [r7, #30]
	rxPDO3_t.EMD_CMD_RestartRequest = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	773b      	strb	r3, [r7, #28]
	rxPDO3_t.EMD_CMD_SpeedRefLim = _speedRefLimit;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	617b      	str	r3, [r7, #20]
	rxPDO3_t.EMD_CMD_SpeedRefLim_VAL = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	76bb      	strb	r3, [r7, #26]
	rxPDO3_t.EMD_CMD_TorqueRefLim = *_torqueRefLimit;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	b21b      	sxth	r3, r3
 8000710:	823b      	strh	r3, [r7, #16]
	rxPDO3_t.EMD_CMD_TorqueRefLim_VAL = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	74bb      	strb	r3, [r7, #18]
	rxPDO3_t.EMD_MSGCNT_RxPDO3 = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	767b      	strb	r3, [r7, #25]

	Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(&rxPDO3_t, data, &len, &ide);
 800071a:	f107 030e 	add.w	r3, r7, #14
 800071e:	f107 020f 	add.w	r2, r7, #15
 8000722:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000726:	f107 0010 	add.w	r0, r7, #16
 800072a:	f000 f861 	bl	80007f0 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>

	txHeader.DLC = EMD_RxPDO_3_DLC;
 800072e:	2306      	movs	r3, #6
 8000730:	643b      	str	r3, [r7, #64]	; 0x40
	txHeader.ExtId = DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	637b      	str	r3, [r7, #52]	; 0x34
	txHeader.IDE = ide;
 8000736:	7bbb      	ldrb	r3, [r7, #14]
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
	txHeader.RTR = CAN_RTR_DATA;
 800073a:	2300      	movs	r3, #0
 800073c:	63fb      	str	r3, [r7, #60]	; 0x3c
	txHeader.StdId = EMD_RxPDO_3_CANID;
 800073e:	f240 437a 	movw	r3, #1146	; 0x47a
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
	txHeader.TransmitGlobalTime = DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 800074a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000752:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <torqueControlMessage+0xb8>)
 8000758:	f001 ff83 	bl	8002662 <HAL_CAN_AddTxMessage>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <torqueControlMessage+0x9a>
	{
		Error_Handler();
 8000762:	f000 ffde 	bl	8001722 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000766:	bf00      	nop
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <torqueControlMessage+0xb8>)
 800076e:	f002 f848 	bl	8002802 <HAL_CAN_IsTxMessagePending>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1f7      	bne.n	8000768 <torqueControlMessage+0x9c>

	return;
 8000778:	bf00      	nop
}
 800077a:	3748      	adds	r7, #72	; 0x48
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	080070c4 	.word	0x080070c4
 8000784:	2000008c 	.word	0x2000008c

08000788 <Pack_ECU_NMT_command__DO_QUASAR_CANopen>:
  _m->ECU_NMT_NodeId = (_d[1] & (0xFFU));
  return ECU_NMT_command_CANID;
}

uint32_t Pack_ECU_NMT_command__DO_QUASAR_CANopen(const ECU_NMT_command_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < ECU_NMT_command_DLC; _d[i++] = 0);
 8000796:	2300      	movs	r3, #0
 8000798:	75fb      	strb	r3, [r7, #23]
 800079a:	e007      	b.n	80007ac <Pack_ECU_NMT_command__DO_QUASAR_CANopen+0x24>
 800079c:	7dfb      	ldrb	r3, [r7, #23]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	75fa      	strb	r2, [r7, #23]
 80007a2:	461a      	mov	r2, r3
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4413      	add	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d9f4      	bls.n	800079c <Pack_ECU_NMT_command__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->ECU_NMT_CommandSpecifier & (0xFFU));
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	701a      	strb	r2, [r3, #0]
  _d[1] |= (_m->ECU_NMT_NodeId & (0xFFU));
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	3301      	adds	r3, #1
 80007c6:	7819      	ldrb	r1, [r3, #0]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	785a      	ldrb	r2, [r3, #1]
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	3301      	adds	r3, #1
 80007d0:	430a      	orrs	r2, r1
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	701a      	strb	r2, [r3, #0]
  *_len = 2; *_ide = 0;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2202      	movs	r2, #2
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
  return ECU_NMT_command_CANID;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	371c      	adds	r7, #28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>:
  _m->EMD_CMD_DigitalOutput1 = ((_d[5] >> 7) & (0x01U));
  return EMD_RxPDO_3_CANID;
}

uint32_t Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(const EMD_RxPDO_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < EMD_RxPDO_3_DLC; _d[i++] = 0);
 80007fe:	2300      	movs	r3, #0
 8000800:	75fb      	strb	r3, [r7, #23]
 8000802:	e007      	b.n	8000814 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen+0x24>
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	75fa      	strb	r2, [r7, #23]
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	7dfb      	ldrb	r3, [r7, #23]
 8000816:	2b05      	cmp	r3, #5
 8000818:	d9f4      	bls.n	8000804 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->EMD_CMD_TorqueRefLim & (0xFFU));
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4313      	orrs	r3, r2
 8000828:	b2da      	uxtb	r2, r3
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	701a      	strb	r2, [r3, #0]
  _d[1] |= ((_m->EMD_CMD_TorqueRefLim >> 8) & (0x3FU)) | ((_m->EMD_CMD_TorqueRefLim_VAL & (0x03U)) << 6);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	3301      	adds	r3, #1
 8000832:	7819      	ldrb	r1, [r3, #0]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800083a:	121b      	asrs	r3, r3, #8
 800083c:	b21b      	sxth	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000844:	b2da      	uxtb	r2, r3
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	019b      	lsls	r3, r3, #6
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	3301      	adds	r3, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	701a      	strb	r2, [r3, #0]
  _d[2] |= (_m->EMD_CMD_SpeedRefLim & (0xFFU));
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3302      	adds	r3, #2
 8000860:	7819      	ldrb	r1, [r3, #0]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	3302      	adds	r3, #2
 800086c:	430a      	orrs	r2, r1
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	701a      	strb	r2, [r3, #0]
  _d[3] |= ((_m->EMD_CMD_SpeedRefLim >> 8) & (0xFFU));
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	3303      	adds	r3, #3
 8000876:	7819      	ldrb	r1, [r3, #0]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	121b      	asrs	r3, r3, #8
 800087e:	b2da      	uxtb	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3303      	adds	r3, #3
 8000884:	430a      	orrs	r2, r1
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	701a      	strb	r2, [r3, #0]
  _d[4] |= (_m->EMD_CMD_ControlMode & (0x0FU)) | ((_m->EMD_MSGCNT_RxPDO3 & (0x0FU)) << 4);
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	3304      	adds	r3, #4
 800088e:	7819      	ldrb	r1, [r3, #0]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	7a1b      	ldrb	r3, [r3, #8]
 8000894:	f003 030f 	and.w	r3, r3, #15
 8000898:	b2da      	uxtb	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	7a5b      	ldrb	r3, [r3, #9]
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	3304      	adds	r3, #4
 80008aa:	430a      	orrs	r2, r1
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	701a      	strb	r2, [r3, #0]
  _d[5] |= (_m->EMD_CMD_SpeedRefLim_VAL & (0x03U)) | ((_m->EMD_CMD_ClearErrors & (0x01U)) << 2) | ((_m->EMD_CMD_RestartRequest & (0x01U)) << 3) | ((_m->EMD_CMD_ActiveDischarge & (0x01U)) << 4) | ((_m->EMD_CMD_LimitationMode & (0x01U)) << 5) | ((_m->EMD_CMD_DigitalOutput2 & (0x01U)) << 6) | ((_m->EMD_CMD_DigitalOutput1 & (0x01U)) << 7);
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	3305      	adds	r3, #5
 80008b4:	7819      	ldrb	r1, [r3, #0]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	7a9b      	ldrb	r3, [r3, #10]
 80008ba:	f003 0303 	and.w	r3, r3, #3
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	7adb      	ldrb	r3, [r3, #11]
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	7b1b      	ldrb	r3, [r3, #12]
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	7b5b      	ldrb	r3, [r3, #13]
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 0310 	and.w	r3, r3, #16
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	7b9b      	ldrb	r3, [r3, #14]
 80008fa:	015b      	lsls	r3, r3, #5
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f003 0320 	and.w	r3, r3, #32
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b2da      	uxtb	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	7bdb      	ldrb	r3, [r3, #15]
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000914:	b2db      	uxtb	r3, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	b2da      	uxtb	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	7c1b      	ldrb	r3, [r3, #16]
 800091e:	01db      	lsls	r3, r3, #7
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b2da      	uxtb	r2, r3
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	3305      	adds	r3, #5
 800092a:	430a      	orrs	r2, r1
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	701a      	strb	r2, [r3, #0]
  *_len = 6; *_ide = 0;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2206      	movs	r2, #6
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
  return EMD_RxPDO_3_CANID;
 800093c:	f240 437a 	movw	r3, #1146	; 0x47a
}
 8000940:	4618      	mov	r0, r3
 8000942:	371c      	adds	r7, #28
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <HAL_TIM_OC_DelayElapsedCallback>:
TaskHandle_t task5Handle = NULL;
TaskHandle_t task6Handle = NULL;

// RTD Speaker ISR
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(htim);

	HAL_GPIO_WritePin(RTD_PIN_PORT, RTD_PIN, RTD_DISABLE);
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095c:	2200      	movs	r2, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fa1a 	bl	8002d98 <HAL_GPIO_WritePin>

	HAL_TIM_OC_Stop_IT(&htim1, IGNITION_OUPUT_CAPTURE);
 8000964:	2300      	movs	r3, #0
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 800096a:	f003 f95b 	bl	8003c24 <HAL_TIM_OC_Stop_IT>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008
 800097c:	200000dc 	.word	0x200000dc

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f001 f8d2 	bl	8001b2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f8ff 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098e:	f000 fafd 	bl	8000f8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000992:	f000 f965 	bl	8000c60 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000996:	f000 f9e1 	bl	8000d5c <MX_CAN1_Init>
  MX_CAN2_Init();
 800099a:	f000 fa15 	bl	8000dc8 <MX_CAN2_Init>
  MX_TIM1_Init();
 800099e:	f000 fa49 	bl	8000e34 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 80009a2:	4864      	ldr	r0, [pc, #400]	; (8000b34 <main+0x1b4>)
 80009a4:	f001 fe19 	bl	80025da <HAL_CAN_Start>

  // CAN FAULT State -> Good
  HAL_GPIO_WritePin(CAN_FAULT_PORT, CAN_FAULT_PIN, NO_FAULT_STATE);
 80009a8:	4b63      	ldr	r3, [pc, #396]	; (8000b38 <main+0x1b8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	2201      	movs	r2, #1
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 f9f1 	bl	8002d98 <HAL_GPIO_WritePin>

  // Enable CAN 1 Transreceiver
  HAL_GPIO_WritePin(CAN_ENABLE_1_PORT, CAN_ENABLE_1_PIN, CAN_ENABLE);
 80009b6:	4b61      	ldr	r3, [pc, #388]	; (8000b3c <main+0x1bc>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009be:	2200      	movs	r2, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 f9e9 	bl	8002d98 <HAL_GPIO_WritePin>

  /***************************** Task Creation *****************************/

  xReturned = xTaskCreate(Task1_Handler, "Node_Guarding", 200, NULL, tskIDLE_PRIORITY + 3, &task1Handle);
 80009c6:	4b5e      	ldr	r3, [pc, #376]	; (8000b40 <main+0x1c0>)
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	2303      	movs	r3, #3
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2300      	movs	r3, #0
 80009d0:	22c8      	movs	r2, #200	; 0xc8
 80009d2:	495c      	ldr	r1, [pc, #368]	; (8000b44 <main+0x1c4>)
 80009d4:	485c      	ldr	r0, [pc, #368]	; (8000b48 <main+0x1c8>)
 80009d6:	f004 fce9 	bl	80053ac <xTaskCreate>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a5b      	ldr	r2, [pc, #364]	; (8000b4c <main+0x1cc>)
 80009de:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 80009e0:	4b5a      	ldr	r3, [pc, #360]	; (8000b4c <main+0x1cc>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d00c      	beq.n	8000a02 <main+0x82>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80009e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ec:	b672      	cpsid	i
 80009ee:	f383 8811 	msr	BASEPRI, r3
 80009f2:	f3bf 8f6f 	isb	sy
 80009f6:	f3bf 8f4f 	dsb	sy
 80009fa:	b662      	cpsie	i
 80009fc:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80009fe:	bf00      	nop
 8000a00:	e7fe      	b.n	8000a00 <main+0x80>

  xReturned = xTaskCreate(Task2_Handler, "Torque_Control", 200, NULL, tskIDLE_PRIORITY + 2, &task2Handle);
 8000a02:	4b53      	ldr	r3, [pc, #332]	; (8000b50 <main+0x1d0>)
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	2302      	movs	r3, #2
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	22c8      	movs	r2, #200	; 0xc8
 8000a0e:	4951      	ldr	r1, [pc, #324]	; (8000b54 <main+0x1d4>)
 8000a10:	4851      	ldr	r0, [pc, #324]	; (8000b58 <main+0x1d8>)
 8000a12:	f004 fccb 	bl	80053ac <xTaskCreate>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a4c      	ldr	r2, [pc, #304]	; (8000b4c <main+0x1cc>)
 8000a1a:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000a1c:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <main+0x1cc>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d00c      	beq.n	8000a3e <main+0xbe>
        __asm volatile
 8000a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a28:	b672      	cpsid	i
 8000a2a:	f383 8811 	msr	BASEPRI, r3
 8000a2e:	f3bf 8f6f 	isb	sy
 8000a32:	f3bf 8f4f 	dsb	sy
 8000a36:	b662      	cpsie	i
 8000a38:	613b      	str	r3, [r7, #16]
    }
 8000a3a:	bf00      	nop
 8000a3c:	e7fe      	b.n	8000a3c <main+0xbc>

  xReturned = xTaskCreate(Task3_Handler, "Ignition", 200, NULL, tskIDLE_PRIORITY + 1, &task3Handle);
 8000a3e:	4b47      	ldr	r3, [pc, #284]	; (8000b5c <main+0x1dc>)
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	2301      	movs	r3, #1
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	22c8      	movs	r2, #200	; 0xc8
 8000a4a:	4945      	ldr	r1, [pc, #276]	; (8000b60 <main+0x1e0>)
 8000a4c:	4845      	ldr	r0, [pc, #276]	; (8000b64 <main+0x1e4>)
 8000a4e:	f004 fcad 	bl	80053ac <xTaskCreate>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a3d      	ldr	r2, [pc, #244]	; (8000b4c <main+0x1cc>)
 8000a56:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000a58:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <main+0x1cc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d00c      	beq.n	8000a7a <main+0xfa>
        __asm volatile
 8000a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a64:	b672      	cpsid	i
 8000a66:	f383 8811 	msr	BASEPRI, r3
 8000a6a:	f3bf 8f6f 	isb	sy
 8000a6e:	f3bf 8f4f 	dsb	sy
 8000a72:	b662      	cpsie	i
 8000a74:	60fb      	str	r3, [r7, #12]
    }
 8000a76:	bf00      	nop
 8000a78:	e7fe      	b.n	8000a78 <main+0xf8>

  xReturned = xTaskCreate(Task4_Handler, "BMS_GetData", 200, NULL, tskIDLE_PRIORITY + 1, &task4Handle);
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <main+0x1e8>)
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2300      	movs	r3, #0
 8000a84:	22c8      	movs	r2, #200	; 0xc8
 8000a86:	4939      	ldr	r1, [pc, #228]	; (8000b6c <main+0x1ec>)
 8000a88:	4839      	ldr	r0, [pc, #228]	; (8000b70 <main+0x1f0>)
 8000a8a:	f004 fc8f 	bl	80053ac <xTaskCreate>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4a2e      	ldr	r2, [pc, #184]	; (8000b4c <main+0x1cc>)
 8000a92:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000a94:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <main+0x1cc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d00c      	beq.n	8000ab6 <main+0x136>
        __asm volatile
 8000a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa0:	b672      	cpsid	i
 8000aa2:	f383 8811 	msr	BASEPRI, r3
 8000aa6:	f3bf 8f6f 	isb	sy
 8000aaa:	f3bf 8f4f 	dsb	sy
 8000aae:	b662      	cpsie	i
 8000ab0:	60bb      	str	r3, [r7, #8]
    }
 8000ab2:	bf00      	nop
 8000ab4:	e7fe      	b.n	8000ab4 <main+0x134>

  xReturned = xTaskCreate(Task5_Handler, "Temp_Sense_GetData", 200, NULL, tskIDLE_PRIORITY + 1, &task5Handle);
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <main+0x1f4>)
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	2301      	movs	r3, #1
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	22c8      	movs	r2, #200	; 0xc8
 8000ac2:	492d      	ldr	r1, [pc, #180]	; (8000b78 <main+0x1f8>)
 8000ac4:	482d      	ldr	r0, [pc, #180]	; (8000b7c <main+0x1fc>)
 8000ac6:	f004 fc71 	bl	80053ac <xTaskCreate>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <main+0x1cc>)
 8000ace:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <main+0x1cc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d00c      	beq.n	8000af2 <main+0x172>
        __asm volatile
 8000ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000adc:	b672      	cpsid	i
 8000ade:	f383 8811 	msr	BASEPRI, r3
 8000ae2:	f3bf 8f6f 	isb	sy
 8000ae6:	f3bf 8f4f 	dsb	sy
 8000aea:	b662      	cpsie	i
 8000aec:	607b      	str	r3, [r7, #4]
    }
 8000aee:	bf00      	nop
 8000af0:	e7fe      	b.n	8000af0 <main+0x170>

  xReturned = xTaskCreate(Task6_Handler, "Torque_Derate", 200, NULL, tskIDLE_PRIORITY + 1, &task6Handle);
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <main+0x200>)
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	2301      	movs	r3, #1
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2300      	movs	r3, #0
 8000afc:	22c8      	movs	r2, #200	; 0xc8
 8000afe:	4921      	ldr	r1, [pc, #132]	; (8000b84 <main+0x204>)
 8000b00:	4821      	ldr	r0, [pc, #132]	; (8000b88 <main+0x208>)
 8000b02:	f004 fc53 	bl	80053ac <xTaskCreate>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <main+0x1cc>)
 8000b0a:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <main+0x1cc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d00c      	beq.n	8000b2e <main+0x1ae>
        __asm volatile
 8000b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b18:	b672      	cpsid	i
 8000b1a:	f383 8811 	msr	BASEPRI, r3
 8000b1e:	f3bf 8f6f 	isb	sy
 8000b22:	f3bf 8f4f 	dsb	sy
 8000b26:	b662      	cpsie	i
 8000b28:	603b      	str	r3, [r7, #0]
    }
 8000b2a:	bf00      	nop
 8000b2c:	e7fe      	b.n	8000b2c <main+0x1ac>

  vTaskStartScheduler();
 8000b2e:	f004 fe23 	bl	8005778 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <main+0x1b2>
 8000b34:	2000008c 	.word	0x2000008c
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000004 	.word	0x20000004
 8000b40:	20000184 	.word	0x20000184
 8000b44:	080070cc 	.word	0x080070cc
 8000b48:	080010df 	.word	0x080010df
 8000b4c:	20000180 	.word	0x20000180
 8000b50:	20000188 	.word	0x20000188
 8000b54:	080070dc 	.word	0x080070dc
 8000b58:	08001105 	.word	0x08001105
 8000b5c:	2000018c 	.word	0x2000018c
 8000b60:	080070ec 	.word	0x080070ec
 8000b64:	08001159 	.word	0x08001159
 8000b68:	20000190 	.word	0x20000190
 8000b6c:	080070f8 	.word	0x080070f8
 8000b70:	08001167 	.word	0x08001167
 8000b74:	20000194 	.word	0x20000194
 8000b78:	08007104 	.word	0x08007104
 8000b7c:	08001171 	.word	0x08001171
 8000b80:	20000198 	.word	0x20000198
 8000b84:	08007118 	.word	0x08007118
 8000b88:	0800117b 	.word	0x0800117b

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b094      	sub	sp, #80	; 0x50
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	2234      	movs	r2, #52	; 0x34
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f006 fa4c 	bl	8007038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <SystemClock_Config+0xcc>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a28      	ldr	r2, [pc, #160]	; (8000c58 <SystemClock_Config+0xcc>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <SystemClock_Config+0xcc>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <SystemClock_Config+0xd0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bd0:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <SystemClock_Config+0xd0>)
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <SystemClock_Config+0xd0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bec:	2310      	movs	r3, #16
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000bfc:	23b4      	movs	r3, #180	; 0xb4
 8000bfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4618      	mov	r0, r3
 8000c12:	f002 f8db 	bl	8002dcc <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c1c:	f000 fd81 	bl	8001722 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	230f      	movs	r3, #15
 8000c22:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c24:	2302      	movs	r3, #2
 8000c26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fb72 	bl	8003328 <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c4a:	f000 fd6a 	bl	8001722 <Error_Handler>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	3750      	adds	r7, #80	; 0x50
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000

08000c60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c66:	463b      	mov	r3, r7
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c72:	4b37      	ldr	r3, [pc, #220]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000c74:	4a37      	ldr	r2, [pc, #220]	; (8000d54 <MX_ADC1_Init+0xf4>)
 8000c76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000c78:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000c7a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000c80:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000c82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c88:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c94:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9c:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000ca4:	4a2c      	ldr	r2, [pc, #176]	; (8000d58 <MX_ADC1_Init+0xf8>)
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca8:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cb4:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbc:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc2:	4823      	ldr	r0, [pc, #140]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000cc4:	f000 ff60 	bl	8001b88 <HAL_ADC_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000cce:	f000 fd28 	bl	8001722 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481b      	ldr	r0, [pc, #108]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000ce4:	f001 f92e 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cee:	f000 fd18 	bl	8001722 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4814      	ldr	r0, [pc, #80]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000d00:	f001 f920 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d0a:	f000 fd0a 	bl	8001722 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d12:	2303      	movs	r3, #3
 8000d14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d16:	463b      	mov	r3, r7
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000d1c:	f001 f912 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d26:	f000 fcfc 	bl	8001722 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d32:	463b      	mov	r3, r7
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000d38:	f001 f904 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000d42:	f000 fcee 	bl	8001722 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000044 	.word	0x20000044
 8000d54:	40012000 	.word	0x40012000
 8000d58:	0f000001 	.word	0x0f000001

08000d5c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000d62:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <MX_CAN1_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000d68:	2205      	movs	r2, #5
 8000d6a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000d7a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d7e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000d82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d86:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_CAN1_Init+0x64>)
 8000dae:	f001 fb19 	bl	80023e4 <HAL_CAN_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000db8:	f000 fcb3 	bl	8001722 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000008c 	.word	0x2000008c
 8000dc4:	40006400 	.word	0x40006400

08000dc8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <MX_CAN2_Init+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 5;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000dd4:	2205      	movs	r2, #5
 8000dd6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000de6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dea:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000dee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000df2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000e1a:	f001 fae3 	bl	80023e4 <HAL_CAN_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000e24:	f000 fc7d 	bl	8001722 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000b4 	.word	0x200000b4
 8000e30:	40006800 	.word	0x40006800

08000e34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b09a      	sub	sp, #104	; 0x68
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	222c      	movs	r2, #44	; 0x2c
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f006 f8e2 	bl	8007038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e74:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000e76:	4a44      	ldr	r2, [pc, #272]	; (8000f88 <MX_TIM1_Init+0x154>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000-1;
 8000e7a:	4b42      	ldr	r3, [pc, #264]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000e7c:	f244 624f 	movw	r2, #17999	; 0x464f
 8000e80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e82:	4b40      	ldr	r3, [pc, #256]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000e88:	4b3e      	ldr	r3, [pc, #248]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000e8a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b3c      	ldr	r3, [pc, #240]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e96:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9c:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ea2:	4838      	ldr	r0, [pc, #224]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000ea4:	f002 fc44 	bl	8003730 <HAL_TIM_Base_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000eae:	f000 fc38 	bl	8001722 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4831      	ldr	r0, [pc, #196]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000ec0:	f003 f918 	bl	80040f4 <HAL_TIM_ConfigClockSource>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000eca:	f000 fc2a 	bl	8001722 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ece:	482d      	ldr	r0, [pc, #180]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000ed0:	f002 fcfe 	bl	80038d0 <HAL_TIM_OC_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000eda:	f000 fc22 	bl	8001722 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4824      	ldr	r0, [pc, #144]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000ef2:	f003 fda5 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000efc:	f000 fc11 	bl	8001722 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f00:	2300      	movs	r3, #0
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 10000-1;
 8000f04:	f242 730f 	movw	r3, #9999	; 0x270f
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	4817      	ldr	r0, [pc, #92]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000f28:	f003 f86a 	bl	8004000 <HAL_TIM_OC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000f32:	f000 fbf6 	bl	8001722 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4806      	ldr	r0, [pc, #24]	; (8000f84 <MX_TIM1_Init+0x150>)
 8000f6c:	f003 fdf6 	bl	8004b5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000f76:	f000 fbd4 	bl	8001722 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	3768      	adds	r7, #104	; 0x68
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000dc 	.word	0x200000dc
 8000f88:	40010000 	.word	0x40010000

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b46      	ldr	r3, [pc, #280]	; (80010bc <MX_GPIO_Init+0x130>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a45      	ldr	r2, [pc, #276]	; (80010bc <MX_GPIO_Init+0x130>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b43      	ldr	r3, [pc, #268]	; (80010bc <MX_GPIO_Init+0x130>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <MX_GPIO_Init+0x130>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a3f      	ldr	r2, [pc, #252]	; (80010bc <MX_GPIO_Init+0x130>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b3d      	ldr	r3, [pc, #244]	; (80010bc <MX_GPIO_Init+0x130>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <MX_GPIO_Init+0x130>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a39      	ldr	r2, [pc, #228]	; (80010bc <MX_GPIO_Init+0x130>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b37      	ldr	r3, [pc, #220]	; (80010bc <MX_GPIO_Init+0x130>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b34      	ldr	r3, [pc, #208]	; (80010bc <MX_GPIO_Init+0x130>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a33      	ldr	r2, [pc, #204]	; (80010bc <MX_GPIO_Init+0x130>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b31      	ldr	r3, [pc, #196]	; (80010bc <MX_GPIO_Init+0x130>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001002:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <MX_GPIO_Init+0x130>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <MX_GPIO_Init+0x130>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <MX_GPIO_Init+0x130>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001020:	4827      	ldr	r0, [pc, #156]	; (80010c0 <MX_GPIO_Init+0x134>)
 8001022:	f001 feb9 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7110 	mov.w	r1, #576	; 0x240
 800102c:	4825      	ldr	r0, [pc, #148]	; (80010c4 <MX_GPIO_Init+0x138>)
 800102e:	f001 feb3 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001038:	4823      	ldr	r0, [pc, #140]	; (80010c8 <MX_GPIO_Init+0x13c>)
 800103a:	f001 fead 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800103e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	481a      	ldr	r0, [pc, #104]	; (80010c0 <MX_GPIO_Init+0x134>)
 8001058:	f001 fcda 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4816      	ldr	r0, [pc, #88]	; (80010cc <MX_GPIO_Init+0x140>)
 8001072:	f001 fccd 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001076:	f44f 7310 	mov.w	r3, #576	; 0x240
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_GPIO_Init+0x138>)
 8001090:	f001 fcbe 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_GPIO_Init+0x13c>)
 80010ae:	f001 fcaf 	bl	8002a10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020c00 	.word	0x40020c00

080010d0 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */

/***************************** Idle Task *****************************/
void vApplicationIdleHook(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <Task1_Handler>:

/***************************** Node Guarding Task *****************************/
void Task1_Handler(void* pvParameters)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = NODE_GUARDING_PERIOD;
 80010e6:	2396      	movs	r3, #150	; 0x96
 80010e8:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 80010ea:	f004 fca7 	bl	8005a3c <xTaskGetTickCount>
 80010ee:	4603      	mov	r3, r0
 80010f0:	60bb      	str	r3, [r7, #8]

	for (;;)
	{
		// Suspend task until period
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	68f9      	ldr	r1, [r7, #12]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f004 fab9 	bl	8005670 <xTaskDelayUntil>

		// Inverter Node Guarding Frame
		nodeGuarding();
 80010fe:	f7ff fa1d 	bl	800053c <nodeGuarding>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001102:	e7f6      	b.n	80010f2 <Task1_Handler+0x14>

08001104 <Task2_Handler>:
	}
}

/***************************** Torque Control Task *****************************/
void Task2_Handler(void* pvParameters)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = TORQUE_CONTROL_PERIOD;
 800110c:	230a      	movs	r3, #10
 800110e:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8001110:	f004 fc94 	bl	8005a3c <xTaskGetTickCount>
 8001114:	4603      	mov	r3, r0
 8001116:	60bb      	str	r3, [r7, #8]

	for (;;)
	{
		// Suspend task until period
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	4618      	mov	r0, r3
 8001120:	f004 faa6 	bl	8005670 <xTaskDelayUntil>

		// Throttle Sensor Error Checks
		errorSet[PRIM_THROTTLE_SENS_ERR] = primaryThrottleSensorErrorCheck();
 8001124:	2400      	movs	r4, #0
 8001126:	f000 f9db 	bl	80014e0 <primaryThrottleSensorErrorCheck>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <Task2_Handler+0x50>)
 8001130:	551a      	strb	r2, [r3, r4]

		errorSet[SECOND_THROTTLE_SENS_ERR] = secondaryThrottleSensorErrorCheck();
 8001132:	2401      	movs	r4, #1
 8001134:	f000 f9f0 	bl	8001518 <secondaryThrottleSensorErrorCheck>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <Task2_Handler+0x50>)
 800113e:	551a      	strb	r2, [r3, r4]

		errorSet[THROTTLE_OFFSET_ERROR] = throttleSensorDeviationCheck();
 8001140:	2402      	movs	r4, #2
 8001142:	f000 fa05 	bl	8001550 <throttleSensorDeviationCheck>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b02      	ldr	r3, [pc, #8]	; (8001154 <Task2_Handler+0x50>)
 800114c:	551a      	strb	r2, [r3, r4]

		// Torque Request

		torqueRequest();
 800114e:	f000 fa5b 	bl	8001608 <torqueRequest>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001152:	e7e1      	b.n	8001118 <Task2_Handler+0x14>
 8001154:	20000178 	.word	0x20000178

08001158 <Task3_Handler>:
	}
}

/***************************** Ignition Task *****************************/
void Task3_Handler(void* pvParameters)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		ignitionTask();
 8001160:	f000 f846 	bl	80011f0 <ignitionTask>
 8001164:	e7fc      	b.n	8001160 <Task3_Handler+0x8>

08001166 <Task4_Handler>:
	}
}

/***************************** BMS Data Task *****************************/
void Task4_Handler(void* pvParameters)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	for (;;)
 800116e:	e7fe      	b.n	800116e <Task4_Handler+0x8>

08001170 <Task5_Handler>:
	}
}

/***************************** Temp Sense Data Task *****************************/
void Task5_Handler(void* pvParameters)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	for (;;)
 8001178:	e7fe      	b.n	8001178 <Task5_Handler+0x8>

0800117a <Task6_Handler>:
	}
}

/***************************** Torque Derating Task *****************************/
void Task6_Handler(void* pvParameters)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	for (;;)
 8001182:	e7fe      	b.n	8001182 <Task6_Handler+0x8>

08001184 <map>:
	{

	}
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	69b9      	ldr	r1, [r7, #24]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	1a8a      	subs	r2, r1, r2
 800119e:	fb03 f202 	mul.w	r2, r3, r2
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	1acb      	subs	r3, r1, r3
 80011a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	4413      	add	r3, r2
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <constrain>:

long constrain(long x, long out_min, long out_max)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
	if (x < out_min)
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	da01      	bge.n	80011d4 <constrain+0x18>
	{
		x = out_min;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60fb      	str	r3, [r7, #12]
	}

	if (x > out_max)
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dd01      	ble.n	80011e0 <constrain+0x24>
	{
		x = out_max;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	60fb      	str	r3, [r7, #12]
	}

	return x;
 80011e0:	68fb      	ldr	r3, [r7, #12]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <ignitionTask>:

void ignitionTask(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	buttonState = HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_PIN);
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <ignitionTask+0x98>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fdb2 	bl	8002d68 <HAL_GPIO_ReadPin>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <ignitionTask+0x9c>)
 800120a:	701a      	strb	r2, [r3, #0]

	buttonPressTime = HAL_GetTick();
 800120c:	f000 fcb0 	bl	8001b70 <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <ignitionTask+0xa0>)
 8001214:	6013      	str	r3, [r2, #0]

	while (buttonState == IGNITION_ACTIVE)
 8001216:	e030      	b.n	800127a <ignitionTask+0x8a>
	{
		if (HAL_GetTick() - buttonPressTime > IGNITION_BUTTON_THRESHOLD)
 8001218:	f000 fcaa 	bl	8001b70 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <ignitionTask+0xa0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001228:	d91b      	bls.n	8001262 <ignitionTask+0x72>
		{
			startNode();
 800122a:	f7ff f9b5 	bl	8000598 <startNode>
			clearErrors();
 800122e:	f7ff f9f5 	bl	800061c <clearErrors>

			HAL_GPIO_WritePin(RTD_PIN_PORT, RTD_PIN, RTD_ACTIVE);
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <ignitionTask+0xa4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123a:	2201      	movs	r2, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f001 fdab 	bl	8002d98 <HAL_GPIO_WritePin>

			TIM1->CNT = 0;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <ignitionTask+0xa8>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_OC_Start_IT(&htim1, IGNITION_OUPUT_CAPTURE);
 8001248:	2300      	movs	r3, #0
 800124a:	4619      	mov	r1, r3
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <ignitionTask+0xac>)
 800124e:	f002 fba1 	bl	8003994 <HAL_TIM_OC_Start_IT>

			enableCar = true;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <ignitionTask+0xb0>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]

			buttonPressTime = HAL_GetTick();
 8001258:	f000 fc8a 	bl	8001b70 <HAL_GetTick>
 800125c:	4603      	mov	r3, r0
 800125e:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <ignitionTask+0xa0>)
 8001260:	6013      	str	r3, [r2, #0]
		}

		buttonState = HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_PIN);
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <ignitionTask+0x98>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fd7b 	bl	8002d68 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <ignitionTask+0x9c>)
 8001278:	701a      	strb	r2, [r3, #0]
	while (buttonState == IGNITION_ACTIVE)
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <ignitionTask+0x9c>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2200      	movs	r2, #0
 8001280:	4293      	cmp	r3, r2
 8001282:	d0c9      	beq.n	8001218 <ignitionTask+0x28>
	}

	return;
 8001284:	bf00      	nop
}
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000000c 	.word	0x2000000c
 800128c:	20000128 	.word	0x20000128
 8001290:	2000012c 	.word	0x2000012c
 8001294:	20000008 	.word	0x20000008
 8001298:	40010000 	.word	0x40010000
 800129c:	200000dc 	.word	0x200000dc
 80012a0:	20000129 	.word	0x20000129

080012a4 <setADCChannel>:

void setADCChannel(ADC_ChannelConfTypeDef* adcChConfig, uint32_t adcChannel)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
	adcChConfig->Channel = adcChannel;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	601a      	str	r2, [r3, #0]
	adcChConfig->Rank = ADC_REGULAR_RANK_1;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	605a      	str	r2, [r3, #4]
	adcChConfig->SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2203      	movs	r2, #3
 80012be:	609a      	str	r2, [r3, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, adcChConfig) != HAL_OK)
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <setADCChannel+0x38>)
 80012c4:	f000 fe3e 	bl	8001f44 <HAL_ADC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <setADCChannel+0x30>
	{
		Error_Handler();
 80012ce:	f000 fa28 	bl	8001722 <Error_Handler>
	}

	return;
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
}
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000044 	.word	0x20000044

080012e0 <getADCAverage>:

uint32_t getADCAverage(ADC_ChannelConfTypeDef* adcChConfig, uint32_t adcChannel)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	setADCChannel(adcChConfig, adcChannel);
 80012ea:	6839      	ldr	r1, [r7, #0]
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffd9 	bl	80012a4 <setADCChannel>

	sum = 0;
 80012f2:	4b5c      	ldr	r3, [pc, #368]	; (8001464 <getADCAverage+0x184>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	e014      	b.n	8001328 <getADCAverage+0x48>
	{
		HAL_ADC_Start(&hadc1);
 80012fe:	485a      	ldr	r0, [pc, #360]	; (8001468 <getADCAverage+0x188>)
 8001300:	f000 fc86 	bl	8001c10 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc1, 10);
 8001304:	210a      	movs	r1, #10
 8001306:	4858      	ldr	r0, [pc, #352]	; (8001468 <getADCAverage+0x188>)
 8001308:	f000 fd84 	bl	8001e14 <HAL_ADC_PollForConversion>

		adcBuffer[i] = HAL_ADC_GetValue(&hadc1);
 800130c:	4856      	ldr	r0, [pc, #344]	; (8001468 <getADCAverage+0x188>)
 800130e:	f000 fe0c 	bl	8001f2a <HAL_ADC_GetValue>
 8001312:	4602      	mov	r2, r0
 8001314:	4955      	ldr	r1, [pc, #340]	; (800146c <getADCAverage+0x18c>)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		HAL_ADC_Stop(&hadc1);
 800131c:	4852      	ldr	r0, [pc, #328]	; (8001468 <getADCAverage+0x188>)
 800131e:	f000 fd45 	bl	8001dac <HAL_ADC_Stop>
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3301      	adds	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	2b04      	cmp	r3, #4
 800132c:	dde7      	ble.n	80012fe <getADCAverage+0x1e>
	}

	max = adcBuffer[0];
 800132e:	4b4f      	ldr	r3, [pc, #316]	; (800146c <getADCAverage+0x18c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	4b4e      	ldr	r3, [pc, #312]	; (8001470 <getADCAverage+0x190>)
 8001336:	601a      	str	r2, [r3, #0]

	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001338:	2301      	movs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	e014      	b.n	8001368 <getADCAverage+0x88>
	{
		if (adcBuffer[i] > max)
 800133e:	4a4b      	ldr	r2, [pc, #300]	; (800146c <getADCAverage+0x18c>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <getADCAverage+0x190>)
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	4293      	cmp	r3, r2
 800134c:	d909      	bls.n	8001362 <getADCAverage+0x82>
		{
			max = adcBuffer[i];
 800134e:	4a47      	ldr	r2, [pc, #284]	; (800146c <getADCAverage+0x18c>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	461a      	mov	r2, r3
 8001358:	4b45      	ldr	r3, [pc, #276]	; (8001470 <getADCAverage+0x190>)
 800135a:	601a      	str	r2, [r3, #0]
			maxIndex = i;
 800135c:	4a45      	ldr	r2, [pc, #276]	; (8001474 <getADCAverage+0x194>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	3301      	adds	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2b04      	cmp	r3, #4
 800136c:	dde7      	ble.n	800133e <getADCAverage+0x5e>
		}
	}

	min = adcBuffer[0];
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <getADCAverage+0x18c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4b40      	ldr	r3, [pc, #256]	; (8001478 <getADCAverage+0x198>)
 8001376:	601a      	str	r2, [r3, #0]

	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001378:	2301      	movs	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	e014      	b.n	80013a8 <getADCAverage+0xc8>
	{
		if (adcBuffer[i] < min)
 800137e:	4a3b      	ldr	r2, [pc, #236]	; (800146c <getADCAverage+0x18c>)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	4a3c      	ldr	r2, [pc, #240]	; (8001478 <getADCAverage+0x198>)
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	4293      	cmp	r3, r2
 800138c:	d209      	bcs.n	80013a2 <getADCAverage+0xc2>
		{
			min = adcBuffer[i];
 800138e:	4a37      	ldr	r2, [pc, #220]	; (800146c <getADCAverage+0x18c>)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	461a      	mov	r2, r3
 8001398:	4b37      	ldr	r3, [pc, #220]	; (8001478 <getADCAverage+0x198>)
 800139a:	601a      	str	r2, [r3, #0]
			minIndex = i;
 800139c:	4a37      	ldr	r2, [pc, #220]	; (800147c <getADCAverage+0x19c>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	dde7      	ble.n	800137e <getADCAverage+0x9e>
		}
	}

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	e01a      	b.n	80013ea <getADCAverage+0x10a>
	{
		if (i == minIndex || i == maxIndex)
 80013b4:	4b31      	ldr	r3, [pc, #196]	; (800147c <getADCAverage+0x19c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d004      	beq.n	80013c8 <getADCAverage+0xe8>
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <getADCAverage+0x194>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d104      	bne.n	80013d2 <getADCAverage+0xf2>
		{
			sum += 0;
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <getADCAverage+0x184>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a25      	ldr	r2, [pc, #148]	; (8001464 <getADCAverage+0x184>)
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e008      	b.n	80013e4 <getADCAverage+0x104>
		}
		else
		{
			sum += adcBuffer[i];
 80013d2:	4a26      	ldr	r2, [pc, #152]	; (800146c <getADCAverage+0x18c>)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <getADCAverage+0x184>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a20      	ldr	r2, [pc, #128]	; (8001464 <getADCAverage+0x184>)
 80013e2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	3301      	adds	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	dde1      	ble.n	80013b4 <getADCAverage+0xd4>
		}
	}

	average = sum / (ADC_SAMPLE_COUNT - 2);
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <getADCAverage+0x184>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a22      	ldr	r2, [pc, #136]	; (8001480 <getADCAverage+0x1a0>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	085b      	lsrs	r3, r3, #1
 80013fc:	4a21      	ldr	r2, [pc, #132]	; (8001484 <getADCAverage+0x1a4>)
 80013fe:	6013      	str	r3, [r2, #0]

	adcBuffer[maxIndex] = average;
 8001400:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <getADCAverage+0x194>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <getADCAverage+0x1a4>)
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	4918      	ldr	r1, [pc, #96]	; (800146c <getADCAverage+0x18c>)
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	adcBuffer[minIndex] = average;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <getADCAverage+0x19c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <getADCAverage+0x1a4>)
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	4915      	ldr	r1, [pc, #84]	; (800146c <getADCAverage+0x18c>)
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	sum = 0;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <getADCAverage+0x184>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e00b      	b.n	8001440 <getADCAverage+0x160>
	{
		sum += adcBuffer[i];
 8001428:	4a10      	ldr	r2, [pc, #64]	; (800146c <getADCAverage+0x18c>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <getADCAverage+0x184>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4413      	add	r3, r2
 8001436:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <getADCAverage+0x184>)
 8001438:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3301      	adds	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b04      	cmp	r3, #4
 8001444:	ddf0      	ble.n	8001428 <getADCAverage+0x148>
	}

	average = sum / ADC_SAMPLE_COUNT;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <getADCAverage+0x184>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <getADCAverage+0x1a8>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <getADCAverage+0x1a4>)
 8001454:	6013      	str	r3, [r2, #0]

	return average;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <getADCAverage+0x1a4>)
 8001458:	681b      	ldr	r3, [r3, #0]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000164 	.word	0x20000164
 8001468:	20000044 	.word	0x20000044
 800146c:	20000150 	.word	0x20000150
 8001470:	20000140 	.word	0x20000140
 8001474:	20000148 	.word	0x20000148
 8001478:	20000144 	.word	0x20000144
 800147c:	2000014c 	.word	0x2000014c
 8001480:	aaaaaaab 	.word	0xaaaaaaab
 8001484:	20000168 	.word	0x20000168
 8001488:	cccccccd 	.word	0xcccccccd

0800148c <getPrimaryThrottlePosition>:

uint32_t getPrimaryThrottlePosition(ADC_ChannelConfTypeDef* adcChConfig)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	return constrain(getADCAverage(adcChConfig, PRIMARY_THROTTLE_CHANNEL), ADC_MIN_LIMIT, ADC_MAX_LIMIT);
 8001494:	2300      	movs	r3, #0
 8001496:	4619      	mov	r1, r3
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff21 	bl	80012e0 <getADCAverage>
 800149e:	4603      	mov	r3, r0
 80014a0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe88 	bl	80011bc <constrain>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <getSecondaryThrottlePosition>:

uint32_t getSecondaryThrottlePosition(ADC_ChannelConfTypeDef* adcChConfig)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
	return constrain(getADCAverage(adcChConfig, SECONDARY_THROTTLE_CHANNEL), ADC_MIN_LIMIT, ADC_MAX_LIMIT);
 80014be:	2301      	movs	r3, #1
 80014c0:	4619      	mov	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff0c 	bl	80012e0 <getADCAverage>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fe73 	bl	80011bc <constrain>
 80014d6:	4603      	mov	r3, r0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <primaryThrottleSensorErrorCheck>:

bool primaryThrottleSensorErrorCheck()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 80014e4:	480a      	ldr	r0, [pc, #40]	; (8001510 <primaryThrottleSensorErrorCheck+0x30>)
 80014e6:	f7ff ffd1 	bl	800148c <getPrimaryThrottlePosition>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a09      	ldr	r2, [pc, #36]	; (8001514 <primaryThrottleSensorErrorCheck+0x34>)
 80014ee:	6013      	str	r3, [r2, #0]

	if (primaryPotValue <= PRIMARY_THROTTLE_RANGE_MIN || primaryPotValue >= PRIMARY_THROTTLE_RANGE_MAX)
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <primaryThrottleSensorErrorCheck+0x34>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d905      	bls.n	8001506 <primaryThrottleSensorErrorCheck+0x26>
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <primaryThrottleSensorErrorCheck+0x34>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001502:	4293      	cmp	r3, r2
 8001504:	d301      	bcc.n	800150a <primaryThrottleSensorErrorCheck+0x2a>
	{
		return true;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <primaryThrottleSensorErrorCheck+0x2c>
	}
	else
	{
		return false;
 800150a:	2300      	movs	r3, #0
	}
}
 800150c:	4618      	mov	r0, r3
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000130 	.word	0x20000130
 8001514:	20000170 	.word	0x20000170

08001518 <secondaryThrottleSensorErrorCheck>:

bool secondaryThrottleSensorErrorCheck()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 800151c:	480a      	ldr	r0, [pc, #40]	; (8001548 <secondaryThrottleSensorErrorCheck+0x30>)
 800151e:	f7ff ffca 	bl	80014b6 <getSecondaryThrottlePosition>
 8001522:	4603      	mov	r3, r0
 8001524:	4a09      	ldr	r2, [pc, #36]	; (800154c <secondaryThrottleSensorErrorCheck+0x34>)
 8001526:	6013      	str	r3, [r2, #0]

	if (secondaryPotValue <= SECONDARY_THROTTLE_RANGE_MIN || secondaryPotValue >= SECONDARY_THROTTLE_RANGE_MAX)
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <secondaryThrottleSensorErrorCheck+0x34>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2200      	movs	r2, #0
 800152e:	4293      	cmp	r3, r2
 8001530:	d905      	bls.n	800153e <secondaryThrottleSensorErrorCheck+0x26>
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <secondaryThrottleSensorErrorCheck+0x34>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800153a:	4293      	cmp	r3, r2
 800153c:	d301      	bcc.n	8001542 <secondaryThrottleSensorErrorCheck+0x2a>
	{
		return true;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <secondaryThrottleSensorErrorCheck+0x2c>
	}
	else
	{
		return false;
 8001542:	2300      	movs	r3, #0
	}
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000130 	.word	0x20000130
 800154c:	20000174 	.word	0x20000174

08001550 <throttleSensorDeviationCheck>:

bool throttleSensorDeviationCheck()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	if (errorSet[PRIM_THROTTLE_SENS_ERR] == true || errorSet[SECOND_THROTTLE_SENS_ERR] == true)
 8001554:	2300      	movs	r3, #0
 8001556:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <throttleSensorDeviationCheck+0xa4>)
 8001558:	5cd3      	ldrb	r3, [r2, r3]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d004      	beq.n	8001568 <throttleSensorDeviationCheck+0x18>
 800155e:	2301      	movs	r3, #1
 8001560:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <throttleSensorDeviationCheck+0xa4>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <throttleSensorDeviationCheck+0x1c>
	{
		return false;
 8001568:	2300      	movs	r3, #0
 800156a:	e041      	b.n	80015f0 <throttleSensorDeviationCheck+0xa0>
	}
	else
	{
		primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 800156c:	4822      	ldr	r0, [pc, #136]	; (80015f8 <throttleSensorDeviationCheck+0xa8>)
 800156e:	f7ff ff8d 	bl	800148c <getPrimaryThrottlePosition>
 8001572:	4603      	mov	r3, r0
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <throttleSensorDeviationCheck+0xac>)
 8001576:	6013      	str	r3, [r2, #0]

		secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 8001578:	481f      	ldr	r0, [pc, #124]	; (80015f8 <throttleSensorDeviationCheck+0xa8>)
 800157a:	f7ff ff9c 	bl	80014b6 <getSecondaryThrottlePosition>
 800157e:	4603      	mov	r3, r0
 8001580:	4a1f      	ldr	r2, [pc, #124]	; (8001600 <throttleSensorDeviationCheck+0xb0>)
 8001582:	6013      	str	r3, [r2, #0]

		if (primaryPotValue > secondaryPotValue)
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <throttleSensorDeviationCheck+0xac>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <throttleSensorDeviationCheck+0xb0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d90f      	bls.n	80015b0 <throttleSensorDeviationCheck+0x60>
		{
			percentageDeviation = (((primaryPotValue - secondaryPotValue) / secondaryPotValue) * 100);
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <throttleSensorDeviationCheck+0xac>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <throttleSensorDeviationCheck+0xb0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	1ad2      	subs	r2, r2, r3
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <throttleSensorDeviationCheck+0xb0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	2264      	movs	r2, #100	; 0x64
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <throttleSensorDeviationCheck+0xb4>)
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e018      	b.n	80015e2 <throttleSensorDeviationCheck+0x92>
		}
		else if (secondaryPotValue > primaryPotValue)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <throttleSensorDeviationCheck+0xb0>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <throttleSensorDeviationCheck+0xac>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d90f      	bls.n	80015dc <throttleSensorDeviationCheck+0x8c>
		{
			percentageDeviation = (((secondaryPotValue - primaryPotValue) / primaryPotValue) * 100);
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <throttleSensorDeviationCheck+0xb0>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <throttleSensorDeviationCheck+0xac>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	1ad2      	subs	r2, r2, r3
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <throttleSensorDeviationCheck+0xac>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	2264      	movs	r2, #100	; 0x64
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <throttleSensorDeviationCheck+0xb4>)
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e002      	b.n	80015e2 <throttleSensorDeviationCheck+0x92>
		}
		else
		{
			percentageDeviation = 0;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <throttleSensorDeviationCheck+0xb4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
		}

		if (percentageDeviation > THROTTLE_DEVIATION_THRESHOLD)
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <throttleSensorDeviationCheck+0xb4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b0a      	cmp	r3, #10
 80015e8:	dd01      	ble.n	80015ee <throttleSensorDeviationCheck+0x9e>
		{
			return true;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <throttleSensorDeviationCheck+0xa0>
		}
		else
		{
			return false;
 80015ee:	2300      	movs	r3, #0
		}
	}
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000178 	.word	0x20000178
 80015f8:	20000130 	.word	0x20000130
 80015fc:	20000170 	.word	0x20000170
 8001600:	20000174 	.word	0x20000174
 8001604:	2000016c 	.word	0x2000016c

08001608 <torqueRequest>:

void torqueRequest(void)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b083      	sub	sp, #12
 800160c:	af02      	add	r7, sp, #8
	if ((errorSet[PRIMARY_BRK_SENS_ERROR] == true && errorSet[SECOND_THROTTLE_SENS_ERR] == true) || errorSet[THROTTLE_OFFSET_ERROR] == true)
 800160e:	2303      	movs	r3, #3
 8001610:	4a37      	ldr	r2, [pc, #220]	; (80016f0 <torqueRequest+0xe8>)
 8001612:	5cd3      	ldrb	r3, [r2, r3]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d104      	bne.n	8001622 <torqueRequest+0x1a>
 8001618:	2301      	movs	r3, #1
 800161a:	4a35      	ldr	r2, [pc, #212]	; (80016f0 <torqueRequest+0xe8>)
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d004      	beq.n	800162c <torqueRequest+0x24>
 8001622:	2302      	movs	r3, #2
 8001624:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <torqueRequest+0xe8>)
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d104      	bne.n	8001636 <torqueRequest+0x2e>
	{
		torqueRefLimit = 5000;
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <torqueRequest+0xec>)
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e051      	b.n	80016da <torqueRequest+0xd2>
	}
	else if (errorSet[PRIM_THROTTLE_SENS_ERR] == true)
 8001636:	2300      	movs	r3, #0
 8001638:	4a2d      	ldr	r2, [pc, #180]	; (80016f0 <torqueRequest+0xe8>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d126      	bne.n	800168e <torqueRequest+0x86>
	{
		secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 8001640:	482d      	ldr	r0, [pc, #180]	; (80016f8 <torqueRequest+0xf0>)
 8001642:	f7ff ff38 	bl	80014b6 <getSecondaryThrottlePosition>
 8001646:	4603      	mov	r3, r0
 8001648:	4a2c      	ldr	r2, [pc, #176]	; (80016fc <torqueRequest+0xf4>)
 800164a:	6013      	str	r3, [r2, #0]

		torqueRefLimit = map(secondaryPotValue, SECONDARY_THROTTLE_POSITION_MIN, SECONDARY_THROTTLE_POSITION_MAX, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <torqueRequest+0xf4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	2300      	movs	r3, #0
 8001654:	4619      	mov	r1, r3
 8001656:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800165a:	461c      	mov	r4, r3
 800165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001660:	f242 531c 	movw	r3, #9500	; 0x251c
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	4613      	mov	r3, r2
 8001668:	4622      	mov	r2, r4
 800166a:	f7ff fd8b 	bl	8001184 <map>
 800166e:	4603      	mov	r3, r0
 8001670:	4a20      	ldr	r2, [pc, #128]	; (80016f4 <torqueRequest+0xec>)
 8001672:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <torqueRequest+0xec>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f241 3188 	movw	r1, #5000	; 0x1388
 800167c:	f242 521c 	movw	r2, #9500	; 0x251c
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fd9b 	bl	80011bc <constrain>
 8001686:	4603      	mov	r3, r0
 8001688:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <torqueRequest+0xec>)
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e025      	b.n	80016da <torqueRequest+0xd2>
	}
	else
	{
		primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 800168e:	481a      	ldr	r0, [pc, #104]	; (80016f8 <torqueRequest+0xf0>)
 8001690:	f7ff fefc 	bl	800148c <getPrimaryThrottlePosition>
 8001694:	4603      	mov	r3, r0
 8001696:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <torqueRequest+0xf8>)
 8001698:	6013      	str	r3, [r2, #0]

		torqueRefLimit = map(primaryPotValue, PRIMARY_THROTTLE_POSITION_MIN, PRIMARY_THROTTLE_POSITION_MAX, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <torqueRequest+0xf8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	2300      	movs	r3, #0
 80016a2:	4619      	mov	r1, r3
 80016a4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80016a8:	461c      	mov	r4, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	f242 531c 	movw	r3, #9500	; 0x251c
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4613      	mov	r3, r2
 80016b6:	4622      	mov	r2, r4
 80016b8:	f7ff fd64 	bl	8001184 <map>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <torqueRequest+0xec>)
 80016c0:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <torqueRequest+0xec>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f241 3188 	movw	r1, #5000	; 0x1388
 80016ca:	f242 521c 	movw	r2, #9500	; 0x251c
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fd74 	bl	80011bc <constrain>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <torqueRequest+0xec>)
 80016d8:	6013      	str	r3, [r2, #0]
	}

	torqueControlMessage(SPEED_REF_LIMIT, &torqueRefLimit);
 80016da:	f649 1364 	movw	r3, #39268	; 0x9964
 80016de:	4905      	ldr	r1, [pc, #20]	; (80016f4 <torqueRequest+0xec>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fff3 	bl	80006cc <torqueControlMessage>
}
 80016e6:	bf00      	nop
 80016e8:	3704      	adds	r7, #4
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000178 	.word	0x20000178
 80016f4:	20000010 	.word	0x20000010
 80016f8:	20000130 	.word	0x20000130
 80016fc:	20000174 	.word	0x20000174
 8001700:	20000170 	.word	0x20000170

08001704 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001714:	d101      	bne.n	800171a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001716:	f000 fa17 	bl	8001b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001726:	b672      	cpsid	i
}
 8001728:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172a:	e7fe      	b.n	800172a <Error_Handler+0x8>

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_MspInit+0x44>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_MspInit+0x44>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_MspInit+0x44>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_MspInit+0x44>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_MspInit+0x44>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_MspInit+0x44>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <HAL_ADC_MspInit+0x74>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d123      	bne.n	80017de <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_ADC_MspInit+0x78>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_ADC_MspInit+0x78>)
 800179c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_ADC_MspInit+0x78>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_ADC_MspInit+0x78>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_ADC_MspInit+0x78>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_ADC_MspInit+0x78>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017c6:	230f      	movs	r3, #15
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ca:	2303      	movs	r3, #3
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_ADC_MspInit+0x7c>)
 80017da:	f001 f919 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40012000 	.word	0x40012000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000

080017f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a3e      	ldr	r2, [pc, #248]	; (800190c <HAL_CAN_MspInit+0x118>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d132      	bne.n	800187c <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <HAL_CAN_MspInit+0x11c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	4a3c      	ldr	r2, [pc, #240]	; (8001910 <HAL_CAN_MspInit+0x11c>)
 800181e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001820:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <HAL_CAN_MspInit+0x11c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10b      	bne.n	8001840 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001828:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <HAL_CAN_MspInit+0x120>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	4a39      	ldr	r2, [pc, #228]	; (8001914 <HAL_CAN_MspInit+0x120>)
 800182e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001832:	6413      	str	r3, [r2, #64]	; 0x40
 8001834:	4b37      	ldr	r3, [pc, #220]	; (8001914 <HAL_CAN_MspInit+0x120>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_CAN_MspInit+0x120>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	4a33      	ldr	r2, [pc, #204]	; (8001914 <HAL_CAN_MspInit+0x120>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6313      	str	r3, [r2, #48]	; 0x30
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_CAN_MspInit+0x120>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001858:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800186a:	2309      	movs	r3, #9
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	4828      	ldr	r0, [pc, #160]	; (8001918 <HAL_CAN_MspInit+0x124>)
 8001876:	f001 f8cb 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800187a:	e042      	b.n	8001902 <HAL_CAN_MspInit+0x10e>
  else if(hcan->Instance==CAN2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a26      	ldr	r2, [pc, #152]	; (800191c <HAL_CAN_MspInit+0x128>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d13d      	bne.n	8001902 <HAL_CAN_MspInit+0x10e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_CAN_MspInit+0x120>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a22      	ldr	r2, [pc, #136]	; (8001914 <HAL_CAN_MspInit+0x120>)
 800188c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_CAN_MspInit+0x120>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_CAN_MspInit+0x11c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <HAL_CAN_MspInit+0x11c>)
 80018a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_CAN_MspInit+0x11c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d10b      	bne.n	80018c8 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_CAN_MspInit+0x120>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_CAN_MspInit+0x120>)
 80018b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ba:	6413      	str	r3, [r2, #64]	; 0x40
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_CAN_MspInit+0x120>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_CAN_MspInit+0x120>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_CAN_MspInit+0x120>)
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	6313      	str	r3, [r2, #48]	; 0x30
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_CAN_MspInit+0x120>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80018f2:	2309      	movs	r3, #9
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	4808      	ldr	r0, [pc, #32]	; (8001920 <HAL_CAN_MspInit+0x12c>)
 80018fe:	f001 f887 	bl	8002a10 <HAL_GPIO_Init>
}
 8001902:	bf00      	nop
 8001904:	3730      	adds	r7, #48	; 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40006400 	.word	0x40006400
 8001910:	2000019c 	.word	0x2000019c
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000
 800191c:	40006800 	.word	0x40006800
 8001920:	40020400 	.word	0x40020400

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <HAL_TIM_Base_MspInit+0x44>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d113      	bne.n	800195e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_TIM_Base_MspInit+0x48>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	4a0c      	ldr	r2, [pc, #48]	; (800196c <HAL_TIM_Base_MspInit+0x48>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6453      	str	r3, [r2, #68]	; 0x44
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_TIM_Base_MspInit+0x48>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	201b      	movs	r0, #27
 8001954:	f001 f832 	bl	80029bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001958:	201b      	movs	r0, #27
 800195a:	f001 f84b 	bl	80029f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40010000 	.word	0x40010000
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <HAL_InitTick+0xe4>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <HAL_InitTick+0xe4>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6413      	str	r3, [r2, #64]	; 0x40
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_InitTick+0xe4>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001998:	f107 0210 	add.w	r2, r7, #16
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 fe92 	bl	80036cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019b2:	f001 fe77 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 80019b6:	6378      	str	r0, [r7, #52]	; 0x34
 80019b8:	e004      	b.n	80019c4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019ba:	f001 fe73 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 80019be:	4603      	mov	r3, r0
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c6:	4a24      	ldr	r2, [pc, #144]	; (8001a58 <HAL_InitTick+0xe8>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	0c9b      	lsrs	r3, r3, #18
 80019ce:	3b01      	subs	r3, #1
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_InitTick+0xec>)
 80019d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_InitTick+0xec>)
 80019dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019e0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_InitTick+0xec>)
 80019e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_InitTick+0xec>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_InitTick+0xec>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_InitTick+0xec>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80019fa:	4818      	ldr	r0, [pc, #96]	; (8001a5c <HAL_InitTick+0xec>)
 80019fc:	f001 fe98 	bl	8003730 <HAL_TIM_Base_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11b      	bne.n	8001a46 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001a0e:	4813      	ldr	r0, [pc, #76]	; (8001a5c <HAL_InitTick+0xec>)
 8001a10:	f001 fee6 	bl	80037e0 <HAL_TIM_Base_Start_IT>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d111      	bne.n	8001a46 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a22:	201c      	movs	r0, #28
 8001a24:	f000 ffe6 	bl	80029f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	d808      	bhi.n	8001a40 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	201c      	movs	r0, #28
 8001a34:	f000 ffc2 	bl	80029bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a38:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_InitTick+0xf0>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e002      	b.n	8001a46 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3738      	adds	r7, #56	; 0x38
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	431bde83 	.word	0x431bde83
 8001a5c:	200001a0 	.word	0x200001a0
 8001a60:	20000018 	.word	0x20000018

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM1_CC_IRQHandler+0x10>)
 8001a96:	f002 f993 	bl	8003dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200000dc 	.word	0x200000dc

08001aa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM2_IRQHandler+0x10>)
 8001aaa:	f002 f989 	bl	8003dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200001a0 	.word	0x200001a0

08001ab8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <SystemInit+0x20>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <SystemInit+0x20>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ae2:	490e      	ldr	r1, [pc, #56]	; (8001b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001af8:	4c0b      	ldr	r4, [pc, #44]	; (8001b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b06:	f7ff ffd7 	bl	8001ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f005 fa9d 	bl	8007048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0e:	f7fe ff37 	bl	8000980 <main>
  bx  lr    
 8001b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001b20:	08007168 	.word	0x08007168
  ldr r2, =_sbss
 8001b24:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001b28:	20003f94 	.word	0x20003f94

08001b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC_IRQHandler>

08001b2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b32:	2003      	movs	r0, #3
 8001b34:	f000 ff37 	bl	80029a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b38:	200f      	movs	r0, #15
 8001b3a:	f7ff ff19 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3e:	f7ff fdf5 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	2000001c 	.word	0x2000001c
 8001b6c:	200001ec 	.word	0x200001ec

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	200001ec 	.word	0x200001ec

08001b88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e031      	b.n	8001c02 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fde4 	bl	8001774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_ADC_Init+0x84>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	f043 0202 	orr.w	r2, r3, #2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fb0a 	bl	80021f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f023 0303 	bic.w	r3, r3, #3
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bf2:	e001      	b.n	8001bf8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	ffffeefd 	.word	0xffffeefd

08001c10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_Start+0x1a>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e0ad      	b.n	8001d86 <HAL_ADC_Start+0x176>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d018      	beq.n	8001c72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_ADC_Start+0x184>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a50      	ldr	r2, [pc, #320]	; (8001d98 <HAL_ADC_Start+0x188>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	0c9a      	lsrs	r2, r3, #18
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001c64:	e002      	b.n	8001c6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f9      	bne.n	8001c66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d175      	bne.n	8001d6c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c84:	4b45      	ldr	r3, [pc, #276]	; (8001d9c <HAL_ADC_Start+0x18c>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ca6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cba:	d106      	bne.n	8001cca <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	f023 0206 	bic.w	r2, r3, #6
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	645a      	str	r2, [r3, #68]	; 0x44
 8001cc8:	e002      	b.n	8001cd0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ce0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_ADC_Start+0x190>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d143      	bne.n	8001d84 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	e03a      	b.n	8001d84 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a24      	ldr	r2, [pc, #144]	; (8001da4 <HAL_ADC_Start+0x194>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d10e      	bne.n	8001d36 <HAL_ADC_Start+0x126>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d107      	bne.n	8001d36 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d34:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_ADC_Start+0x190>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d120      	bne.n	8001d84 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <HAL_ADC_Start+0x198>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d11b      	bne.n	8001d84 <HAL_ADC_Start+0x174>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d114      	bne.n	8001d84 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	e00b      	b.n	8001d84 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f043 0210 	orr.w	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000014 	.word	0x20000014
 8001d98:	431bde83 	.word	0x431bde83
 8001d9c:	fffff8fe 	.word	0xfffff8fe
 8001da0:	40012300 	.word	0x40012300
 8001da4:	40012000 	.word	0x40012000
 8001da8:	40012200 	.word	0x40012200

08001dac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_Stop+0x16>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e01f      	b.n	8001e02 <HAL_ADC_Stop+0x56>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d107      	bne.n	8001df8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_ADC_Stop+0x64>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	f043 0201 	orr.w	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	ffffeefe 	.word	0xffffeefe

08001e14 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e30:	d113      	bne.n	8001e5a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e40:	d10b      	bne.n	8001e5a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f043 0220 	orr.w	r2, r3, #32
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e063      	b.n	8001f22 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e5a:	f7ff fe89 	bl	8001b70 <HAL_GetTick>
 8001e5e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e60:	e021      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d01d      	beq.n	8001ea6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_ADC_PollForConversion+0x6c>
 8001e70:	f7ff fe7e 	bl	8001b70 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d212      	bcs.n	8001ea6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e03d      	b.n	8001f22 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d1d6      	bne.n	8001e62 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0212 	mvn.w	r2, #18
 8001ebc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d123      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d11f      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1c>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e136      	b.n	80021ce <HAL_ADC_ConfigChannel+0x28a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	d93a      	bls.n	8001fe6 <HAL_ADC_ConfigChannel+0xa2>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f78:	d035      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68d9      	ldr	r1, [r3, #12]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3b1e      	subs	r3, #30
 8001f90:	2207      	movs	r2, #7
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a8d      	ldr	r2, [pc, #564]	; (80021dc <HAL_ADC_ConfigChannel+0x298>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10a      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68d9      	ldr	r1, [r3, #12]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	061a      	lsls	r2, r3, #24
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fbe:	e035      	b.n	800202c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68d9      	ldr	r1, [r3, #12]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4403      	add	r3, r0
 8001fd8:	3b1e      	subs	r3, #30
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fe4:	e022      	b.n	800202c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6919      	ldr	r1, [r3, #16]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43da      	mvns	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	400a      	ands	r2, r1
 8002008:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6919      	ldr	r1, [r3, #16]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	b29b      	uxth	r3, r3
 800201a:	4618      	mov	r0, r3
 800201c:	4603      	mov	r3, r0
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4403      	add	r3, r0
 8002022:	409a      	lsls	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b06      	cmp	r3, #6
 8002032:	d824      	bhi.n	800207e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b05      	subs	r3, #5
 8002046:	221f      	movs	r2, #31
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43da      	mvns	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	400a      	ands	r2, r1
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	4618      	mov	r0, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	3b05      	subs	r3, #5
 8002070:	fa00 f203 	lsl.w	r2, r0, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	635a      	str	r2, [r3, #52]	; 0x34
 800207c:	e04c      	b.n	8002118 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d824      	bhi.n	80020d0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3b23      	subs	r3, #35	; 0x23
 8002098:	221f      	movs	r2, #31
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	400a      	ands	r2, r1
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b23      	subs	r3, #35	; 0x23
 80020c2:	fa00 f203 	lsl.w	r2, r0, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
 80020ce:	e023      	b.n	8002118 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	3b41      	subs	r3, #65	; 0x41
 80020e2:	221f      	movs	r2, #31
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43da      	mvns	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	400a      	ands	r2, r1
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	3b41      	subs	r3, #65	; 0x41
 800210c:	fa00 f203 	lsl.w	r2, r0, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a30      	ldr	r2, [pc, #192]	; (80021e0 <HAL_ADC_ConfigChannel+0x29c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d10a      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x1f4>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800212a:	d105      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800212c:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002132:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002136:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <HAL_ADC_ConfigChannel+0x29c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d10f      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x21e>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b12      	cmp	r3, #18
 8002148:	d10b      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002150:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002154:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800215c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002160:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_ADC_ConfigChannel+0x29c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d12b      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x280>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <HAL_ADC_ConfigChannel+0x298>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d003      	beq.n	800217e <HAL_ADC_ConfigChannel+0x23a>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b11      	cmp	r3, #17
 800217c:	d122      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800217e:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002184:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002188:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002190:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002194:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <HAL_ADC_ConfigChannel+0x298>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d111      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_ADC_ConfigChannel+0x2a4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_ADC_ConfigChannel+0x2a8>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0c9a      	lsrs	r2, r3, #18
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80021b6:	e002      	b.n	80021be <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	10000012 	.word	0x10000012
 80021e0:	40012000 	.word	0x40012000
 80021e4:	40012300 	.word	0x40012300
 80021e8:	20000014 	.word	0x20000014
 80021ec:	431bde83 	.word	0x431bde83

080021f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80021f8:	4b78      	ldr	r3, [pc, #480]	; (80023dc <ADC_Init+0x1ec>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a77      	ldr	r2, [pc, #476]	; (80023dc <ADC_Init+0x1ec>)
 80021fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002202:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002204:	4b75      	ldr	r3, [pc, #468]	; (80023dc <ADC_Init+0x1ec>)
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4973      	ldr	r1, [pc, #460]	; (80023dc <ADC_Init+0x1ec>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002220:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	021a      	lsls	r2, r3, #8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002244:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002266:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6899      	ldr	r1, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <ADC_Init+0x1f0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d022      	beq.n	80022ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002292:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6899      	ldr	r1, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6899      	ldr	r1, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	e00f      	b.n	80022ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0202 	bic.w	r2, r2, #2
 80022f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6899      	ldr	r1, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	005a      	lsls	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01b      	beq.n	8002350 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002326:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002336:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6859      	ldr	r1, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	3b01      	subs	r3, #1
 8002344:	035a      	lsls	r2, r3, #13
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	e007      	b.n	8002360 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800235e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	3b01      	subs	r3, #1
 800237c:	051a      	lsls	r2, r3, #20
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6899      	ldr	r1, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023a2:	025a      	lsls	r2, r3, #9
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	029a      	lsls	r2, r3, #10
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	40012300 	.word	0x40012300
 80023e0:	0f000001 	.word	0x0f000001

080023e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0ed      	b.n	80025d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff f9f6 	bl	80017f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002418:	f7ff fbaa 	bl	8001b70 <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800241e:	e012      	b.n	8002446 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002420:	f7ff fba6 	bl	8001b70 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b0a      	cmp	r3, #10
 800242c:	d90b      	bls.n	8002446 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2205      	movs	r2, #5
 800243e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0c5      	b.n	80025d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0e5      	beq.n	8002420 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0202 	bic.w	r2, r2, #2
 8002462:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002464:	f7ff fb84 	bl	8001b70 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800246a:	e012      	b.n	8002492 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800246c:	f7ff fb80 	bl	8001b70 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b0a      	cmp	r3, #10
 8002478:	d90b      	bls.n	8002492 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2205      	movs	r2, #5
 800248a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e09f      	b.n	80025d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e5      	bne.n	800246c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7e1b      	ldrb	r3, [r3, #24]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d108      	bne.n	80024ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e007      	b.n	80024ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7e5b      	ldrb	r3, [r3, #25]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d108      	bne.n	80024e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e007      	b.n	80024f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e9b      	ldrb	r3, [r3, #26]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d108      	bne.n	800250e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0220 	orr.w	r2, r2, #32
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e007      	b.n	800251e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0220 	bic.w	r2, r2, #32
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7edb      	ldrb	r3, [r3, #27]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d108      	bne.n	8002538 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0210 	bic.w	r2, r2, #16
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	e007      	b.n	8002548 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0210 	orr.w	r2, r2, #16
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7f1b      	ldrb	r3, [r3, #28]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d108      	bne.n	8002562 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0208 	orr.w	r2, r2, #8
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e007      	b.n	8002572 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0208 	bic.w	r2, r2, #8
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7f5b      	ldrb	r3, [r3, #29]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d108      	bne.n	800258c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0204 	orr.w	r2, r2, #4
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e007      	b.n	800259c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0204 	bic.w	r2, r2, #4
 800259a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	ea42 0103 	orr.w	r1, r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d12e      	bne.n	800264c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002606:	f7ff fab3 	bl	8001b70 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800260c:	e012      	b.n	8002634 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800260e:	f7ff faaf 	bl	8001b70 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b0a      	cmp	r3, #10
 800261a:	d90b      	bls.n	8002634 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2205      	movs	r2, #5
 800262c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e012      	b.n	800265a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e5      	bne.n	800260e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	e006      	b.n	800265a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002662:	b480      	push	{r7}
 8002664:	b089      	sub	sp, #36	; 0x24
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002676:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002680:	7ffb      	ldrb	r3, [r7, #31]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d003      	beq.n	800268e <HAL_CAN_AddTxMessage+0x2c>
 8002686:	7ffb      	ldrb	r3, [r7, #31]
 8002688:	2b02      	cmp	r3, #2
 800268a:	f040 80ad 	bne.w	80027e8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8095 	beq.w	80027d8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	0e1b      	lsrs	r3, r3, #24
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026b8:	2201      	movs	r2, #1
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	409a      	lsls	r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10d      	bne.n	80026e6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	6809      	ldr	r1, [r1, #0]
 80026d8:	431a      	orrs	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3318      	adds	r3, #24
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	440b      	add	r3, r1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e00f      	b.n	8002706 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026f0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80026fa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3318      	adds	r3, #24
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	440b      	add	r3, r1
 8002704:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3318      	adds	r3, #24
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	440b      	add	r3, r1
 8002716:	3304      	adds	r3, #4
 8002718:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	7d1b      	ldrb	r3, [r3, #20]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d111      	bne.n	8002746 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3318      	adds	r3, #24
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	4413      	add	r3, r2
 800272e:	3304      	adds	r3, #4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	6811      	ldr	r1, [r2, #0]
 8002736:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3318      	adds	r3, #24
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	440b      	add	r3, r1
 8002742:	3304      	adds	r3, #4
 8002744:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3307      	adds	r3, #7
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	061a      	lsls	r2, r3, #24
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3306      	adds	r3, #6
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	041b      	lsls	r3, r3, #16
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3305      	adds	r3, #5
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	4313      	orrs	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	3204      	adds	r2, #4
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	4610      	mov	r0, r2
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	6811      	ldr	r1, [r2, #0]
 800276e:	ea43 0200 	orr.w	r2, r3, r0
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	440b      	add	r3, r1
 8002778:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800277c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3303      	adds	r3, #3
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	061a      	lsls	r2, r3, #24
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3302      	adds	r3, #2
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	041b      	lsls	r3, r3, #16
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3301      	adds	r3, #1
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	4313      	orrs	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	4610      	mov	r0, r2
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	6811      	ldr	r1, [r2, #0]
 80027a4:	ea43 0200 	orr.w	r2, r3, r0
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	440b      	add	r3, r1
 80027ae:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3318      	adds	r3, #24
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	4413      	add	r3, r2
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	6811      	ldr	r1, [r2, #0]
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3318      	adds	r3, #24
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	440b      	add	r3, r1
 80027d2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e00e      	b.n	80027f6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e006      	b.n	80027f6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002816:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002818:	7afb      	ldrb	r3, [r7, #11]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d002      	beq.n	8002824 <HAL_CAN_IsTxMessagePending+0x22>
 800281e:	7afb      	ldrb	r3, [r7, #11]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d10b      	bne.n	800283c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	069b      	lsls	r3, r3, #26
 800282e:	401a      	ands	r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	069b      	lsls	r3, r3, #26
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002838:	2301      	movs	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800283c:	68fb      	ldr	r3, [r7, #12]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	05fa0000 	.word	0x05fa0000

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff4c 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ce:	f7ff ff61 	bl	8002894 <__NVIC_GetPriorityGrouping>
 80029d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	6978      	ldr	r0, [r7, #20]
 80029da:	f7ff ffb1 	bl	8002940 <NVIC_EncodePriority>
 80029de:	4602      	mov	r2, r0
 80029e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff80 	bl	80028ec <__NVIC_SetPriority>
}
 80029ec:	bf00      	nop
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ff54 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	e175      	b.n	8002d1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a30:	2201      	movs	r2, #1
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	f040 8164 	bne.w	8002d16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d005      	beq.n	8002a66 <HAL_GPIO_Init+0x56>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d130      	bne.n	8002ac8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2203      	movs	r2, #3
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 0201 	and.w	r2, r3, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d017      	beq.n	8002b04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d123      	bne.n	8002b58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	08da      	lsrs	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3208      	adds	r2, #8
 8002b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	220f      	movs	r2, #15
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	08da      	lsrs	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3208      	adds	r2, #8
 8002b52:	69b9      	ldr	r1, [r7, #24]
 8002b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0203 	and.w	r2, r3, #3
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80be 	beq.w	8002d16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9a:	4b66      	ldr	r3, [pc, #408]	; (8002d34 <HAL_GPIO_Init+0x324>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4a65      	ldr	r2, [pc, #404]	; (8002d34 <HAL_GPIO_Init+0x324>)
 8002ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba6:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <HAL_GPIO_Init+0x324>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bb2:	4a61      	ldr	r2, [pc, #388]	; (8002d38 <HAL_GPIO_Init+0x328>)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3302      	adds	r3, #2
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <HAL_GPIO_Init+0x32c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d037      	beq.n	8002c4e <HAL_GPIO_Init+0x23e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a57      	ldr	r2, [pc, #348]	; (8002d40 <HAL_GPIO_Init+0x330>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d031      	beq.n	8002c4a <HAL_GPIO_Init+0x23a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d02b      	beq.n	8002c46 <HAL_GPIO_Init+0x236>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a55      	ldr	r2, [pc, #340]	; (8002d48 <HAL_GPIO_Init+0x338>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d025      	beq.n	8002c42 <HAL_GPIO_Init+0x232>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a54      	ldr	r2, [pc, #336]	; (8002d4c <HAL_GPIO_Init+0x33c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01f      	beq.n	8002c3e <HAL_GPIO_Init+0x22e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a53      	ldr	r2, [pc, #332]	; (8002d50 <HAL_GPIO_Init+0x340>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d019      	beq.n	8002c3a <HAL_GPIO_Init+0x22a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_GPIO_Init+0x344>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0x226>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a51      	ldr	r2, [pc, #324]	; (8002d58 <HAL_GPIO_Init+0x348>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00d      	beq.n	8002c32 <HAL_GPIO_Init+0x222>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a50      	ldr	r2, [pc, #320]	; (8002d5c <HAL_GPIO_Init+0x34c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <HAL_GPIO_Init+0x21e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4f      	ldr	r2, [pc, #316]	; (8002d60 <HAL_GPIO_Init+0x350>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_GPIO_Init+0x21a>
 8002c26:	2309      	movs	r3, #9
 8002c28:	e012      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c2a:	230a      	movs	r3, #10
 8002c2c:	e010      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c2e:	2308      	movs	r3, #8
 8002c30:	e00e      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c32:	2307      	movs	r3, #7
 8002c34:	e00c      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c36:	2306      	movs	r3, #6
 8002c38:	e00a      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c3a:	2305      	movs	r3, #5
 8002c3c:	e008      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c3e:	2304      	movs	r3, #4
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c42:	2303      	movs	r3, #3
 8002c44:	e004      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	f002 0203 	and.w	r2, r2, #3
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4093      	lsls	r3, r2
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c60:	4935      	ldr	r1, [pc, #212]	; (8002d38 <HAL_GPIO_Init+0x328>)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c92:	4a34      	ldr	r2, [pc, #208]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c98:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cbc:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cc2:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b0f      	cmp	r3, #15
 8002d20:	f67f ae86 	bls.w	8002a30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3724      	adds	r7, #36	; 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40013800 	.word	0x40013800
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40021400 	.word	0x40021400
 8002d54:	40021800 	.word	0x40021800
 8002d58:	40021c00 	.word	0x40021c00
 8002d5c:	40022000 	.word	0x40022000
 8002d60:	40022400 	.word	0x40022400
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e001      	b.n	8002d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
 8002da4:	4613      	mov	r3, r2
 8002da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da8:	787b      	ldrb	r3, [r7, #1]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002db4:	e003      	b.n	8002dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	041a      	lsls	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	619a      	str	r2, [r3, #24]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e29b      	b.n	800331a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8087 	beq.w	8002efe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df0:	4b96      	ldr	r3, [pc, #600]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d00c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfc:	4b93      	ldr	r3, [pc, #588]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d112      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62>
 8002e08:	4b90      	ldr	r3, [pc, #576]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e14:	d10b      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e16:	4b8d      	ldr	r3, [pc, #564]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d06c      	beq.n	8002efc <HAL_RCC_OscConfig+0x130>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d168      	bne.n	8002efc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e275      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x7a>
 8002e38:	4b84      	ldr	r3, [pc, #528]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a83      	ldr	r2, [pc, #524]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e02e      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x9c>
 8002e4e:	4b7f      	ldr	r3, [pc, #508]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7e      	ldr	r2, [pc, #504]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b7c      	ldr	r3, [pc, #496]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a7b      	ldr	r2, [pc, #492]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e01d      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0xc0>
 8002e72:	4b76      	ldr	r3, [pc, #472]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a75      	ldr	r2, [pc, #468]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b73      	ldr	r3, [pc, #460]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a72      	ldr	r2, [pc, #456]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd8>
 8002e8c:	4b6f      	ldr	r3, [pc, #444]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6e      	ldr	r2, [pc, #440]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b6c      	ldr	r3, [pc, #432]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a6b      	ldr	r2, [pc, #428]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fe60 	bl	8001b70 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fe5c 	bl	8001b70 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e229      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe8>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fe4c 	bl	8001b70 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fe48 	bl	8001b70 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e215      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	4b57      	ldr	r3, [pc, #348]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x110>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d069      	beq.n	8002fde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0a:	4b50      	ldr	r3, [pc, #320]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f16:	4b4d      	ldr	r3, [pc, #308]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x190>
 8002f22:	4b4a      	ldr	r3, [pc, #296]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	4b47      	ldr	r3, [pc, #284]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x17a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1e9      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b41      	ldr	r3, [pc, #260]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	493d      	ldr	r1, [pc, #244]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	e040      	b.n	8002fde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d023      	beq.n	8002fac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f64:	4b39      	ldr	r3, [pc, #228]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a38      	ldr	r2, [pc, #224]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fdfe 	bl	8001b70 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f78:	f7fe fdfa 	bl	8001b70 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1c7      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	4b30      	ldr	r3, [pc, #192]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4929      	ldr	r1, [pc, #164]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
 8002faa:	e018      	b.n	8002fde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fac:	4b27      	ldr	r3, [pc, #156]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a26      	ldr	r2, [pc, #152]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fdda 	bl	8001b70 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc0:	f7fe fdd6 	bl	8001b70 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e1a3      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d038      	beq.n	800305c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d019      	beq.n	8003026 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff6:	4a15      	ldr	r2, [pc, #84]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fdb7 	bl	8001b70 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003006:	f7fe fdb3 	bl	8001b70 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e180      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_RCC_OscConfig+0x280>)
 800301a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x23a>
 8003024:	e01a      	b.n	800305c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8003028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_RCC_OscConfig+0x280>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003032:	f7fe fd9d 	bl	8001b70 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303a:	f7fe fd99 	bl	8001b70 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d903      	bls.n	8003050 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e166      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
 800304c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	4b92      	ldr	r3, [pc, #584]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ee      	bne.n	800303a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80a4 	beq.w	80031b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306a:	4b8c      	ldr	r3, [pc, #560]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10d      	bne.n	8003092 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	4b89      	ldr	r3, [pc, #548]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a88      	ldr	r2, [pc, #544]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800307c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
 8003082:	4b86      	ldr	r3, [pc, #536]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003092:	4b83      	ldr	r3, [pc, #524]	; (80032a0 <HAL_RCC_OscConfig+0x4d4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d118      	bne.n	80030d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800309e:	4b80      	ldr	r3, [pc, #512]	; (80032a0 <HAL_RCC_OscConfig+0x4d4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <HAL_RCC_OscConfig+0x4d4>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030aa:	f7fe fd61 	bl	8001b70 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b2:	f7fe fd5d 	bl	8001b70 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b64      	cmp	r3, #100	; 0x64
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e12a      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c4:	4b76      	ldr	r3, [pc, #472]	; (80032a0 <HAL_RCC_OscConfig+0x4d4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x31a>
 80030d8:	4b70      	ldr	r3, [pc, #448]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	4a6f      	ldr	r2, [pc, #444]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6713      	str	r3, [r2, #112]	; 0x70
 80030e4:	e02d      	b.n	8003142 <HAL_RCC_OscConfig+0x376>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x33c>
 80030ee:	4b6b      	ldr	r3, [pc, #428]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	4a6a      	ldr	r2, [pc, #424]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6713      	str	r3, [r2, #112]	; 0x70
 80030fa:	4b68      	ldr	r3, [pc, #416]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4a67      	ldr	r2, [pc, #412]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	6713      	str	r3, [r2, #112]	; 0x70
 8003106:	e01c      	b.n	8003142 <HAL_RCC_OscConfig+0x376>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b05      	cmp	r3, #5
 800310e:	d10c      	bne.n	800312a <HAL_RCC_OscConfig+0x35e>
 8003110:	4b62      	ldr	r3, [pc, #392]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a61      	ldr	r2, [pc, #388]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	4b5f      	ldr	r3, [pc, #380]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4a5e      	ldr	r2, [pc, #376]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6713      	str	r3, [r2, #112]	; 0x70
 8003128:	e00b      	b.n	8003142 <HAL_RCC_OscConfig+0x376>
 800312a:	4b5c      	ldr	r3, [pc, #368]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a5b      	ldr	r2, [pc, #364]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
 8003136:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d015      	beq.n	8003176 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fe fd11 	bl	8001b70 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe fd0d 	bl	8001b70 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e0d8      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003168:	4b4c      	ldr	r3, [pc, #304]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ee      	beq.n	8003152 <HAL_RCC_OscConfig+0x386>
 8003174:	e014      	b.n	80031a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fe fcfb 	bl	8001b70 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe fcf7 	bl	8001b70 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0c2      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	4b41      	ldr	r3, [pc, #260]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ee      	bne.n	800317e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d105      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a3c      	ldr	r2, [pc, #240]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80ae 	beq.w	8003318 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031bc:	4b37      	ldr	r3, [pc, #220]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d06d      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d14b      	bne.n	8003268 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	4b32      	ldr	r3, [pc, #200]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a31      	ldr	r2, [pc, #196]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fcc8 	bl	8001b70 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fcc4 	bl	8001b70 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e091      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b29      	ldr	r3, [pc, #164]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	3b01      	subs	r3, #1
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	071b      	lsls	r3, r3, #28
 800322e:	491b      	ldr	r1, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a18      	ldr	r2, [pc, #96]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800323a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800323e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fc96 	bl	8001b70 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe fc92 	bl	8001b70 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e05f      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x47c>
 8003266:	e057      	b.n	8003318 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0b      	ldr	r2, [pc, #44]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800326e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe fc7c 	bl	8001b70 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe fc78 	bl	8001b70 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e045      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x4b0>
 800329a:	e03d      	b.n	8003318 <HAL_RCC_OscConfig+0x54c>
 800329c:	40023800 	.word	0x40023800
 80032a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <HAL_RCC_OscConfig+0x558>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d030      	beq.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d129      	bne.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d122      	bne.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032d4:	4013      	ands	r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032dc:	4293      	cmp	r3, r2
 80032de:	d119      	bne.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	3b01      	subs	r3, #1
 80032ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d10f      	bne.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d107      	bne.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800

08003328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0d0      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003340:	4b6a      	ldr	r3, [pc, #424]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d910      	bls.n	8003370 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b67      	ldr	r3, [pc, #412]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 020f 	bic.w	r2, r3, #15
 8003356:	4965      	ldr	r1, [pc, #404]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b63      	ldr	r3, [pc, #396]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0b8      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003388:	4b59      	ldr	r3, [pc, #356]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a58      	ldr	r2, [pc, #352]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800338e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003392:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a0:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b50      	ldr	r3, [pc, #320]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	494d      	ldr	r1, [pc, #308]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d040      	beq.n	800344c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d115      	bne.n	800340a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e07f      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	4b41      	ldr	r3, [pc, #260]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e073      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e06b      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4936      	ldr	r1, [pc, #216]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fe fba8 	bl	8001b70 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fe fba4 	bl	8001b70 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e053      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d210      	bcs.n	800347c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 020f 	bic.w	r2, r3, #15
 8003462:	4922      	ldr	r1, [pc, #136]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e032      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4916      	ldr	r1, [pc, #88]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	490e      	ldr	r1, [pc, #56]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ba:	f000 f821 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80034be:	4602      	mov	r2, r0
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	490a      	ldr	r1, [pc, #40]	; (80034f4 <HAL_RCC_ClockConfig+0x1cc>)
 80034cc:	5ccb      	ldrb	r3, [r1, r3]
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <HAL_RCC_ClockConfig+0x1d0>)
 80034d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_RCC_ClockConfig+0x1d4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe fa48 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023c00 	.word	0x40023c00
 80034f0:	40023800 	.word	0x40023800
 80034f4:	08007140 	.word	0x08007140
 80034f8:	20000014 	.word	0x20000014
 80034fc:	20000018 	.word	0x20000018

08003500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003504:	b090      	sub	sp, #64	; 0x40
 8003506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	637b      	str	r3, [r7, #52]	; 0x34
 800350c:	2300      	movs	r3, #0
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003510:	2300      	movs	r3, #0
 8003512:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003518:	4b59      	ldr	r3, [pc, #356]	; (8003680 <HAL_RCC_GetSysClockFreq+0x180>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b08      	cmp	r3, #8
 8003522:	d00d      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x40>
 8003524:	2b08      	cmp	r3, #8
 8003526:	f200 80a1 	bhi.w	800366c <HAL_RCC_GetSysClockFreq+0x16c>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x34>
 800352e:	2b04      	cmp	r3, #4
 8003530:	d003      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x3a>
 8003532:	e09b      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCC_GetSysClockFreq+0x184>)
 8003536:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003538:	e09b      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800353a:	4b53      	ldr	r3, [pc, #332]	; (8003688 <HAL_RCC_GetSysClockFreq+0x188>)
 800353c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800353e:	e098      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003540:	4b4f      	ldr	r3, [pc, #316]	; (8003680 <HAL_RCC_GetSysClockFreq+0x180>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800354a:	4b4d      	ldr	r3, [pc, #308]	; (8003680 <HAL_RCC_GetSysClockFreq+0x180>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d028      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003556:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <HAL_RCC_GetSysClockFreq+0x180>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	099b      	lsrs	r3, r3, #6
 800355c:	2200      	movs	r2, #0
 800355e:	623b      	str	r3, [r7, #32]
 8003560:	627a      	str	r2, [r7, #36]	; 0x24
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003568:	2100      	movs	r1, #0
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCC_GetSysClockFreq+0x188>)
 800356c:	fb03 f201 	mul.w	r2, r3, r1
 8003570:	2300      	movs	r3, #0
 8003572:	fb00 f303 	mul.w	r3, r0, r3
 8003576:	4413      	add	r3, r2
 8003578:	4a43      	ldr	r2, [pc, #268]	; (8003688 <HAL_RCC_GetSysClockFreq+0x188>)
 800357a:	fba0 1202 	umull	r1, r2, r0, r2
 800357e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003580:	460a      	mov	r2, r1
 8003582:	62ba      	str	r2, [r7, #40]	; 0x28
 8003584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003586:	4413      	add	r3, r2
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358c:	2200      	movs	r2, #0
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	61fa      	str	r2, [r7, #28]
 8003592:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003596:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800359a:	f7fc fe51 	bl	8000240 <__aeabi_uldivmod>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4613      	mov	r3, r2
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a6:	e053      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a8:	4b35      	ldr	r3, [pc, #212]	; (8003680 <HAL_RCC_GetSysClockFreq+0x180>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	2200      	movs	r2, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	617a      	str	r2, [r7, #20]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035ba:	f04f 0b00 	mov.w	fp, #0
 80035be:	4652      	mov	r2, sl
 80035c0:	465b      	mov	r3, fp
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	0159      	lsls	r1, r3, #5
 80035cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d0:	0150      	lsls	r0, r2, #5
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	ebb2 080a 	subs.w	r8, r2, sl
 80035da:	eb63 090b 	sbc.w	r9, r3, fp
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035f2:	ebb2 0408 	subs.w	r4, r2, r8
 80035f6:	eb63 0509 	sbc.w	r5, r3, r9
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	00eb      	lsls	r3, r5, #3
 8003604:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003608:	00e2      	lsls	r2, r4, #3
 800360a:	4614      	mov	r4, r2
 800360c:	461d      	mov	r5, r3
 800360e:	eb14 030a 	adds.w	r3, r4, sl
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	eb45 030b 	adc.w	r3, r5, fp
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003626:	4629      	mov	r1, r5
 8003628:	028b      	lsls	r3, r1, #10
 800362a:	4621      	mov	r1, r4
 800362c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003630:	4621      	mov	r1, r4
 8003632:	028a      	lsls	r2, r1, #10
 8003634:	4610      	mov	r0, r2
 8003636:	4619      	mov	r1, r3
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	2200      	movs	r2, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	60fa      	str	r2, [r7, #12]
 8003640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003644:	f7fc fdfc 	bl	8000240 <__aeabi_uldivmod>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4613      	mov	r3, r2
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_GetSysClockFreq+0x180>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	3301      	adds	r3, #1
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800366a:	e002      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_GetSysClockFreq+0x184>)
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003674:	4618      	mov	r0, r3
 8003676:	3740      	adds	r7, #64	; 0x40
 8003678:	46bd      	mov	sp, r7
 800367a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800
 8003684:	00f42400 	.word	0x00f42400
 8003688:	017d7840 	.word	0x017d7840

0800368c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003692:	681b      	ldr	r3, [r3, #0]
}
 8003694:	4618      	mov	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000014 	.word	0x20000014

080036a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036a8:	f7ff fff0 	bl	800368c <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0a9b      	lsrs	r3, r3, #10
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4903      	ldr	r1, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	08007150 	.word	0x08007150

080036cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	220f      	movs	r2, #15
 80036da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036dc:	4b12      	ldr	r3, [pc, #72]	; (8003728 <HAL_RCC_GetClockConfig+0x5c>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0203 	and.w	r2, r3, #3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <HAL_RCC_GetClockConfig+0x5c>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <HAL_RCC_GetClockConfig+0x5c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_GetClockConfig+0x5c>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	08db      	lsrs	r3, r3, #3
 8003706:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <HAL_RCC_GetClockConfig+0x60>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 020f 	and.w	r2, r3, #15
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800
 800372c:	40023c00 	.word	0x40023c00

08003730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e049      	b.n	80037d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe f8e4 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f000 fda8 	bl	80042c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d001      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e054      	b.n	80038a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a26      	ldr	r2, [pc, #152]	; (80038b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d022      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d01d      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a22      	ldr	r2, [pc, #136]	; (80038b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d018      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d013      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <HAL_TIM_Base_Start_IT+0xdc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00e      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1b      	ldr	r2, [pc, #108]	; (80038c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d115      	bne.n	800388c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_TIM_Base_Start_IT+0xec>)
 8003868:	4013      	ands	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b06      	cmp	r3, #6
 8003870:	d015      	beq.n	800389e <HAL_TIM_Base_Start_IT+0xbe>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d011      	beq.n	800389e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388a:	e008      	b.n	800389e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e000      	b.n	80038a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40000400 	.word	0x40000400
 80038b8:	40000800 	.word	0x40000800
 80038bc:	40000c00 	.word	0x40000c00
 80038c0:	40010400 	.word	0x40010400
 80038c4:	40014000 	.word	0x40014000
 80038c8:	40001800 	.word	0x40001800
 80038cc:	00010007 	.word	0x00010007

080038d0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e049      	b.n	8003976 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f841 	bl	800397e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f000 fcd8 	bl	80042c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_TIM_OC_Start_IT+0x28>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e03c      	b.n	8003a36 <HAL_TIM_OC_Start_IT+0xa2>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d109      	bne.n	80039d6 <HAL_TIM_OC_Start_IT+0x42>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	bf14      	ite	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	2300      	moveq	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	e02f      	b.n	8003a36 <HAL_TIM_OC_Start_IT+0xa2>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d109      	bne.n	80039f0 <HAL_TIM_OC_Start_IT+0x5c>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e022      	b.n	8003a36 <HAL_TIM_OC_Start_IT+0xa2>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d109      	bne.n	8003a0a <HAL_TIM_OC_Start_IT+0x76>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	bf14      	ite	ne
 8003a02:	2301      	movne	r3, #1
 8003a04:	2300      	moveq	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e015      	b.n	8003a36 <HAL_TIM_OC_Start_IT+0xa2>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d109      	bne.n	8003a24 <HAL_TIM_OC_Start_IT+0x90>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e008      	b.n	8003a36 <HAL_TIM_OC_Start_IT+0xa2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0dd      	b.n	8003bfa <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_OC_Start_IT+0xba>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4c:	e023      	b.n	8003a96 <HAL_TIM_OC_Start_IT+0x102>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_OC_Start_IT+0xca>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a5c:	e01b      	b.n	8003a96 <HAL_TIM_OC_Start_IT+0x102>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_OC_Start_IT+0xda>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a6c:	e013      	b.n	8003a96 <HAL_TIM_OC_Start_IT+0x102>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_OC_Start_IT+0xea>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a7c:	e00b      	b.n	8003a96 <HAL_TIM_OC_Start_IT+0x102>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_OC_Start_IT+0xfa>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a8c:	e003      	b.n	8003a96 <HAL_TIM_OC_Start_IT+0x102>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	d841      	bhi.n	8003b20 <HAL_TIM_OC_Start_IT+0x18c>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <HAL_TIM_OC_Start_IT+0x110>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ad9 	.word	0x08003ad9
 8003aa8:	08003b21 	.word	0x08003b21
 8003aac:	08003b21 	.word	0x08003b21
 8003ab0:	08003b21 	.word	0x08003b21
 8003ab4:	08003aeb 	.word	0x08003aeb
 8003ab8:	08003b21 	.word	0x08003b21
 8003abc:	08003b21 	.word	0x08003b21
 8003ac0:	08003b21 	.word	0x08003b21
 8003ac4:	08003afd 	.word	0x08003afd
 8003ac8:	08003b21 	.word	0x08003b21
 8003acc:	08003b21 	.word	0x08003b21
 8003ad0:	08003b21 	.word	0x08003b21
 8003ad4:	08003b0f 	.word	0x08003b0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0202 	orr.w	r2, r2, #2
 8003ae6:	60da      	str	r2, [r3, #12]
      break;
 8003ae8:	e01d      	b.n	8003b26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0204 	orr.w	r2, r2, #4
 8003af8:	60da      	str	r2, [r3, #12]
      break;
 8003afa:	e014      	b.n	8003b26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0208 	orr.w	r2, r2, #8
 8003b0a:	60da      	str	r2, [r3, #12]
      break;
 8003b0c:	e00b      	b.n	8003b26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0210 	orr.w	r2, r2, #16
 8003b1c:	60da      	str	r2, [r3, #12]
      break;
 8003b1e:	e002      	b.n	8003b26 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      break;
 8003b24:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d165      	bne.n	8003bf8 <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	6839      	ldr	r1, [r7, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 ff5d 	bl	80049f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a31      	ldr	r2, [pc, #196]	; (8003c04 <HAL_TIM_OC_Start_IT+0x270>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_TIM_OC_Start_IT+0x1ba>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2f      	ldr	r2, [pc, #188]	; (8003c08 <HAL_TIM_OC_Start_IT+0x274>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <HAL_TIM_OC_Start_IT+0x1be>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <HAL_TIM_OC_Start_IT+0x1c0>
 8003b52:	2300      	movs	r3, #0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <HAL_TIM_OC_Start_IT+0x270>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d022      	beq.n	8003bb8 <HAL_TIM_OC_Start_IT+0x224>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7a:	d01d      	beq.n	8003bb8 <HAL_TIM_OC_Start_IT+0x224>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <HAL_TIM_OC_Start_IT+0x278>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d018      	beq.n	8003bb8 <HAL_TIM_OC_Start_IT+0x224>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <HAL_TIM_OC_Start_IT+0x27c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <HAL_TIM_OC_Start_IT+0x224>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_TIM_OC_Start_IT+0x280>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00e      	beq.n	8003bb8 <HAL_TIM_OC_Start_IT+0x224>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1a      	ldr	r2, [pc, #104]	; (8003c08 <HAL_TIM_OC_Start_IT+0x274>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d009      	beq.n	8003bb8 <HAL_TIM_OC_Start_IT+0x224>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <HAL_TIM_OC_Start_IT+0x284>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_TIM_OC_Start_IT+0x224>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1a      	ldr	r2, [pc, #104]	; (8003c1c <HAL_TIM_OC_Start_IT+0x288>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d115      	bne.n	8003be4 <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <HAL_TIM_OC_Start_IT+0x28c>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d015      	beq.n	8003bf6 <HAL_TIM_OC_Start_IT+0x262>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d011      	beq.n	8003bf6 <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be2:	e008      	b.n	8003bf6 <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e000      	b.n	8003bf8 <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40010000 	.word	0x40010000
 8003c08:	40010400 	.word	0x40010400
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40014000 	.word	0x40014000
 8003c1c:	40001800 	.word	0x40001800
 8003c20:	00010007 	.word	0x00010007

08003c24 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b0c      	cmp	r3, #12
 8003c36:	d841      	bhi.n	8003cbc <HAL_TIM_OC_Stop_IT+0x98>
 8003c38:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <HAL_TIM_OC_Stop_IT+0x1c>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c75 	.word	0x08003c75
 8003c44:	08003cbd 	.word	0x08003cbd
 8003c48:	08003cbd 	.word	0x08003cbd
 8003c4c:	08003cbd 	.word	0x08003cbd
 8003c50:	08003c87 	.word	0x08003c87
 8003c54:	08003cbd 	.word	0x08003cbd
 8003c58:	08003cbd 	.word	0x08003cbd
 8003c5c:	08003cbd 	.word	0x08003cbd
 8003c60:	08003c99 	.word	0x08003c99
 8003c64:	08003cbd 	.word	0x08003cbd
 8003c68:	08003cbd 	.word	0x08003cbd
 8003c6c:	08003cbd 	.word	0x08003cbd
 8003c70:	08003cab 	.word	0x08003cab
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0202 	bic.w	r2, r2, #2
 8003c82:	60da      	str	r2, [r3, #12]
      break;
 8003c84:	e01d      	b.n	8003cc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0204 	bic.w	r2, r2, #4
 8003c94:	60da      	str	r2, [r3, #12]
      break;
 8003c96:	e014      	b.n	8003cc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0208 	bic.w	r2, r2, #8
 8003ca6:	60da      	str	r2, [r3, #12]
      break;
 8003ca8:	e00b      	b.n	8003cc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0210 	bic.w	r2, r2, #16
 8003cb8:	60da      	str	r2, [r3, #12]
      break;
 8003cba:	e002      	b.n	8003cc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d171      	bne.n	8003dac <HAL_TIM_OC_Stop_IT+0x188>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	6839      	ldr	r1, [r7, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fe8f 	bl	80049f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a37      	ldr	r2, [pc, #220]	; (8003db8 <HAL_TIM_OC_Stop_IT+0x194>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d004      	beq.n	8003cea <HAL_TIM_OC_Stop_IT+0xc6>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a35      	ldr	r2, [pc, #212]	; (8003dbc <HAL_TIM_OC_Stop_IT+0x198>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_OC_Stop_IT+0xca>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_TIM_OC_Stop_IT+0xcc>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d017      	beq.n	8003d24 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6a1a      	ldr	r2, [r3, #32]
 8003cfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10f      	bne.n	8003d24 <HAL_TIM_OC_Stop_IT+0x100>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	f240 4344 	movw	r3, #1092	; 0x444
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_OC_Stop_IT+0x100>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a1a      	ldr	r2, [r3, #32]
 8003d2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10f      	bne.n	8003d54 <HAL_TIM_OC_Stop_IT+0x130>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a1a      	ldr	r2, [r3, #32]
 8003d3a:	f240 4344 	movw	r3, #1092	; 0x444
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_TIM_OC_Stop_IT+0x130>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <HAL_TIM_OC_Stop_IT+0x140>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d62:	e023      	b.n	8003dac <HAL_TIM_OC_Stop_IT+0x188>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d104      	bne.n	8003d74 <HAL_TIM_OC_Stop_IT+0x150>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d72:	e01b      	b.n	8003dac <HAL_TIM_OC_Stop_IT+0x188>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d104      	bne.n	8003d84 <HAL_TIM_OC_Stop_IT+0x160>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d82:	e013      	b.n	8003dac <HAL_TIM_OC_Stop_IT+0x188>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	d104      	bne.n	8003d94 <HAL_TIM_OC_Stop_IT+0x170>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d92:	e00b      	b.n	8003dac <HAL_TIM_OC_Stop_IT+0x188>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d104      	bne.n	8003da4 <HAL_TIM_OC_Stop_IT+0x180>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da2:	e003      	b.n	8003dac <HAL_TIM_OC_Stop_IT+0x188>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	40010400 	.word	0x40010400

08003dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0202 	mvn.w	r2, #2
 8003dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa40 	bl	8004288 <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fc fd9e 	bl	800094c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fa43 	bl	800429c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d122      	bne.n	8003e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0204 	mvn.w	r2, #4
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fa16 	bl	8004288 <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fc fd74 	bl	800094c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fa19 	bl	800429c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d122      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d11b      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0208 	mvn.w	r2, #8
 8003e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2204      	movs	r2, #4
 8003e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f9ec 	bl	8004288 <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e005      	b.n	8003ebe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fc fd4a 	bl	800094c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f9ef 	bl	800429c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d122      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d11b      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0210 	mvn.w	r2, #16
 8003ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2208      	movs	r2, #8
 8003eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9c2 	bl	8004288 <HAL_TIM_IC_CaptureCallback>
 8003f04:	e005      	b.n	8003f12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fc fd20 	bl	800094c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f9c5 	bl	800429c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d10e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0201 	mvn.w	r2, #1
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd fbe0 	bl	8001704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b80      	cmp	r3, #128	; 0x80
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fe7e 	bl	8004c6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7e:	d10e      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b80      	cmp	r3, #128	; 0x80
 8003f8c:	d107      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fe71 	bl	8004c80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d10e      	bne.n	8003fca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	d107      	bne.n	8003fca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f973 	bl	80042b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d107      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f06f 0220 	mvn.w	r2, #32
 8003fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fe31 	bl	8004c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_TIM_OC_ConfigChannel+0x1e>
 800401a:	2302      	movs	r3, #2
 800401c:	e066      	b.n	80040ec <HAL_TIM_OC_ConfigChannel+0xec>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b14      	cmp	r3, #20
 800402a:	d857      	bhi.n	80040dc <HAL_TIM_OC_ConfigChannel+0xdc>
 800402c:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <HAL_TIM_OC_ConfigChannel+0x34>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	08004089 	.word	0x08004089
 8004038:	080040dd 	.word	0x080040dd
 800403c:	080040dd 	.word	0x080040dd
 8004040:	080040dd 	.word	0x080040dd
 8004044:	08004097 	.word	0x08004097
 8004048:	080040dd 	.word	0x080040dd
 800404c:	080040dd 	.word	0x080040dd
 8004050:	080040dd 	.word	0x080040dd
 8004054:	080040a5 	.word	0x080040a5
 8004058:	080040dd 	.word	0x080040dd
 800405c:	080040dd 	.word	0x080040dd
 8004060:	080040dd 	.word	0x080040dd
 8004064:	080040b3 	.word	0x080040b3
 8004068:	080040dd 	.word	0x080040dd
 800406c:	080040dd 	.word	0x080040dd
 8004070:	080040dd 	.word	0x080040dd
 8004074:	080040c1 	.word	0x080040c1
 8004078:	080040dd 	.word	0x080040dd
 800407c:	080040dd 	.word	0x080040dd
 8004080:	080040dd 	.word	0x080040dd
 8004084:	080040cf 	.word	0x080040cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f9b8 	bl	8004404 <TIM_OC1_SetConfig>
      break;
 8004094:	e025      	b.n	80040e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fa23 	bl	80044e8 <TIM_OC2_SetConfig>
      break;
 80040a2:	e01e      	b.n	80040e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fa94 	bl	80045d8 <TIM_OC3_SetConfig>
      break;
 80040b0:	e017      	b.n	80040e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fb03 	bl	80046c4 <TIM_OC4_SetConfig>
      break;
 80040be:	e010      	b.n	80040e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fb54 	bl	8004774 <TIM_OC5_SetConfig>
      break;
 80040cc:	e009      	b.n	80040e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fb9f 	bl	8004818 <TIM_OC6_SetConfig>
      break;
 80040da:	e002      	b.n	80040e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	75fb      	strb	r3, [r7, #23]
      break;
 80040e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_TIM_ConfigClockSource+0x1c>
 800410c:	2302      	movs	r3, #2
 800410e:	e0b4      	b.n	800427a <HAL_TIM_ConfigClockSource+0x186>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	4b56      	ldr	r3, [pc, #344]	; (8004284 <HAL_TIM_ConfigClockSource+0x190>)
 800412c:	4013      	ands	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004148:	d03e      	beq.n	80041c8 <HAL_TIM_ConfigClockSource+0xd4>
 800414a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414e:	f200 8087 	bhi.w	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004156:	f000 8086 	beq.w	8004266 <HAL_TIM_ConfigClockSource+0x172>
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415e:	d87f      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b70      	cmp	r3, #112	; 0x70
 8004162:	d01a      	beq.n	800419a <HAL_TIM_ConfigClockSource+0xa6>
 8004164:	2b70      	cmp	r3, #112	; 0x70
 8004166:	d87b      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b60      	cmp	r3, #96	; 0x60
 800416a:	d050      	beq.n	800420e <HAL_TIM_ConfigClockSource+0x11a>
 800416c:	2b60      	cmp	r3, #96	; 0x60
 800416e:	d877      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004170:	2b50      	cmp	r3, #80	; 0x50
 8004172:	d03c      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0xfa>
 8004174:	2b50      	cmp	r3, #80	; 0x50
 8004176:	d873      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004178:	2b40      	cmp	r3, #64	; 0x40
 800417a:	d058      	beq.n	800422e <HAL_TIM_ConfigClockSource+0x13a>
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d86f      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b30      	cmp	r3, #48	; 0x30
 8004182:	d064      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 8004184:	2b30      	cmp	r3, #48	; 0x30
 8004186:	d86b      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b20      	cmp	r3, #32
 800418a:	d060      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 800418c:	2b20      	cmp	r3, #32
 800418e:	d867      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d05c      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 8004194:	2b10      	cmp	r3, #16
 8004196:	d05a      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 8004198:	e062      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041aa:	f000 fc03 	bl	80049b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	609a      	str	r2, [r3, #8]
      break;
 80041c6:	e04f      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041d8:	f000 fbec 	bl	80049b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ea:	609a      	str	r2, [r3, #8]
      break;
 80041ec:	e03c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fa:	461a      	mov	r2, r3
 80041fc:	f000 fb60 	bl	80048c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2150      	movs	r1, #80	; 0x50
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fbb9 	bl	800497e <TIM_ITRx_SetConfig>
      break;
 800420c:	e02c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800421a:	461a      	mov	r2, r3
 800421c:	f000 fb7f 	bl	800491e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2160      	movs	r1, #96	; 0x60
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fba9 	bl	800497e <TIM_ITRx_SetConfig>
      break;
 800422c:	e01c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800423a:	461a      	mov	r2, r3
 800423c:	f000 fb40 	bl	80048c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2140      	movs	r1, #64	; 0x40
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fb99 	bl	800497e <TIM_ITRx_SetConfig>
      break;
 800424c:	e00c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f000 fb90 	bl	800497e <TIM_ITRx_SetConfig>
      break;
 800425e:	e003      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      break;
 8004264:	e000      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	fffeff88 	.word	0xfffeff88

08004288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a40      	ldr	r2, [pc, #256]	; (80043d8 <TIM_Base_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d013      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e2:	d00f      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a3d      	ldr	r2, [pc, #244]	; (80043dc <TIM_Base_SetConfig+0x118>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00b      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a3c      	ldr	r2, [pc, #240]	; (80043e0 <TIM_Base_SetConfig+0x11c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a3b      	ldr	r2, [pc, #236]	; (80043e4 <TIM_Base_SetConfig+0x120>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a3a      	ldr	r2, [pc, #232]	; (80043e8 <TIM_Base_SetConfig+0x124>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2f      	ldr	r2, [pc, #188]	; (80043d8 <TIM_Base_SetConfig+0x114>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d02b      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d027      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a2c      	ldr	r2, [pc, #176]	; (80043dc <TIM_Base_SetConfig+0x118>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d023      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a2b      	ldr	r2, [pc, #172]	; (80043e0 <TIM_Base_SetConfig+0x11c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d01f      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a2a      	ldr	r2, [pc, #168]	; (80043e4 <TIM_Base_SetConfig+0x120>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d01b      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a29      	ldr	r2, [pc, #164]	; (80043e8 <TIM_Base_SetConfig+0x124>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d017      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a28      	ldr	r2, [pc, #160]	; (80043ec <TIM_Base_SetConfig+0x128>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <TIM_Base_SetConfig+0x12c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00f      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <TIM_Base_SetConfig+0x130>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00b      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <TIM_Base_SetConfig+0x134>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d007      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <TIM_Base_SetConfig+0x138>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d003      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a23      	ldr	r2, [pc, #140]	; (8004400 <TIM_Base_SetConfig+0x13c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d108      	bne.n	8004388 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <TIM_Base_SetConfig+0x114>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0xf8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <TIM_Base_SetConfig+0x124>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d103      	bne.n	80043c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	615a      	str	r2, [r3, #20]
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	40010400 	.word	0x40010400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800
 80043f8:	40001800 	.word	0x40001800
 80043fc:	40001c00 	.word	0x40001c00
 8004400:	40002000 	.word	0x40002000

08004404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <TIM_OC1_SetConfig+0xd8>)
 8004430:	4013      	ands	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 0302 	bic.w	r3, r3, #2
 800444c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <TIM_OC1_SetConfig+0xdc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_OC1_SetConfig+0x64>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a20      	ldr	r2, [pc, #128]	; (80044e4 <TIM_OC1_SetConfig+0xe0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10c      	bne.n	8004482 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0308 	bic.w	r3, r3, #8
 800446e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f023 0304 	bic.w	r3, r3, #4
 8004480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <TIM_OC1_SetConfig+0xdc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d003      	beq.n	8004492 <TIM_OC1_SetConfig+0x8e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <TIM_OC1_SetConfig+0xe0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d111      	bne.n	80044b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	fffeff8f 	.word	0xfffeff8f
 80044e0:	40010000 	.word	0x40010000
 80044e4:	40010400 	.word	0x40010400

080044e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 0210 	bic.w	r2, r3, #16
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <TIM_OC2_SetConfig+0xe4>)
 8004514:	4013      	ands	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f023 0320 	bic.w	r3, r3, #32
 8004532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <TIM_OC2_SetConfig+0xe8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_OC2_SetConfig+0x68>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <TIM_OC2_SetConfig+0xec>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d10d      	bne.n	800456c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a18      	ldr	r2, [pc, #96]	; (80045d0 <TIM_OC2_SetConfig+0xe8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_OC2_SetConfig+0x94>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a17      	ldr	r2, [pc, #92]	; (80045d4 <TIM_OC2_SetConfig+0xec>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d113      	bne.n	80045a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800458a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	feff8fff 	.word	0xfeff8fff
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40010400 	.word	0x40010400

080045d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <TIM_OC3_SetConfig+0xe0>)
 8004604:	4013      	ands	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a22      	ldr	r2, [pc, #136]	; (80046bc <TIM_OC3_SetConfig+0xe4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d003      	beq.n	800463e <TIM_OC3_SetConfig+0x66>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a21      	ldr	r2, [pc, #132]	; (80046c0 <TIM_OC3_SetConfig+0xe8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10d      	bne.n	800465a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a17      	ldr	r2, [pc, #92]	; (80046bc <TIM_OC3_SetConfig+0xe4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_OC3_SetConfig+0x92>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <TIM_OC3_SetConfig+0xe8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d113      	bne.n	8004692 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	621a      	str	r2, [r3, #32]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	fffeff8f 	.word	0xfffeff8f
 80046bc:	40010000 	.word	0x40010000
 80046c0:	40010400 	.word	0x40010400

080046c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <TIM_OC4_SetConfig+0xa4>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800470e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	031b      	lsls	r3, r3, #12
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a13      	ldr	r2, [pc, #76]	; (800476c <TIM_OC4_SetConfig+0xa8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_OC4_SetConfig+0x68>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a12      	ldr	r2, [pc, #72]	; (8004770 <TIM_OC4_SetConfig+0xac>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d109      	bne.n	8004740 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	621a      	str	r2, [r3, #32]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	feff8fff 	.word	0xfeff8fff
 800476c:	40010000 	.word	0x40010000
 8004770:	40010400 	.word	0x40010400

08004774 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4b1b      	ldr	r3, [pc, #108]	; (800480c <TIM_OC5_SetConfig+0x98>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a12      	ldr	r2, [pc, #72]	; (8004810 <TIM_OC5_SetConfig+0x9c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d003      	beq.n	80047d2 <TIM_OC5_SetConfig+0x5e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a11      	ldr	r2, [pc, #68]	; (8004814 <TIM_OC5_SetConfig+0xa0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d109      	bne.n	80047e6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	621a      	str	r2, [r3, #32]
}
 8004800:	bf00      	nop
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	fffeff8f 	.word	0xfffeff8f
 8004810:	40010000 	.word	0x40010000
 8004814:	40010400 	.word	0x40010400

08004818 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <TIM_OC6_SetConfig+0x9c>)
 8004844:	4013      	ands	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800485a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	051b      	lsls	r3, r3, #20
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <TIM_OC6_SetConfig+0xa0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_OC6_SetConfig+0x60>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a12      	ldr	r2, [pc, #72]	; (80048bc <TIM_OC6_SetConfig+0xa4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d109      	bne.n	800488c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800487e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	029b      	lsls	r3, r3, #10
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	feff8fff 	.word	0xfeff8fff
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40010400 	.word	0x40010400

080048c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0201 	bic.w	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 030a 	bic.w	r3, r3, #10
 80048fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	621a      	str	r2, [r3, #32]
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491e:	b480      	push	{r7}
 8004920:	b087      	sub	sp, #28
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f023 0210 	bic.w	r2, r3, #16
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	031b      	lsls	r3, r3, #12
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800495a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	f043 0307 	orr.w	r3, r3, #7
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	021a      	lsls	r2, r3, #8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	609a      	str	r2, [r3, #8]
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	2201      	movs	r2, #1
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a1a      	ldr	r2, [r3, #32]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	401a      	ands	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1a      	ldr	r2, [r3, #32]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e06d      	b.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a30      	ldr	r2, [pc, #192]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d108      	bne.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a20      	ldr	r2, [pc, #128]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d022      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aca:	d01d      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d018      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d013      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00e      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d009      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a15      	ldr	r2, [pc, #84]	; (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d10c      	bne.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40010400 	.word	0x40010400
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40000c00 	.word	0x40000c00
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40001800 	.word	0x40001800

08004b5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e065      	b.n	8004c44 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a16      	ldr	r2, [pc, #88]	; (8004c50 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a14      	ldr	r2, [pc, #80]	; (8004c54 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d115      	bne.n	8004c32 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	051b      	lsls	r3, r3, #20
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40010400 	.word	0x40010400

08004c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f103 0208 	add.w	r2, r3, #8
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f103 0208 	add.w	r2, r3, #8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f103 0208 	add.w	r2, r3, #8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d103      	bne.n	8004d0e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e00c      	b.n	8004d28 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3308      	adds	r3, #8
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e002      	b.n	8004d1c <vListInsert+0x2e>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d2f6      	bcs.n	8004d16 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6892      	ldr	r2, [r2, #8]
 8004d76:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6852      	ldr	r2, [r2, #4]
 8004d80:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d103      	bne.n	8004d94 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	1e5a      	subs	r2, r3, #1
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10c      	bne.n	8004de6 <xQueueGenericReset+0x32>
        __asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	b672      	cpsid	i
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	b662      	cpsie	i
 8004de0:	60fb      	str	r3, [r7, #12]
    }
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d05d      	beq.n	8004ea8 <xQueueGenericReset+0xf4>
        ( pxQueue->uxLength >= 1U ) &&
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d059      	beq.n	8004ea8 <xQueueGenericReset+0xf4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d000      	beq.n	8004e08 <xQueueGenericReset+0x54>
 8004e06:	2101      	movs	r1, #1
 8004e08:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d14c      	bne.n	8004ea8 <xQueueGenericReset+0xf4>
    {
        taskENTER_CRITICAL();
 8004e0e:	f001 fe57 	bl	8006ac0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	6939      	ldr	r1, [r7, #16]
 8004e1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e1e:	fb01 f303 	mul.w	r3, r1, r3
 8004e22:	441a      	add	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	6939      	ldr	r1, [r7, #16]
 8004e42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	441a      	add	r2, r3
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	22ff      	movs	r2, #255	; 0xff
 8004e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	22ff      	movs	r2, #255	; 0xff
 8004e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d114      	bne.n	8004e8e <xQueueGenericReset+0xda>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01a      	beq.n	8004ea2 <xQueueGenericReset+0xee>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	3310      	adds	r3, #16
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 ffd7 	bl	8005e24 <xTaskRemoveFromEventList>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d012      	beq.n	8004ea2 <xQueueGenericReset+0xee>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004e7c:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <xQueueGenericReset+0x124>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	e009      	b.n	8004ea2 <xQueueGenericReset+0xee>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	3310      	adds	r3, #16
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fefe 	bl	8004c94 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	3324      	adds	r3, #36	; 0x24
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fef9 	bl	8004c94 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004ea2:	f001 fe41 	bl	8006b28 <vPortExitCritical>
 8004ea6:	e001      	b.n	8004eac <xQueueGenericReset+0xf8>
    }
    else
    {
        xReturn = pdFAIL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <xQueueGenericReset+0x118>
        __asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	b672      	cpsid	i
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	b662      	cpsie	i
 8004ec6:	60bb      	str	r3, [r7, #8]
    }
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <xQueueGenericReset+0x116>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004ecc:	697b      	ldr	r3, [r7, #20]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d02e      	beq.n	8004f52 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	fba3 2302 	umull	r2, r3, r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d000      	beq.n	8004f04 <xQueueGenericCreate+0x28>
 8004f02:	2101      	movs	r1, #1
 8004f04:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d123      	bne.n	8004f52 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004f12:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8004f16:	d81c      	bhi.n	8004f52 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	fb02 f303 	mul.w	r3, r2, r3
 8004f20:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	3348      	adds	r3, #72	; 0x48
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 feb2 	bl	8006c90 <pvPortMalloc>
 8004f2c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01e      	beq.n	8004f72 <xQueueGenericCreate+0x96>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	3348      	adds	r3, #72	; 0x48
 8004f3c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f3e:	79fa      	ldrb	r2, [r7, #7]
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f816 	bl	8004f7c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004f50:	e00f      	b.n	8004f72 <xQueueGenericCreate+0x96>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10c      	bne.n	8004f72 <xQueueGenericCreate+0x96>
        __asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	b672      	cpsid	i
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	b662      	cpsie	i
 8004f6c:	613b      	str	r3, [r7, #16]
    }
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004f72:	69fb      	ldr	r3, [r7, #28]
    }
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e002      	b.n	8004f9e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004faa:	2101      	movs	r1, #1
 8004fac:	69b8      	ldr	r0, [r7, #24]
 8004fae:	f7ff ff01 	bl	8004db4 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08c      	sub	sp, #48	; 0x30
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10c      	bne.n	8004ff0 <xQueueReceive+0x34>
        __asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	b672      	cpsid	i
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	b662      	cpsie	i
 8004fea:	623b      	str	r3, [r7, #32]
    }
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d103      	bne.n	8004ffe <xQueueReceive+0x42>
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <xQueueReceive+0x46>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <xQueueReceive+0x48>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10c      	bne.n	8005022 <xQueueReceive+0x66>
        __asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	b672      	cpsid	i
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	b662      	cpsie	i
 800501c:	61fb      	str	r3, [r7, #28]
    }
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <xQueueReceive+0x64>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005022:	f001 f917 	bl	8006254 <xTaskGetSchedulerState>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <xQueueReceive+0x76>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <xQueueReceive+0x7a>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <xQueueReceive+0x7c>
 8005036:	2300      	movs	r3, #0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10c      	bne.n	8005056 <xQueueReceive+0x9a>
        __asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	b672      	cpsid	i
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	b662      	cpsie	i
 8005050:	61bb      	str	r3, [r7, #24]
    }
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xQueueReceive+0x98>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005056:	f001 fd33 	bl	8006ac0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01f      	beq.n	80050a6 <xQueueReceive+0xea>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800506a:	f000 f88d 	bl	8005188 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00f      	beq.n	800509e <xQueueReceive+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	3310      	adds	r3, #16
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fece 	bl	8005e24 <xTaskRemoveFromEventList>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <xQueueReceive+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800508e:	4b3d      	ldr	r3, [pc, #244]	; (8005184 <xQueueReceive+0x1c8>)
 8005090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800509e:	f001 fd43 	bl	8006b28 <vPortExitCritical>
                return pdPASS;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e069      	b.n	800517a <xQueueReceive+0x1be>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d103      	bne.n	80050b4 <xQueueReceive+0xf8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80050ac:	f001 fd3c 	bl	8006b28 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80050b0:	2300      	movs	r3, #0
 80050b2:	e062      	b.n	800517a <xQueueReceive+0x1be>
                }
                else if( xEntryTimeSet == pdFALSE )
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <xQueueReceive+0x10c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80050ba:	f107 0310 	add.w	r3, r7, #16
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 ff88 	bl	8005fd4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80050c8:	f001 fd2e 	bl	8006b28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80050cc:	f000 fbaa 	bl	8005824 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80050d0:	f001 fcf6 	bl	8006ac0 <vPortEnterCritical>
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050da:	b25b      	sxtb	r3, r3
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e0:	d103      	bne.n	80050ea <xQueueReceive+0x12e>
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050f0:	b25b      	sxtb	r3, r3
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f6:	d103      	bne.n	8005100 <xQueueReceive+0x144>
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005100:	f001 fd12 	bl	8006b28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005104:	1d3a      	adds	r2, r7, #4
 8005106:	f107 0310 	add.w	r3, r7, #16
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f000 ff77 	bl	8006000 <xTaskCheckForTimeOut>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d123      	bne.n	8005160 <xQueueReceive+0x1a4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800511a:	f000 f8ad 	bl	8005278 <prvIsQueueEmpty>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d017      	beq.n	8005154 <xQueueReceive+0x198>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	3324      	adds	r3, #36	; 0x24
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	4611      	mov	r1, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fe0b 	bl	8005d48 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005134:	f000 f84e 	bl	80051d4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005138:	f000 fb82 	bl	8005840 <xTaskResumeAll>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d189      	bne.n	8005056 <xQueueReceive+0x9a>
                {
                    portYIELD_WITHIN_API();
 8005142:	4b10      	ldr	r3, [pc, #64]	; (8005184 <xQueueReceive+0x1c8>)
 8005144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	e780      	b.n	8005056 <xQueueReceive+0x9a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005156:	f000 f83d 	bl	80051d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800515a:	f000 fb71 	bl	8005840 <xTaskResumeAll>
 800515e:	e77a      	b.n	8005056 <xQueueReceive+0x9a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005162:	f000 f837 	bl	80051d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005166:	f000 fb6b 	bl	8005840 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800516a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800516c:	f000 f884 	bl	8005278 <prvIsQueueEmpty>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	f43f af6f 	beq.w	8005056 <xQueueReceive+0x9a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005178:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800517a:	4618      	mov	r0, r3
 800517c:	3730      	adds	r7, #48	; 0x30
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d018      	beq.n	80051cc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	441a      	add	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d303      	bcc.n	80051bc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68d9      	ldr	r1, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	461a      	mov	r2, r3
 80051c6:	6838      	ldr	r0, [r7, #0]
 80051c8:	f001 ff62 	bl	8007090 <memcpy>
    }
}
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80051dc:	f001 fc70 	bl	8006ac0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051e6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80051e8:	e011      	b.n	800520e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d012      	beq.n	8005218 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3324      	adds	r3, #36	; 0x24
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fe14 	bl	8005e24 <xTaskRemoveFromEventList>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8005202:	f000 ff67 	bl	80060d4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	3b01      	subs	r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800520e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005212:	2b00      	cmp	r3, #0
 8005214:	dce9      	bgt.n	80051ea <prvUnlockQueue+0x16>
 8005216:	e000      	b.n	800521a <prvUnlockQueue+0x46>
                    break;
 8005218:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	22ff      	movs	r2, #255	; 0xff
 800521e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005222:	f001 fc81 	bl	8006b28 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005226:	f001 fc4b 	bl	8006ac0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005230:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005232:	e011      	b.n	8005258 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d012      	beq.n	8005262 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3310      	adds	r3, #16
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fdef 	bl	8005e24 <xTaskRemoveFromEventList>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800524c:	f000 ff42 	bl	80060d4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005250:	7bbb      	ldrb	r3, [r7, #14]
 8005252:	3b01      	subs	r3, #1
 8005254:	b2db      	uxtb	r3, r3
 8005256:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800525c:	2b00      	cmp	r3, #0
 800525e:	dce9      	bgt.n	8005234 <prvUnlockQueue+0x60>
 8005260:	e000      	b.n	8005264 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005262:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	22ff      	movs	r2, #255	; 0xff
 8005268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800526c:	f001 fc5c 	bl	8006b28 <vPortExitCritical>
}
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005280:	f001 fc1e 	bl	8006ac0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800528c:	2301      	movs	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e001      	b.n	8005296 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005296:	f001 fc47 	bl	8006b28 <vPortExitCritical>

    return xReturn;
 800529a:	68fb      	ldr	r3, [r7, #12]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10c      	bne.n	80052d2 <vQueueAddToRegistry+0x2e>
        __asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	b672      	cpsid	i
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	b662      	cpsie	i
 80052cc:	60fb      	str	r3, [r7, #12]
    }
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d024      	beq.n	8005322 <vQueueAddToRegistry+0x7e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e01e      	b.n	800531c <vQueueAddToRegistry+0x78>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80052de:	4a18      	ldr	r2, [pc, #96]	; (8005340 <vQueueAddToRegistry+0x9c>)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d105      	bne.n	80052fa <vQueueAddToRegistry+0x56>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	4a13      	ldr	r2, [pc, #76]	; (8005340 <vQueueAddToRegistry+0x9c>)
 80052f4:	4413      	add	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
                    break;
 80052f8:	e013      	b.n	8005322 <vQueueAddToRegistry+0x7e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <vQueueAddToRegistry+0x72>
 8005300:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <vQueueAddToRegistry+0x9c>)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <vQueueAddToRegistry+0x72>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4a0b      	ldr	r2, [pc, #44]	; (8005340 <vQueueAddToRegistry+0x9c>)
 8005312:	4413      	add	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	3301      	adds	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2b07      	cmp	r3, #7
 8005320:	d9dd      	bls.n	80052de <vQueueAddToRegistry+0x3a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <vQueueAddToRegistry+0x90>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	200001f0 	.word	0x200001f0

08005344 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005354:	f001 fbb4 	bl	8006ac0 <vPortEnterCritical>
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800535e:	b25b      	sxtb	r3, r3
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005364:	d103      	bne.n	800536e <vQueueWaitForMessageRestricted+0x2a>
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005374:	b25b      	sxtb	r3, r3
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d103      	bne.n	8005384 <vQueueWaitForMessageRestricted+0x40>
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005384:	f001 fbd0 	bl	8006b28 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	3324      	adds	r3, #36	; 0x24
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fcfb 	bl	8005d94 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800539e:	6978      	ldr	r0, [r7, #20]
 80053a0:	f7ff ff18 	bl	80051d4 <prvUnlockQueue>
    }
 80053a4:	bf00      	nop
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08c      	sub	sp, #48	; 0x30
 80053b0:	af04      	add	r7, sp, #16
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	4613      	mov	r3, r2
 80053ba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f001 fc65 	bl	8006c90 <pvPortMalloc>
 80053c6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d013      	beq.n	80053f6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053ce:	2054      	movs	r0, #84	; 0x54
 80053d0:	f001 fc5e 	bl	8006c90 <pvPortMalloc>
 80053d4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80053dc:	2254      	movs	r2, #84	; 0x54
 80053de:	2100      	movs	r1, #0
 80053e0:	69f8      	ldr	r0, [r7, #28]
 80053e2:	f001 fe29 	bl	8007038 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
 80053ec:	e005      	b.n	80053fa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80053ee:	6978      	ldr	r0, [r7, #20]
 80053f0:	f001 fd0c 	bl	8006e0c <vPortFree>
 80053f4:	e001      	b.n	80053fa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	2300      	movs	r3, #0
 8005404:	9303      	str	r3, [sp, #12]
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	9302      	str	r3, [sp, #8]
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f80e 	bl	8005438 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800541c:	69f8      	ldr	r0, [r7, #28]
 800541e:	f000 f895 	bl	800554c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005422:	2301      	movs	r3, #1
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	e002      	b.n	800542e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005428:	f04f 33ff 	mov.w	r3, #4294967295
 800542c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800542e:	69bb      	ldr	r3, [r7, #24]
    }
 8005430:	4618      	mov	r0, r3
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005450:	440b      	add	r3, r1
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	f023 0307 	bic.w	r3, r3, #7
 800545e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <prvInitialiseNewTask+0x4c>
        __asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	b672      	cpsid	i
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	b662      	cpsie	i
 800547e:	617b      	str	r3, [r7, #20]
    }
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <prvInitialiseNewTask+0x4a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01e      	beq.n	80054c8 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	e012      	b.n	80054b6 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	7819      	ldrb	r1, [r3, #0]
 8005498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	3334      	adds	r3, #52	; 0x34
 80054a0:	460a      	mov	r2, r1
 80054a2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	4413      	add	r3, r2
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d006      	beq.n	80054be <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	3301      	adds	r3, #1
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d9e9      	bls.n	8005490 <prvInitialiseNewTask+0x58>
 80054bc:	e000      	b.n	80054c0 <prvInitialiseNewTask+0x88>
            {
                break;
 80054be:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d90c      	bls.n	80054e8 <prvInitialiseNewTask+0xb0>
        __asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	b672      	cpsid	i
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	b662      	cpsie	i
 80054e2:	613b      	str	r3, [r7, #16]
    }
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <prvInitialiseNewTask+0xae>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d901      	bls.n	80054f2 <prvInitialiseNewTask+0xba>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054ee:	2304      	movs	r3, #4
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054fc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	3304      	adds	r3, #4
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff fbe6 	bl	8004cd4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	3318      	adds	r3, #24
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fbe1 	bl	8004cd4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005516:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	f1c3 0205 	rsb	r2, r3, #5
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005526:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	68f9      	ldr	r1, [r7, #12]
 800552c:	69b8      	ldr	r0, [r7, #24]
 800552e:	f001 f9b7 	bl	80068a0 <pxPortInitialiseStack>
 8005532:	4602      	mov	r2, r0
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <prvInitialiseNewTask+0x10c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005542:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005544:	bf00      	nop
 8005546:	3720      	adds	r7, #32
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005554:	f001 fab4 	bl	8006ac0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005558:	4b3e      	ldr	r3, [pc, #248]	; (8005654 <prvAddNewTaskToReadyList+0x108>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3301      	adds	r3, #1
 800555e:	4a3d      	ldr	r2, [pc, #244]	; (8005654 <prvAddNewTaskToReadyList+0x108>)
 8005560:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005562:	4b3d      	ldr	r3, [pc, #244]	; (8005658 <prvAddNewTaskToReadyList+0x10c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800556a:	4a3b      	ldr	r2, [pc, #236]	; (8005658 <prvAddNewTaskToReadyList+0x10c>)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005570:	4b38      	ldr	r3, [pc, #224]	; (8005654 <prvAddNewTaskToReadyList+0x108>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d110      	bne.n	800559a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005578:	f000 fdd2 	bl	8006120 <prvInitialiseTaskLists>
 800557c:	e00d      	b.n	800559a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800557e:	4b37      	ldr	r3, [pc, #220]	; (800565c <prvAddNewTaskToReadyList+0x110>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005586:	4b34      	ldr	r3, [pc, #208]	; (8005658 <prvAddNewTaskToReadyList+0x10c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	429a      	cmp	r2, r3
 8005592:	d802      	bhi.n	800559a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005594:	4a30      	ldr	r2, [pc, #192]	; (8005658 <prvAddNewTaskToReadyList+0x10c>)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800559a:	4b31      	ldr	r3, [pc, #196]	; (8005660 <prvAddNewTaskToReadyList+0x114>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3301      	adds	r3, #1
 80055a0:	4a2f      	ldr	r2, [pc, #188]	; (8005660 <prvAddNewTaskToReadyList+0x114>)
 80055a2:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	2201      	movs	r2, #1
 80055aa:	409a      	lsls	r2, r3
 80055ac:	4b2d      	ldr	r3, [pc, #180]	; (8005664 <prvAddNewTaskToReadyList+0x118>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	4a2c      	ldr	r2, [pc, #176]	; (8005664 <prvAddNewTaskToReadyList+0x118>)
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ba:	492b      	ldr	r1, [pc, #172]	; (8005668 <prvAddNewTaskToReadyList+0x11c>)
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	3304      	adds	r3, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	609a      	str	r2, [r3, #8]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	3204      	adds	r2, #4
 80055e2:	605a      	str	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	1d1a      	adds	r2, r3, #4
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <prvAddNewTaskToReadyList+0x11c>)
 80055fa:	441a      	add	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	615a      	str	r2, [r3, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	4918      	ldr	r1, [pc, #96]	; (8005668 <prvAddNewTaskToReadyList+0x11c>)
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	1c59      	adds	r1, r3, #1
 8005614:	4814      	ldr	r0, [pc, #80]	; (8005668 <prvAddNewTaskToReadyList+0x11c>)
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4403      	add	r3, r0
 8005620:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005622:	f001 fa81 	bl	8006b28 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005626:	4b0d      	ldr	r3, [pc, #52]	; (800565c <prvAddNewTaskToReadyList+0x110>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00e      	beq.n	800564c <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800562e:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <prvAddNewTaskToReadyList+0x10c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	429a      	cmp	r2, r3
 800563a:	d207      	bcs.n	800564c <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <prvAddNewTaskToReadyList+0x120>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20000308 	.word	0x20000308
 8005658:	20000230 	.word	0x20000230
 800565c:	20000314 	.word	0x20000314
 8005660:	20000324 	.word	0x20000324
 8005664:	20000310 	.word	0x20000310
 8005668:	20000234 	.word	0x20000234
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	; 0x28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800567a:	2300      	movs	r3, #0
 800567c:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10c      	bne.n	800569e <xTaskDelayUntil+0x2e>
        __asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	b672      	cpsid	i
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	b662      	cpsie	i
 8005698:	617b      	str	r3, [r7, #20]
    }
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10c      	bne.n	80056be <xTaskDelayUntil+0x4e>
        __asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	b672      	cpsid	i
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	b662      	cpsie	i
 80056b8:	613b      	str	r3, [r7, #16]
    }
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xTaskDelayUntil+0x4c>
        configASSERT( uxSchedulerSuspended == 0 );
 80056be:	4b2b      	ldr	r3, [pc, #172]	; (800576c <xTaskDelayUntil+0xfc>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00c      	beq.n	80056e0 <xTaskDelayUntil+0x70>
        __asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	b672      	cpsid	i
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	b662      	cpsie	i
 80056da:	60fb      	str	r3, [r7, #12]
    }
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <xTaskDelayUntil+0x6e>

        vTaskSuspendAll();
 80056e0:	f000 f8a0 	bl	8005824 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80056e4:	4b22      	ldr	r3, [pc, #136]	; (8005770 <xTaskDelayUntil+0x100>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	4413      	add	r3, r2
 80056f2:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d20b      	bcs.n	8005716 <xTaskDelayUntil+0xa6>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	429a      	cmp	r2, r3
 8005706:	d211      	bcs.n	800572c <xTaskDelayUntil+0xbc>
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	429a      	cmp	r2, r3
 800570e:	d90d      	bls.n	800572c <xTaskDelayUntil+0xbc>
                {
                    xShouldDelay = pdTRUE;
 8005710:	2301      	movs	r3, #1
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
 8005714:	e00a      	b.n	800572c <xTaskDelayUntil+0xbc>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	429a      	cmp	r2, r3
 800571e:	d303      	bcc.n	8005728 <xTaskDelayUntil+0xb8>
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	429a      	cmp	r2, r3
 8005726:	d901      	bls.n	800572c <xTaskDelayUntil+0xbc>
                {
                    xShouldDelay = pdTRUE;
 8005728:	2301      	movs	r3, #1
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d006      	beq.n	8005746 <xTaskDelayUntil+0xd6>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fda5 	bl	8006290 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005746:	f000 f87b 	bl	8005840 <xTaskResumeAll>
 800574a:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d107      	bne.n	8005762 <xTaskDelayUntil+0xf2>
        {
            portYIELD_WITHIN_API();
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <xTaskDelayUntil+0x104>)
 8005754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005764:	4618      	mov	r0, r3
 8005766:	3728      	adds	r7, #40	; 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000330 	.word	0x20000330
 8005770:	2000030c 	.word	0x2000030c
 8005774:	e000ed04 	.word	0xe000ed04

08005778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800577e:	4b22      	ldr	r3, [pc, #136]	; (8005808 <vTaskStartScheduler+0x90>)
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	2300      	movs	r3, #0
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	2300      	movs	r3, #0
 8005788:	2280      	movs	r2, #128	; 0x80
 800578a:	4920      	ldr	r1, [pc, #128]	; (800580c <vTaskStartScheduler+0x94>)
 800578c:	4820      	ldr	r0, [pc, #128]	; (8005810 <vTaskStartScheduler+0x98>)
 800578e:	f7ff fe0d 	bl	80053ac <xTaskCreate>
 8005792:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d102      	bne.n	80057a0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800579a:	f000 fdf9 	bl	8006390 <xTimerCreateTimerTask>
 800579e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d118      	bne.n	80057d8 <vTaskStartScheduler+0x60>
        __asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	b672      	cpsid	i
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	b662      	cpsie	i
 80057ba:	60bb      	str	r3, [r7, #8]
    }
 80057bc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80057be:	4b15      	ldr	r3, [pc, #84]	; (8005814 <vTaskStartScheduler+0x9c>)
 80057c0:	f04f 32ff 	mov.w	r2, #4294967295
 80057c4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80057c6:	4b14      	ldr	r3, [pc, #80]	; (8005818 <vTaskStartScheduler+0xa0>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057cc:	4b13      	ldr	r3, [pc, #76]	; (800581c <vTaskStartScheduler+0xa4>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80057d2:	f001 f8f7 	bl	80069c4 <xPortStartScheduler>
 80057d6:	e010      	b.n	80057fa <vTaskStartScheduler+0x82>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	d10c      	bne.n	80057fa <vTaskStartScheduler+0x82>
        __asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	b672      	cpsid	i
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	b662      	cpsie	i
 80057f4:	607b      	str	r3, [r7, #4]
    }
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <vTaskStartScheduler+0x80>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80057fa:	4b09      	ldr	r3, [pc, #36]	; (8005820 <vTaskStartScheduler+0xa8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	2000032c 	.word	0x2000032c
 800580c:	08007128 	.word	0x08007128
 8005810:	080060ed 	.word	0x080060ed
 8005814:	20000328 	.word	0x20000328
 8005818:	20000314 	.word	0x20000314
 800581c:	2000030c 	.word	0x2000030c
 8005820:	20000020 	.word	0x20000020

08005824 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <vTaskSuspendAll+0x18>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	4a03      	ldr	r2, [pc, #12]	; (800583c <vTaskSuspendAll+0x18>)
 8005830:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005832:	bf00      	nop
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	20000330 	.word	0x20000330

08005840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800584a:	2300      	movs	r3, #0
 800584c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800584e:	4b72      	ldr	r3, [pc, #456]	; (8005a18 <xTaskResumeAll+0x1d8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10c      	bne.n	8005870 <xTaskResumeAll+0x30>
        __asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	b672      	cpsid	i
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	b662      	cpsie	i
 800586a:	607b      	str	r3, [r7, #4]
    }
 800586c:	bf00      	nop
 800586e:	e7fe      	b.n	800586e <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005870:	f001 f926 	bl	8006ac0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005874:	4b68      	ldr	r3, [pc, #416]	; (8005a18 <xTaskResumeAll+0x1d8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3b01      	subs	r3, #1
 800587a:	4a67      	ldr	r2, [pc, #412]	; (8005a18 <xTaskResumeAll+0x1d8>)
 800587c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800587e:	4b66      	ldr	r3, [pc, #408]	; (8005a18 <xTaskResumeAll+0x1d8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f040 80c0 	bne.w	8005a08 <xTaskResumeAll+0x1c8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005888:	4b64      	ldr	r3, [pc, #400]	; (8005a1c <xTaskResumeAll+0x1dc>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80bb 	beq.w	8005a08 <xTaskResumeAll+0x1c8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005892:	e08a      	b.n	80059aa <xTaskResumeAll+0x16a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005894:	4b62      	ldr	r3, [pc, #392]	; (8005a20 <xTaskResumeAll+0x1e0>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	6a12      	ldr	r2, [r2, #32]
 80058aa:	609a      	str	r2, [r3, #8]
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	69d2      	ldr	r2, [r2, #28]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	3318      	adds	r3, #24
 80058be:	429a      	cmp	r2, r3
 80058c0:	d103      	bne.n	80058ca <xTaskResumeAll+0x8a>
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	605a      	str	r2, [r3, #4]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2200      	movs	r2, #0
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	1e5a      	subs	r2, r3, #1
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	68d2      	ldr	r2, [r2, #12]
 80058e8:	609a      	str	r2, [r3, #8]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	6892      	ldr	r2, [r2, #8]
 80058f2:	605a      	str	r2, [r3, #4]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	3304      	adds	r3, #4
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d103      	bne.n	8005908 <xTaskResumeAll+0xc8>
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	605a      	str	r2, [r3, #4]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2200      	movs	r2, #0
 800590c:	615a      	str	r2, [r3, #20]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	1e5a      	subs	r2, r3, #1
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	2201      	movs	r2, #1
 800591e:	409a      	lsls	r2, r3
 8005920:	4b40      	ldr	r3, [pc, #256]	; (8005a24 <xTaskResumeAll+0x1e4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4313      	orrs	r3, r2
 8005926:	4a3f      	ldr	r2, [pc, #252]	; (8005a24 <xTaskResumeAll+0x1e4>)
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592e:	493e      	ldr	r1, [pc, #248]	; (8005a28 <xTaskResumeAll+0x1e8>)
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	3304      	adds	r3, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	609a      	str	r2, [r3, #8]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	60da      	str	r2, [r3, #12]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	3204      	adds	r2, #4
 8005956:	605a      	str	r2, [r3, #4]
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	1d1a      	adds	r2, r3, #4
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	609a      	str	r2, [r3, #8]
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a2e      	ldr	r2, [pc, #184]	; (8005a28 <xTaskResumeAll+0x1e8>)
 800596e:	441a      	add	r2, r3
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	615a      	str	r2, [r3, #20]
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005978:	492b      	ldr	r1, [pc, #172]	; (8005a28 <xTaskResumeAll+0x1e8>)
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	1c59      	adds	r1, r3, #1
 8005988:	4827      	ldr	r0, [pc, #156]	; (8005a28 <xTaskResumeAll+0x1e8>)
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4403      	add	r3, r0
 8005994:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599a:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <xTaskResumeAll+0x1ec>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d302      	bcc.n	80059aa <xTaskResumeAll+0x16a>
                    {
                        xYieldPending = pdTRUE;
 80059a4:	4b22      	ldr	r3, [pc, #136]	; (8005a30 <xTaskResumeAll+0x1f0>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059aa:	4b1d      	ldr	r3, [pc, #116]	; (8005a20 <xTaskResumeAll+0x1e0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f47f af70 	bne.w	8005894 <xTaskResumeAll+0x54>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <xTaskResumeAll+0x17e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80059ba:	f000 fc2f 	bl	800621c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059be:	4b1d      	ldr	r3, [pc, #116]	; (8005a34 <xTaskResumeAll+0x1f4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <xTaskResumeAll+0x1ac>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80059ca:	f000 f847 	bl	8005a5c <xTaskIncrementTick>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <xTaskResumeAll+0x19a>
                            {
                                xYieldPending = pdTRUE;
 80059d4:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <xTaskResumeAll+0x1f0>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	3b01      	subs	r3, #1
 80059de:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f1      	bne.n	80059ca <xTaskResumeAll+0x18a>

                        xPendedTicks = 0;
 80059e6:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <xTaskResumeAll+0x1f4>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80059ec:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <xTaskResumeAll+0x1f0>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <xTaskResumeAll+0x1c8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80059f8:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <xTaskResumeAll+0x1f8>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005a08:	f001 f88e 	bl	8006b28 <vPortExitCritical>

    return xAlreadyYielded;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3720      	adds	r7, #32
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000330 	.word	0x20000330
 8005a1c:	20000308 	.word	0x20000308
 8005a20:	200002c8 	.word	0x200002c8
 8005a24:	20000310 	.word	0x20000310
 8005a28:	20000234 	.word	0x20000234
 8005a2c:	20000230 	.word	0x20000230
 8005a30:	2000031c 	.word	0x2000031c
 8005a34:	20000318 	.word	0x20000318
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <xTaskGetTickCount+0x1c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005a48:	687b      	ldr	r3, [r7, #4]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	2000030c 	.word	0x2000030c

08005a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	; 0x28
 8005a60:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a66:	4b7e      	ldr	r3, [pc, #504]	; (8005c60 <xTaskIncrementTick+0x204>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 80ee 	bne.w	8005c4c <xTaskIncrementTick+0x1f0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a70:	4b7c      	ldr	r3, [pc, #496]	; (8005c64 <xTaskIncrementTick+0x208>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005a78:	4a7a      	ldr	r2, [pc, #488]	; (8005c64 <xTaskIncrementTick+0x208>)
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d122      	bne.n	8005aca <xTaskIncrementTick+0x6e>
        {
            taskSWITCH_DELAYED_LISTS();
 8005a84:	4b78      	ldr	r3, [pc, #480]	; (8005c68 <xTaskIncrementTick+0x20c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00c      	beq.n	8005aa8 <xTaskIncrementTick+0x4c>
        __asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	b672      	cpsid	i
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	b662      	cpsie	i
 8005aa2:	607b      	str	r3, [r7, #4]
    }
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <xTaskIncrementTick+0x4a>
 8005aa8:	4b6f      	ldr	r3, [pc, #444]	; (8005c68 <xTaskIncrementTick+0x20c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	4b6f      	ldr	r3, [pc, #444]	; (8005c6c <xTaskIncrementTick+0x210>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a6d      	ldr	r2, [pc, #436]	; (8005c68 <xTaskIncrementTick+0x20c>)
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4a6d      	ldr	r2, [pc, #436]	; (8005c6c <xTaskIncrementTick+0x210>)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	4b6c      	ldr	r3, [pc, #432]	; (8005c70 <xTaskIncrementTick+0x214>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	4a6b      	ldr	r2, [pc, #428]	; (8005c70 <xTaskIncrementTick+0x214>)
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	f000 fba9 	bl	800621c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005aca:	4b6a      	ldr	r3, [pc, #424]	; (8005c74 <xTaskIncrementTick+0x218>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6a3a      	ldr	r2, [r7, #32]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	f0c0 80a6 	bcc.w	8005c22 <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad6:	4b64      	ldr	r3, [pc, #400]	; (8005c68 <xTaskIncrementTick+0x20c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <xTaskIncrementTick+0x8e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae0:	4b64      	ldr	r3, [pc, #400]	; (8005c74 <xTaskIncrementTick+0x218>)
 8005ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae6:	601a      	str	r2, [r3, #0]
                    break;
 8005ae8:	e09b      	b.n	8005c22 <xTaskIncrementTick+0x1c6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aea:	4b5f      	ldr	r3, [pc, #380]	; (8005c68 <xTaskIncrementTick+0x20c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005afa:	6a3a      	ldr	r2, [r7, #32]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d203      	bcs.n	8005b0a <xTaskIncrementTick+0xae>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005b02:	4a5c      	ldr	r2, [pc, #368]	; (8005c74 <xTaskIncrementTick+0x218>)
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005b08:	e08b      	b.n	8005c22 <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	68d2      	ldr	r2, [r2, #12]
 8005b18:	609a      	str	r2, [r3, #8]
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	6892      	ldr	r2, [r2, #8]
 8005b22:	605a      	str	r2, [r3, #4]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d103      	bne.n	8005b38 <xTaskIncrementTick+0xdc>
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	605a      	str	r2, [r3, #4]
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	615a      	str	r2, [r3, #20]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	1e5a      	subs	r2, r3, #1
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01e      	beq.n	8005b8e <xTaskIncrementTick+0x132>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	6a12      	ldr	r2, [r2, #32]
 8005b5e:	609a      	str	r2, [r3, #8]
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	69d2      	ldr	r2, [r2, #28]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	3318      	adds	r3, #24
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d103      	bne.n	8005b7e <xTaskIncrementTick+0x122>
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2200      	movs	r2, #0
 8005b82:	629a      	str	r2, [r3, #40]	; 0x28
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	1e5a      	subs	r2, r3, #1
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b92:	2201      	movs	r2, #1
 8005b94:	409a      	lsls	r2, r3
 8005b96:	4b38      	ldr	r3, [pc, #224]	; (8005c78 <xTaskIncrementTick+0x21c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	4a36      	ldr	r2, [pc, #216]	; (8005c78 <xTaskIncrementTick+0x21c>)
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba4:	4935      	ldr	r1, [pc, #212]	; (8005c7c <xTaskIncrementTick+0x220>)
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	440b      	add	r3, r1
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	609a      	str	r2, [r3, #8]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	60da      	str	r2, [r3, #12]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	3204      	adds	r2, #4
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	1d1a      	adds	r2, r3, #4
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	609a      	str	r2, [r3, #8]
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4a26      	ldr	r2, [pc, #152]	; (8005c7c <xTaskIncrementTick+0x220>)
 8005be4:	441a      	add	r2, r3
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	615a      	str	r2, [r3, #20]
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bee:	4923      	ldr	r1, [pc, #140]	; (8005c7c <xTaskIncrementTick+0x220>)
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	1c59      	adds	r1, r3, #1
 8005bfe:	481f      	ldr	r0, [pc, #124]	; (8005c7c <xTaskIncrementTick+0x220>)
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4403      	add	r3, r0
 8005c0a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c10:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <xTaskIncrementTick+0x224>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	429a      	cmp	r2, r3
 8005c18:	f67f af5d 	bls.w	8005ad6 <xTaskIncrementTick+0x7a>
                        {
                            xSwitchRequired = pdTRUE;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c20:	e759      	b.n	8005ad6 <xTaskIncrementTick+0x7a>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c22:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <xTaskIncrementTick+0x224>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	4914      	ldr	r1, [pc, #80]	; (8005c7c <xTaskIncrementTick+0x220>)
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d901      	bls.n	8005c3e <xTaskIncrementTick+0x1e2>
            {
                xSwitchRequired = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005c3e:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <xTaskIncrementTick+0x228>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <xTaskIncrementTick+0x1fa>
            {
                xSwitchRequired = pdTRUE;
 8005c46:	2301      	movs	r3, #1
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4a:	e004      	b.n	8005c56 <xTaskIncrementTick+0x1fa>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005c4c:	4b0e      	ldr	r3, [pc, #56]	; (8005c88 <xTaskIncrementTick+0x22c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3301      	adds	r3, #1
 8005c52:	4a0d      	ldr	r2, [pc, #52]	; (8005c88 <xTaskIncrementTick+0x22c>)
 8005c54:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3728      	adds	r7, #40	; 0x28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000330 	.word	0x20000330
 8005c64:	2000030c 	.word	0x2000030c
 8005c68:	200002c0 	.word	0x200002c0
 8005c6c:	200002c4 	.word	0x200002c4
 8005c70:	20000320 	.word	0x20000320
 8005c74:	20000328 	.word	0x20000328
 8005c78:	20000310 	.word	0x20000310
 8005c7c:	20000234 	.word	0x20000234
 8005c80:	20000230 	.word	0x20000230
 8005c84:	2000031c 	.word	0x2000031c
 8005c88:	20000318 	.word	0x20000318

08005c8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c92:	4b28      	ldr	r3, [pc, #160]	; (8005d34 <vTaskSwitchContext+0xa8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005c9a:	4b27      	ldr	r3, [pc, #156]	; (8005d38 <vTaskSwitchContext+0xac>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005ca0:	e041      	b.n	8005d26 <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 8005ca2:	4b25      	ldr	r3, [pc, #148]	; (8005d38 <vTaskSwitchContext+0xac>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca8:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <vTaskSwitchContext+0xb0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	fab3 f383 	clz	r3, r3
 8005cb4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005cb6:	7afb      	ldrb	r3, [r7, #11]
 8005cb8:	f1c3 031f 	rsb	r3, r3, #31
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	4920      	ldr	r1, [pc, #128]	; (8005d40 <vTaskSwitchContext+0xb4>)
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10c      	bne.n	8005cec <vTaskSwitchContext+0x60>
        __asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	b672      	cpsid	i
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	b662      	cpsie	i
 8005ce6:	607b      	str	r3, [r7, #4]
    }
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <vTaskSwitchContext+0x5e>
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4a12      	ldr	r2, [pc, #72]	; (8005d40 <vTaskSwitchContext+0xb4>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d104      	bne.n	8005d1c <vTaskSwitchContext+0x90>
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	605a      	str	r2, [r3, #4]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	4a08      	ldr	r2, [pc, #32]	; (8005d44 <vTaskSwitchContext+0xb8>)
 8005d24:	6013      	str	r3, [r2, #0]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20000330 	.word	0x20000330
 8005d38:	2000031c 	.word	0x2000031c
 8005d3c:	20000310 	.word	0x20000310
 8005d40:	20000234 	.word	0x20000234
 8005d44:	20000230 	.word	0x20000230

08005d48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10c      	bne.n	8005d72 <vTaskPlaceOnEventList+0x2a>
        __asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	b672      	cpsid	i
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	b662      	cpsie	i
 8005d6c:	60fb      	str	r3, [r7, #12]
    }
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <vTaskPlaceOnEventList+0x48>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3318      	adds	r3, #24
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fe ffb7 	bl	8004cee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d80:	2101      	movs	r1, #1
 8005d82:	6838      	ldr	r0, [r7, #0]
 8005d84:	f000 fa84 	bl	8006290 <prvAddCurrentTaskToDelayedList>
}
 8005d88:	bf00      	nop
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000230 	.word	0x20000230

08005d94 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10c      	bne.n	8005dc0 <vTaskPlaceOnEventListRestricted+0x2c>
        __asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	b672      	cpsid	i
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	b662      	cpsie	i
 8005dba:	613b      	str	r3, [r7, #16]
    }
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	61da      	str	r2, [r3, #28]
 8005dce:	4b14      	ldr	r3, [pc, #80]	; (8005e20 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	6892      	ldr	r2, [r2, #8]
 8005dd6:	621a      	str	r2, [r3, #32]
 8005dd8:	4b11      	ldr	r3, [pc, #68]	; (8005e20 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	3218      	adds	r2, #24
 8005de2:	605a      	str	r2, [r3, #4]
 8005de4:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f103 0218 	add.w	r2, r3, #24
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	609a      	str	r2, [r3, #8]
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	629a      	str	r2, [r3, #40]	; 0x28
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <vTaskPlaceOnEventListRestricted+0x7a>
        {
            xTicksToWait = portMAX_DELAY;
 8005e08:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	68b8      	ldr	r0, [r7, #8]
 8005e12:	f000 fa3d 	bl	8006290 <prvAddCurrentTaskToDelayedList>
    }
 8005e16:	bf00      	nop
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000230 	.word	0x20000230

08005e24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b08b      	sub	sp, #44	; 0x2c
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10c      	bne.n	8005e54 <xTaskRemoveFromEventList+0x30>
        __asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	b672      	cpsid	i
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	b662      	cpsie	i
 8005e4e:	60fb      	str	r3, [r7, #12]
    }
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	6a3a      	ldr	r2, [r7, #32]
 8005e60:	6a12      	ldr	r2, [r2, #32]
 8005e62:	609a      	str	r2, [r3, #8]
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	6a3a      	ldr	r2, [r7, #32]
 8005e6a:	69d2      	ldr	r2, [r2, #28]
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	3318      	adds	r3, #24
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d103      	bne.n	8005e82 <xTaskRemoveFromEventList+0x5e>
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	6a1a      	ldr	r2, [r3, #32]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	2200      	movs	r2, #0
 8005e86:	629a      	str	r2, [r3, #40]	; 0x28
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	1e5a      	subs	r2, r3, #1
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e92:	4b4a      	ldr	r3, [pc, #296]	; (8005fbc <xTaskRemoveFromEventList+0x198>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d15e      	bne.n	8005f58 <xTaskRemoveFromEventList+0x134>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	6a3a      	ldr	r2, [r7, #32]
 8005ea6:	68d2      	ldr	r2, [r2, #12]
 8005ea8:	609a      	str	r2, [r3, #8]
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	6a3a      	ldr	r2, [r7, #32]
 8005eb0:	6892      	ldr	r2, [r2, #8]
 8005eb2:	605a      	str	r2, [r3, #4]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d103      	bne.n	8005ec8 <xTaskRemoveFromEventList+0xa4>
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	605a      	str	r2, [r3, #4]
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	615a      	str	r2, [r3, #20]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	1e5a      	subs	r2, r3, #1
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	2201      	movs	r2, #1
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	4b37      	ldr	r3, [pc, #220]	; (8005fc0 <xTaskRemoveFromEventList+0x19c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	4a36      	ldr	r2, [pc, #216]	; (8005fc0 <xTaskRemoveFromEventList+0x19c>)
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eee:	4935      	ldr	r1, [pc, #212]	; (8005fc4 <xTaskRemoveFromEventList+0x1a0>)
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	3304      	adds	r3, #4
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	609a      	str	r2, [r3, #8]
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	6a3a      	ldr	r2, [r7, #32]
 8005f14:	3204      	adds	r2, #4
 8005f16:	605a      	str	r2, [r3, #4]
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	1d1a      	adds	r2, r3, #4
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4a25      	ldr	r2, [pc, #148]	; (8005fc4 <xTaskRemoveFromEventList+0x1a0>)
 8005f2e:	441a      	add	r2, r3
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	615a      	str	r2, [r3, #20]
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	4922      	ldr	r1, [pc, #136]	; (8005fc4 <xTaskRemoveFromEventList+0x1a0>)
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	481e      	ldr	r0, [pc, #120]	; (8005fc4 <xTaskRemoveFromEventList+0x1a0>)
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4403      	add	r3, r0
 8005f54:	6019      	str	r1, [r3, #0]
 8005f56:	e01b      	b.n	8005f90 <xTaskRemoveFromEventList+0x16c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f58:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <xTaskRemoveFromEventList+0x1a4>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	61da      	str	r2, [r3, #28]
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	621a      	str	r2, [r3, #32]
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	6a3a      	ldr	r2, [r7, #32]
 8005f72:	3218      	adds	r2, #24
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f103 0218 	add.w	r2, r3, #24
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	609a      	str	r2, [r3, #8]
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	4a11      	ldr	r2, [pc, #68]	; (8005fc8 <xTaskRemoveFromEventList+0x1a4>)
 8005f84:	629a      	str	r2, [r3, #40]	; 0x28
 8005f86:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <xTaskRemoveFromEventList+0x1a4>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	4a0e      	ldr	r2, [pc, #56]	; (8005fc8 <xTaskRemoveFromEventList+0x1a4>)
 8005f8e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f94:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <xTaskRemoveFromEventList+0x1a8>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d905      	bls.n	8005faa <xTaskRemoveFromEventList+0x186>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <xTaskRemoveFromEventList+0x1ac>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e001      	b.n	8005fae <xTaskRemoveFromEventList+0x18a>
    }
    else
    {
        xReturn = pdFALSE;
 8005faa:	2300      	movs	r3, #0
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	372c      	adds	r7, #44	; 0x2c
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	20000330 	.word	0x20000330
 8005fc0:	20000310 	.word	0x20000310
 8005fc4:	20000234 	.word	0x20000234
 8005fc8:	200002c8 	.word	0x200002c8
 8005fcc:	20000230 	.word	0x20000230
 8005fd0:	2000031c 	.word	0x2000031c

08005fd4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fdc:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <vTaskInternalSetTimeOutState+0x24>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <vTaskInternalSetTimeOutState+0x28>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	605a      	str	r2, [r3, #4]
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	20000320 	.word	0x20000320
 8005ffc:	2000030c 	.word	0x2000030c

08006000 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10c      	bne.n	800602a <xTaskCheckForTimeOut+0x2a>
        __asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	b672      	cpsid	i
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	b662      	cpsie	i
 8006024:	613b      	str	r3, [r7, #16]
    }
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10c      	bne.n	800604a <xTaskCheckForTimeOut+0x4a>
        __asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	b672      	cpsid	i
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	b662      	cpsie	i
 8006044:	60fb      	str	r3, [r7, #12]
    }
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <xTaskCheckForTimeOut+0x48>

    taskENTER_CRITICAL();
 800604a:	f000 fd39 	bl	8006ac0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800604e:	4b1f      	ldr	r3, [pc, #124]	; (80060cc <xTaskCheckForTimeOut+0xcc>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006066:	d102      	bne.n	800606e <xTaskCheckForTimeOut+0x6e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006068:	2300      	movs	r3, #0
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	e026      	b.n	80060bc <xTaskCheckForTimeOut+0xbc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <xTaskCheckForTimeOut+0xd0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d00a      	beq.n	8006090 <xTaskCheckForTimeOut+0x90>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	429a      	cmp	r2, r3
 8006082:	d305      	bcc.n	8006090 <xTaskCheckForTimeOut+0x90>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006084:	2301      	movs	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e015      	b.n	80060bc <xTaskCheckForTimeOut+0xbc>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	429a      	cmp	r2, r3
 8006098:	d20b      	bcs.n	80060b2 <xTaskCheckForTimeOut+0xb2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	1ad2      	subs	r2, r2, r3
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff ff94 	bl	8005fd4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	e004      	b.n	80060bc <xTaskCheckForTimeOut+0xbc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80060b8:	2301      	movs	r3, #1
 80060ba:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80060bc:	f000 fd34 	bl	8006b28 <vPortExitCritical>

    return xReturn;
 80060c0:	69fb      	ldr	r3, [r7, #28]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	2000030c 	.word	0x2000030c
 80060d0:	20000320 	.word	0x20000320

080060d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80060d8:	4b03      	ldr	r3, [pc, #12]	; (80060e8 <vTaskMissedYield+0x14>)
 80060da:	2201      	movs	r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
}
 80060de:	bf00      	nop
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	2000031c 	.word	0x2000031c

080060ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80060f4:	f000 f854 	bl	80061a0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060f8:	4b07      	ldr	r3, [pc, #28]	; (8006118 <prvIdleTask+0x2c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d907      	bls.n	8006110 <prvIdleTask+0x24>
            {
                taskYIELD();
 8006100:	4b06      	ldr	r3, [pc, #24]	; (800611c <prvIdleTask+0x30>)
 8006102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8006110:	f7fa ffde 	bl	80010d0 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8006114:	e7ee      	b.n	80060f4 <prvIdleTask+0x8>
 8006116:	bf00      	nop
 8006118:	20000234 	.word	0x20000234
 800611c:	e000ed04 	.word	0xe000ed04

08006120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006126:	2300      	movs	r3, #0
 8006128:	607b      	str	r3, [r7, #4]
 800612a:	e00c      	b.n	8006146 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4a12      	ldr	r2, [pc, #72]	; (8006180 <prvInitialiseTaskLists+0x60>)
 8006138:	4413      	add	r3, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fdaa 	bl	8004c94 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3301      	adds	r3, #1
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b04      	cmp	r3, #4
 800614a:	d9ef      	bls.n	800612c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800614c:	480d      	ldr	r0, [pc, #52]	; (8006184 <prvInitialiseTaskLists+0x64>)
 800614e:	f7fe fda1 	bl	8004c94 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006152:	480d      	ldr	r0, [pc, #52]	; (8006188 <prvInitialiseTaskLists+0x68>)
 8006154:	f7fe fd9e 	bl	8004c94 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006158:	480c      	ldr	r0, [pc, #48]	; (800618c <prvInitialiseTaskLists+0x6c>)
 800615a:	f7fe fd9b 	bl	8004c94 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800615e:	480c      	ldr	r0, [pc, #48]	; (8006190 <prvInitialiseTaskLists+0x70>)
 8006160:	f7fe fd98 	bl	8004c94 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006164:	480b      	ldr	r0, [pc, #44]	; (8006194 <prvInitialiseTaskLists+0x74>)
 8006166:	f7fe fd95 	bl	8004c94 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <prvInitialiseTaskLists+0x78>)
 800616c:	4a05      	ldr	r2, [pc, #20]	; (8006184 <prvInitialiseTaskLists+0x64>)
 800616e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <prvInitialiseTaskLists+0x7c>)
 8006172:	4a05      	ldr	r2, [pc, #20]	; (8006188 <prvInitialiseTaskLists+0x68>)
 8006174:	601a      	str	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20000234 	.word	0x20000234
 8006184:	20000298 	.word	0x20000298
 8006188:	200002ac 	.word	0x200002ac
 800618c:	200002c8 	.word	0x200002c8
 8006190:	200002dc 	.word	0x200002dc
 8006194:	200002f4 	.word	0x200002f4
 8006198:	200002c0 	.word	0x200002c0
 800619c:	200002c4 	.word	0x200002c4

080061a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a6:	e019      	b.n	80061dc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80061a8:	f000 fc8a 	bl	8006ac0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ac:	4b10      	ldr	r3, [pc, #64]	; (80061f0 <prvCheckTasksWaitingTermination+0x50>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fdd1 	bl	8004d60 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80061be:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <prvCheckTasksWaitingTermination+0x54>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	4a0b      	ldr	r2, [pc, #44]	; (80061f4 <prvCheckTasksWaitingTermination+0x54>)
 80061c6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80061c8:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	4a0a      	ldr	r2, [pc, #40]	; (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061d0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80061d2:	f000 fca9 	bl	8006b28 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f810 	bl	80061fc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e1      	bne.n	80061a8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	200002dc 	.word	0x200002dc
 80061f4:	20000308 	.word	0x20000308
 80061f8:	200002f0 	.word	0x200002f0

080061fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fdff 	bl	8006e0c <vPortFree>
            vPortFree( pxTCB );
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fdfc 	bl	8006e0c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <prvResetNextTaskUnblockTime+0x30>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d104      	bne.n	8006234 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800622a:	4b09      	ldr	r3, [pc, #36]	; (8006250 <prvResetNextTaskUnblockTime+0x34>)
 800622c:	f04f 32ff 	mov.w	r2, #4294967295
 8006230:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006232:	e005      	b.n	8006240 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <prvResetNextTaskUnblockTime+0x30>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a04      	ldr	r2, [pc, #16]	; (8006250 <prvResetNextTaskUnblockTime+0x34>)
 800623e:	6013      	str	r3, [r2, #0]
}
 8006240:	bf00      	nop
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	200002c0 	.word	0x200002c0
 8006250:	20000328 	.word	0x20000328

08006254 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <xTaskGetSchedulerState+0x34>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006262:	2301      	movs	r3, #1
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	e008      	b.n	800627a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006268:	4b08      	ldr	r3, [pc, #32]	; (800628c <xTaskGetSchedulerState+0x38>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d102      	bne.n	8006276 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006270:	2302      	movs	r3, #2
 8006272:	607b      	str	r3, [r7, #4]
 8006274:	e001      	b.n	800627a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006276:	2300      	movs	r3, #0
 8006278:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800627a:	687b      	ldr	r3, [r7, #4]
    }
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	20000314 	.word	0x20000314
 800628c:	20000330 	.word	0x20000330

08006290 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800629a:	4b36      	ldr	r3, [pc, #216]	; (8006374 <prvAddCurrentTaskToDelayedList+0xe4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062a0:	4b35      	ldr	r3, [pc, #212]	; (8006378 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fd5a 	bl	8004d60 <uxListRemove>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10b      	bne.n	80062ca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80062b2:	4b31      	ldr	r3, [pc, #196]	; (8006378 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	2201      	movs	r2, #1
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43da      	mvns	r2, r3
 80062c0:	4b2e      	ldr	r3, [pc, #184]	; (800637c <prvAddCurrentTaskToDelayedList+0xec>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4013      	ands	r3, r2
 80062c6:	4a2d      	ldr	r2, [pc, #180]	; (800637c <prvAddCurrentTaskToDelayedList+0xec>)
 80062c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d124      	bne.n	800631c <prvAddCurrentTaskToDelayedList+0x8c>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d021      	beq.n	800631c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062d8:	4b29      	ldr	r3, [pc, #164]	; (8006380 <prvAddCurrentTaskToDelayedList+0xf0>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	4b26      	ldr	r3, [pc, #152]	; (8006378 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	609a      	str	r2, [r3, #8]
 80062e6:	4b24      	ldr	r3, [pc, #144]	; (8006378 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	6892      	ldr	r2, [r2, #8]
 80062ee:	60da      	str	r2, [r3, #12]
 80062f0:	4b21      	ldr	r3, [pc, #132]	; (8006378 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	3204      	adds	r2, #4
 80062fa:	605a      	str	r2, [r3, #4]
 80062fc:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	1d1a      	adds	r2, r3, #4
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	609a      	str	r2, [r3, #8]
 8006306:	4b1c      	ldr	r3, [pc, #112]	; (8006378 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1d      	ldr	r2, [pc, #116]	; (8006380 <prvAddCurrentTaskToDelayedList+0xf0>)
 800630c:	615a      	str	r2, [r3, #20]
 800630e:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	4a1a      	ldr	r2, [pc, #104]	; (8006380 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800631a:	e026      	b.n	800636a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4413      	add	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006324:	4b14      	ldr	r3, [pc, #80]	; (8006378 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	429a      	cmp	r2, r3
 8006332:	d209      	bcs.n	8006348 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006334:	4b13      	ldr	r3, [pc, #76]	; (8006384 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <prvAddCurrentTaskToDelayedList+0xe8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3304      	adds	r3, #4
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f7fe fcd4 	bl	8004cee <vListInsert>
}
 8006346:	e010      	b.n	800636a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <prvAddCurrentTaskToDelayedList+0xf8>)
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <prvAddCurrentTaskToDelayedList+0xe8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3304      	adds	r3, #4
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f7fe fcca 	bl	8004cee <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800635a:	4b0c      	ldr	r3, [pc, #48]	; (800638c <prvAddCurrentTaskToDelayedList+0xfc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	429a      	cmp	r2, r3
 8006362:	d202      	bcs.n	800636a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8006364:	4a09      	ldr	r2, [pc, #36]	; (800638c <prvAddCurrentTaskToDelayedList+0xfc>)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6013      	str	r3, [r2, #0]
}
 800636a:	bf00      	nop
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	2000030c 	.word	0x2000030c
 8006378:	20000230 	.word	0x20000230
 800637c:	20000310 	.word	0x20000310
 8006380:	200002f4 	.word	0x200002f4
 8006384:	200002c4 	.word	0x200002c4
 8006388:	200002c0 	.word	0x200002c0
 800638c:	20000328 	.word	0x20000328

08006390 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800639a:	f000 fa4b 	bl	8006834 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800639e:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <xTimerCreateTimerTask+0x58>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80063a6:	4b11      	ldr	r3, [pc, #68]	; (80063ec <xTimerCreateTimerTask+0x5c>)
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	2302      	movs	r3, #2
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	2300      	movs	r3, #0
 80063b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063b4:	490e      	ldr	r1, [pc, #56]	; (80063f0 <xTimerCreateTimerTask+0x60>)
 80063b6:	480f      	ldr	r0, [pc, #60]	; (80063f4 <xTimerCreateTimerTask+0x64>)
 80063b8:	f7fe fff8 	bl	80053ac <xTaskCreate>
 80063bc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10c      	bne.n	80063de <xTimerCreateTimerTask+0x4e>
        __asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	b672      	cpsid	i
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	b662      	cpsie	i
 80063d8:	603b      	str	r3, [r7, #0]
    }
 80063da:	bf00      	nop
 80063dc:	e7fe      	b.n	80063dc <xTimerCreateTimerTask+0x4c>
        return xReturn;
 80063de:	687b      	ldr	r3, [r7, #4]
    }
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000364 	.word	0x20000364
 80063ec:	20000368 	.word	0x20000368
 80063f0:	08007130 	.word	0x08007130
 80063f4:	0800649d 	.word	0x0800649d

080063f8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006404:	e008      	b.n	8006418 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4413      	add	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	18d1      	adds	r1, r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f8dd 	bl	80065e4 <prvInsertTimerInActiveList>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1ea      	bne.n	8006406 <prvReloadTimer+0xe>
        }
    }
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006446:	4b14      	ldr	r3, [pc, #80]	; (8006498 <prvProcessExpiredTimer+0x5c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3304      	adds	r3, #4
 8006454:	4618      	mov	r0, r3
 8006456:	f7fe fc83 	bl	8004d60 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7ff ffc3 	bl	80063f8 <prvReloadTimer>
 8006472:	e008      	b.n	8006486 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800647a:	f023 0301 	bic.w	r3, r3, #1
 800647e:	b2da      	uxtb	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	4798      	blx	r3
    }
 800648e:	bf00      	nop
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	2000035c 	.word	0x2000035c

0800649c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064a4:	f107 0308 	add.w	r3, r7, #8
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 f857 	bl	800655c <prvGetNextExpireTime>
 80064ae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4619      	mov	r1, r3
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 f803 	bl	80064c0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80064ba:	f000 f8d5 	bl	8006668 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064be:	e7f1      	b.n	80064a4 <prvTimerTask+0x8>

080064c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80064ca:	f7ff f9ab 	bl	8005824 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064ce:	f107 0308 	add.w	r3, r7, #8
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 f866 	bl	80065a4 <prvSampleTimeNow>
 80064d8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d130      	bne.n	8006542 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10a      	bne.n	80064fc <prvProcessTimerOrBlockTask+0x3c>
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d806      	bhi.n	80064fc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80064ee:	f7ff f9a7 	bl	8005840 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff ffa1 	bl	800643c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80064fa:	e024      	b.n	8006546 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006502:	4b13      	ldr	r3, [pc, #76]	; (8006550 <prvProcessTimerOrBlockTask+0x90>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <prvProcessTimerOrBlockTask+0x50>
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <prvProcessTimerOrBlockTask+0x52>
 8006510:	2300      	movs	r3, #0
 8006512:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006514:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <prvProcessTimerOrBlockTask+0x94>)
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	4619      	mov	r1, r3
 8006522:	f7fe ff0f 	bl	8005344 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006526:	f7ff f98b 	bl	8005840 <xTaskResumeAll>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006530:	4b09      	ldr	r3, [pc, #36]	; (8006558 <prvProcessTimerOrBlockTask+0x98>)
 8006532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
    }
 8006540:	e001      	b.n	8006546 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006542:	f7ff f97d 	bl	8005840 <xTaskResumeAll>
    }
 8006546:	bf00      	nop
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000360 	.word	0x20000360
 8006554:	20000364 	.word	0x20000364
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006564:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <prvGetNextExpireTime+0x44>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <prvGetNextExpireTime+0x16>
 800656e:	2201      	movs	r2, #1
 8006570:	e000      	b.n	8006574 <prvGetNextExpireTime+0x18>
 8006572:	2200      	movs	r2, #0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d105      	bne.n	800658c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006580:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <prvGetNextExpireTime+0x44>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	e001      	b.n	8006590 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006590:	68fb      	ldr	r3, [r7, #12]
    }
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	2000035c 	.word	0x2000035c

080065a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80065ac:	f7ff fa46 	bl	8005a3c <xTaskGetTickCount>
 80065b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <prvSampleTimeNow+0x3c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d205      	bcs.n	80065c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80065bc:	f000 f914 	bl	80067e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	e002      	b.n	80065ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80065ce:	4a04      	ldr	r2, [pc, #16]	; (80065e0 <prvSampleTimeNow+0x3c>)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80065d4:	68fb      	ldr	r3, [r7, #12]
    }
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	2000036c 	.word	0x2000036c

080065e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	429a      	cmp	r2, r3
 8006608:	d812      	bhi.n	8006630 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	429a      	cmp	r2, r3
 8006616:	d302      	bcc.n	800661e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e01b      	b.n	8006656 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800661e:	4b10      	ldr	r3, [pc, #64]	; (8006660 <prvInsertTimerInActiveList+0x7c>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3304      	adds	r3, #4
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f7fe fb60 	bl	8004cee <vListInsert>
 800662e:	e012      	b.n	8006656 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d206      	bcs.n	8006646 <prvInsertTimerInActiveList+0x62>
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d302      	bcc.n	8006646 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006640:	2301      	movs	r3, #1
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e007      	b.n	8006656 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006646:	4b07      	ldr	r3, [pc, #28]	; (8006664 <prvInsertTimerInActiveList+0x80>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3304      	adds	r3, #4
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f7fe fb4c 	bl	8004cee <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006656:	697b      	ldr	r3, [r7, #20]
    }
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	20000360 	.word	0x20000360
 8006664:	2000035c 	.word	0x2000035c

08006668 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800666e:	e0a8      	b.n	80067c2 <prvProcessReceivedCommands+0x15a>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f2c0 80a5 	blt.w	80067c2 <prvProcessReceivedCommands+0x15a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	3304      	adds	r3, #4
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe fb69 	bl	8004d60 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800668e:	1d3b      	adds	r3, r7, #4
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff ff87 	bl	80065a4 <prvSampleTimeNow>
 8006696:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	3b01      	subs	r3, #1
 800669c:	2b08      	cmp	r3, #8
 800669e:	f200 808f 	bhi.w	80067c0 <prvProcessReceivedCommands+0x158>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <prvProcessReceivedCommands+0x40>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066cd 	.word	0x080066cd
 80066ac:	080066cd 	.word	0x080066cd
 80066b0:	08006735 	.word	0x08006735
 80066b4:	08006749 	.word	0x08006749
 80066b8:	08006797 	.word	0x08006797
 80066bc:	080066cd 	.word	0x080066cd
 80066c0:	080066cd 	.word	0x080066cd
 80066c4:	08006735 	.word	0x08006735
 80066c8:	08006749 	.word	0x08006749
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	18d1      	adds	r1, r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	69f8      	ldr	r0, [r7, #28]
 80066ec:	f7ff ff7a 	bl	80065e4 <prvInsertTimerInActiveList>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d065      	beq.n	80067c2 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	4413      	add	r3, r2
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4619      	mov	r1, r3
 8006710:	69f8      	ldr	r0, [r7, #28]
 8006712:	f7ff fe71 	bl	80063f8 <prvReloadTimer>
 8006716:	e008      	b.n	800672a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	b2da      	uxtb	r2, r3
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	69f8      	ldr	r0, [r7, #28]
 8006730:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006732:	e046      	b.n	80067c2 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800673a:	f023 0301 	bic.w	r3, r3, #1
 800673e:	b2da      	uxtb	r2, r3
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8006746:	e03c      	b.n	80067c2 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	b2da      	uxtb	r2, r3
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10c      	bne.n	8006782 <prvProcessReceivedCommands+0x11a>
        __asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	b672      	cpsid	i
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	b662      	cpsie	i
 800677c:	617b      	str	r3, [r7, #20]
    }
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <prvProcessReceivedCommands+0x118>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	18d1      	adds	r1, r2, r3
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	69f8      	ldr	r0, [r7, #28]
 8006790:	f7ff ff28 	bl	80065e4 <prvInsertTimerInActiveList>
                        break;
 8006794:	e015      	b.n	80067c2 <prvProcessReceivedCommands+0x15a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d103      	bne.n	80067ac <prvProcessReceivedCommands+0x144>
                            {
                                vPortFree( pxTimer );
 80067a4:	69f8      	ldr	r0, [r7, #28]
 80067a6:	f000 fb31 	bl	8006e0c <vPortFree>
 80067aa:	e00a      	b.n	80067c2 <prvProcessReceivedCommands+0x15a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067b2:	f023 0301 	bic.w	r3, r3, #1
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80067be:	e000      	b.n	80067c2 <prvProcessReceivedCommands+0x15a>

                    default:
                        /* Don't expect to get here. */
                        break;
 80067c0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067c2:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <prvProcessReceivedCommands+0x17c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f107 0108 	add.w	r1, r7, #8
 80067ca:	2200      	movs	r2, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fe fbf5 	bl	8004fbc <xQueueReceive>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f47f af4b 	bne.w	8006670 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80067da:	bf00      	nop
 80067dc:	bf00      	nop
 80067de:	3720      	adds	r7, #32
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20000364 	.word	0x20000364

080067e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067ee:	e009      	b.n	8006804 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067f0:	4b0e      	ldr	r3, [pc, #56]	; (800682c <prvSwitchTimerLists+0x44>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80067fa:	f04f 31ff 	mov.w	r1, #4294967295
 80067fe:	6838      	ldr	r0, [r7, #0]
 8006800:	f7ff fe1c 	bl	800643c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <prvSwitchTimerLists+0x44>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f0      	bne.n	80067f0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800680e:	4b07      	ldr	r3, [pc, #28]	; (800682c <prvSwitchTimerLists+0x44>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <prvSwitchTimerLists+0x48>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a04      	ldr	r2, [pc, #16]	; (800682c <prvSwitchTimerLists+0x44>)
 800681a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800681c:	4a04      	ldr	r2, [pc, #16]	; (8006830 <prvSwitchTimerLists+0x48>)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6013      	str	r3, [r2, #0]
    }
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	2000035c 	.word	0x2000035c
 8006830:	20000360 	.word	0x20000360

08006834 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006838:	f000 f942 	bl	8006ac0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800683c:	4b12      	ldr	r3, [pc, #72]	; (8006888 <prvCheckForValidListAndQueue+0x54>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11d      	bne.n	8006880 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006844:	4811      	ldr	r0, [pc, #68]	; (800688c <prvCheckForValidListAndQueue+0x58>)
 8006846:	f7fe fa25 	bl	8004c94 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800684a:	4811      	ldr	r0, [pc, #68]	; (8006890 <prvCheckForValidListAndQueue+0x5c>)
 800684c:	f7fe fa22 	bl	8004c94 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006850:	4b10      	ldr	r3, [pc, #64]	; (8006894 <prvCheckForValidListAndQueue+0x60>)
 8006852:	4a0e      	ldr	r2, [pc, #56]	; (800688c <prvCheckForValidListAndQueue+0x58>)
 8006854:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006856:	4b10      	ldr	r3, [pc, #64]	; (8006898 <prvCheckForValidListAndQueue+0x64>)
 8006858:	4a0d      	ldr	r2, [pc, #52]	; (8006890 <prvCheckForValidListAndQueue+0x5c>)
 800685a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800685c:	2200      	movs	r2, #0
 800685e:	210c      	movs	r1, #12
 8006860:	200a      	movs	r0, #10
 8006862:	f7fe fb3b 	bl	8004edc <xQueueGenericCreate>
 8006866:	4603      	mov	r3, r0
 8006868:	4a07      	ldr	r2, [pc, #28]	; (8006888 <prvCheckForValidListAndQueue+0x54>)
 800686a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <prvCheckForValidListAndQueue+0x54>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006874:	4b04      	ldr	r3, [pc, #16]	; (8006888 <prvCheckForValidListAndQueue+0x54>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4908      	ldr	r1, [pc, #32]	; (800689c <prvCheckForValidListAndQueue+0x68>)
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fd12 	bl	80052a4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006880:	f000 f952 	bl	8006b28 <vPortExitCritical>
    }
 8006884:	bf00      	nop
 8006886:	bd80      	pop	{r7, pc}
 8006888:	20000364 	.word	0x20000364
 800688c:	20000334 	.word	0x20000334
 8006890:	20000348 	.word	0x20000348
 8006894:	2000035c 	.word	0x2000035c
 8006898:	20000360 	.word	0x20000360
 800689c:	08007138 	.word	0x08007138

080068a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3b04      	subs	r3, #4
 80068b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3b04      	subs	r3, #4
 80068be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f023 0201 	bic.w	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3b04      	subs	r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80068d0:	4a0c      	ldr	r2, [pc, #48]	; (8006904 <pxPortInitialiseStack+0x64>)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3b14      	subs	r3, #20
 80068da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b04      	subs	r3, #4
 80068e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f06f 0202 	mvn.w	r2, #2
 80068ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3b20      	subs	r3, #32
 80068f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80068f6:	68fb      	ldr	r3, [r7, #12]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	08006909 	.word	0x08006909

08006908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006912:	4b14      	ldr	r3, [pc, #80]	; (8006964 <prvTaskExitError+0x5c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691a:	d00c      	beq.n	8006936 <prvTaskExitError+0x2e>
        __asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	b672      	cpsid	i
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	b662      	cpsie	i
 8006930:	60fb      	str	r3, [r7, #12]
    }
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <prvTaskExitError+0x2c>
        __asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	b672      	cpsid	i
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	b662      	cpsie	i
 800694a:	60bb      	str	r3, [r7, #8]
    }
 800694c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800694e:	bf00      	nop
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0fc      	beq.n	8006950 <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006956:	bf00      	nop
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	20000024 	.word	0x20000024
	...

08006970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <pxCurrentTCBConst2>)
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	6808      	ldr	r0, [r1, #0]
 8006976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	f380 8809 	msr	PSP, r0
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f04f 0000 	mov.w	r0, #0
 8006986:	f380 8811 	msr	BASEPRI, r0
 800698a:	4770      	bx	lr
 800698c:	f3af 8000 	nop.w

08006990 <pxCurrentTCBConst2>:
 8006990:	20000230 	.word	0x20000230
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006998:	4808      	ldr	r0, [pc, #32]	; (80069bc <prvPortStartFirstTask+0x24>)
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f380 8808 	msr	MSP, r0
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f380 8814 	msr	CONTROL, r0
 80069aa:	b662      	cpsie	i
 80069ac:	b661      	cpsie	f
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	df00      	svc	0
 80069b8:	bf00      	nop
 80069ba:	0000      	.short	0x0000
 80069bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop

080069c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069ca:	4b37      	ldr	r3, [pc, #220]	; (8006aa8 <xPortStartScheduler+0xe4>)
 80069cc:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	22ff      	movs	r2, #255	; 0xff
 80069da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	4b2f      	ldr	r3, [pc, #188]	; (8006aac <xPortStartScheduler+0xe8>)
 80069f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069f2:	4b2f      	ldr	r3, [pc, #188]	; (8006ab0 <xPortStartScheduler+0xec>)
 80069f4:	2207      	movs	r2, #7
 80069f6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069f8:	e009      	b.n	8006a0e <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 80069fa:	4b2d      	ldr	r3, [pc, #180]	; (8006ab0 <xPortStartScheduler+0xec>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	4a2b      	ldr	r2, [pc, #172]	; (8006ab0 <xPortStartScheduler+0xec>)
 8006a02:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	2b80      	cmp	r3, #128	; 0x80
 8006a18:	d0ef      	beq.n	80069fa <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a1a:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <xPortStartScheduler+0xec>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f1c3 0307 	rsb	r3, r3, #7
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d00c      	beq.n	8006a40 <xPortStartScheduler+0x7c>
        __asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	b672      	cpsid	i
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	b662      	cpsie	i
 8006a3a:	60bb      	str	r3, [r7, #8]
    }
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <xPortStartScheduler+0x7a>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a40:	4b1b      	ldr	r3, [pc, #108]	; (8006ab0 <xPortStartScheduler+0xec>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	021b      	lsls	r3, r3, #8
 8006a46:	4a1a      	ldr	r2, [pc, #104]	; (8006ab0 <xPortStartScheduler+0xec>)
 8006a48:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a4a:	4b19      	ldr	r3, [pc, #100]	; (8006ab0 <xPortStartScheduler+0xec>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a52:	4a17      	ldr	r2, [pc, #92]	; (8006ab0 <xPortStartScheduler+0xec>)
 8006a54:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006a5e:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <xPortStartScheduler+0xf0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a14      	ldr	r2, [pc, #80]	; (8006ab4 <xPortStartScheduler+0xf0>)
 8006a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a68:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006a6a:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <xPortStartScheduler+0xf0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a11      	ldr	r2, [pc, #68]	; (8006ab4 <xPortStartScheduler+0xf0>)
 8006a70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a74:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006a76:	f000 f8db 	bl	8006c30 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006a7a:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <xPortStartScheduler+0xf4>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006a80:	f000 f8fa 	bl	8006c78 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a84:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <xPortStartScheduler+0xf8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a0c      	ldr	r2, [pc, #48]	; (8006abc <xPortStartScheduler+0xf8>)
 8006a8a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a8e:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006a90:	f7ff ff82 	bl	8006998 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006a94:	f7ff f8fa 	bl	8005c8c <vTaskSwitchContext>
    prvTaskExitError();
 8006a98:	f7ff ff36 	bl	8006908 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	e000e400 	.word	0xe000e400
 8006aac:	20000370 	.word	0x20000370
 8006ab0:	20000374 	.word	0x20000374
 8006ab4:	e000ed20 	.word	0xe000ed20
 8006ab8:	20000024 	.word	0x20000024
 8006abc:	e000ef34 	.word	0xe000ef34

08006ac0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
        __asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	b672      	cpsid	i
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	b662      	cpsie	i
 8006ada:	607b      	str	r3, [r7, #4]
    }
 8006adc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006ade:	4b10      	ldr	r3, [pc, #64]	; (8006b20 <vPortEnterCritical+0x60>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	4a0e      	ldr	r2, [pc, #56]	; (8006b20 <vPortEnterCritical+0x60>)
 8006ae6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006ae8:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <vPortEnterCritical+0x60>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d111      	bne.n	8006b14 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006af0:	4b0c      	ldr	r3, [pc, #48]	; (8006b24 <vPortEnterCritical+0x64>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00c      	beq.n	8006b14 <vPortEnterCritical+0x54>
        __asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	b672      	cpsid	i
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	b662      	cpsie	i
 8006b0e:	603b      	str	r3, [r7, #0]
    }
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <vPortEnterCritical+0x52>
    }
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20000024 	.word	0x20000024
 8006b24:	e000ed04 	.word	0xe000ed04

08006b28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006b2e:	4b13      	ldr	r3, [pc, #76]	; (8006b7c <vPortExitCritical+0x54>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10c      	bne.n	8006b50 <vPortExitCritical+0x28>
        __asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	b672      	cpsid	i
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	b662      	cpsie	i
 8006b4a:	607b      	str	r3, [r7, #4]
    }
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8006b50:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <vPortExitCritical+0x54>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	4a09      	ldr	r2, [pc, #36]	; (8006b7c <vPortExitCritical+0x54>)
 8006b58:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006b5a:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <vPortExitCritical+0x54>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <vPortExitCritical+0x46>
 8006b62:	2300      	movs	r3, #0
 8006b64:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006b6c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	20000024 	.word	0x20000024

08006b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006b80:	f3ef 8009 	mrs	r0, PSP
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <pxCurrentTCBConst>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	f01e 0f10 	tst.w	lr, #16
 8006b90:	bf08      	it	eq
 8006b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9a:	6010      	str	r0, [r2, #0]
 8006b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ba4:	b672      	cpsid	i
 8006ba6:	f380 8811 	msr	BASEPRI, r0
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	b662      	cpsie	i
 8006bb4:	f7ff f86a 	bl	8005c8c <vTaskSwitchContext>
 8006bb8:	f04f 0000 	mov.w	r0, #0
 8006bbc:	f380 8811 	msr	BASEPRI, r0
 8006bc0:	bc09      	pop	{r0, r3}
 8006bc2:	6819      	ldr	r1, [r3, #0]
 8006bc4:	6808      	ldr	r0, [r1, #0]
 8006bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bca:	f01e 0f10 	tst.w	lr, #16
 8006bce:	bf08      	it	eq
 8006bd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bd4:	f380 8809 	msr	PSP, r0
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop

08006be0 <pxCurrentTCBConst>:
 8006be0:	20000230 	.word	0x20000230
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop

08006be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
        __asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	b672      	cpsid	i
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	b662      	cpsie	i
 8006c02:	607b      	str	r3, [r7, #4]
    }
 8006c04:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006c06:	f7fe ff29 	bl	8005a5c <xTaskIncrementTick>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c10:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <SysTick_Handler+0x44>)
 8006c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	f383 8811 	msr	BASEPRI, r3
    }
 8006c22:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006c30:	b480      	push	{r7}
 8006c32:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c34:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <vPortSetupTimerInterrupt+0x34>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c3a:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <vPortSetupTimerInterrupt+0x38>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <vPortSetupTimerInterrupt+0x3c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a0a      	ldr	r2, [pc, #40]	; (8006c70 <vPortSetupTimerInterrupt+0x40>)
 8006c46:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4a:	099b      	lsrs	r3, r3, #6
 8006c4c:	4a09      	ldr	r2, [pc, #36]	; (8006c74 <vPortSetupTimerInterrupt+0x44>)
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c52:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <vPortSetupTimerInterrupt+0x34>)
 8006c54:	2207      	movs	r2, #7
 8006c56:	601a      	str	r2, [r3, #0]
}
 8006c58:	bf00      	nop
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	e000e010 	.word	0xe000e010
 8006c68:	e000e018 	.word	0xe000e018
 8006c6c:	20000014 	.word	0x20000014
 8006c70:	10624dd3 	.word	0x10624dd3
 8006c74:	e000e014 	.word	0xe000e014

08006c78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006c78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c88 <vPortEnableVFP+0x10>
 8006c7c:	6801      	ldr	r1, [r0, #0]
 8006c7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c82:	6001      	str	r1, [r0, #0]
 8006c84:	4770      	bx	lr
 8006c86:	0000      	.short	0x0000
 8006c88:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006c8c:	bf00      	nop
 8006c8e:	bf00      	nop

08006c90 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	; 0x28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006c9c:	f7fe fdc2 	bl	8005824 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006ca0:	4b55      	ldr	r3, [pc, #340]	; (8006df8 <pvPortMalloc+0x168>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006ca8:	f000 f910 	bl	8006ecc <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d012      	beq.n	8006cd8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006cb2:	2208      	movs	r2, #8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d804      	bhi.n	8006cd4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	4413      	add	r3, r2
 8006cd0:	607b      	str	r3, [r7, #4]
 8006cd2:	e001      	b.n	8006cd8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	db72      	blt.n	8006dc4 <pvPortMalloc+0x134>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d06f      	beq.n	8006dc4 <pvPortMalloc+0x134>
 8006ce4:	4b45      	ldr	r3, [pc, #276]	; (8006dfc <pvPortMalloc+0x16c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d86a      	bhi.n	8006dc4 <pvPortMalloc+0x134>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006cee:	4b44      	ldr	r3, [pc, #272]	; (8006e00 <pvPortMalloc+0x170>)
 8006cf0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006cf2:	4b43      	ldr	r3, [pc, #268]	; (8006e00 <pvPortMalloc+0x170>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cf8:	e004      	b.n	8006d04 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d903      	bls.n	8006d16 <pvPortMalloc+0x86>
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f1      	bne.n	8006cfa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006d16:	4b38      	ldr	r3, [pc, #224]	; (8006df8 <pvPortMalloc+0x168>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d051      	beq.n	8006dc4 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2208      	movs	r2, #8
 8006d26:	4413      	add	r3, r2
 8006d28:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	1ad2      	subs	r2, r2, r3
 8006d3a:	2308      	movs	r3, #8
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d921      	bls.n	8006d86 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4413      	add	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00c      	beq.n	8006d6e <pvPortMalloc+0xde>
        __asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	b672      	cpsid	i
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	b662      	cpsie	i
 8006d68:	613b      	str	r3, [r7, #16]
    }
 8006d6a:	bf00      	nop
 8006d6c:	e7fe      	b.n	8006d6c <pvPortMalloc+0xdc>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	1ad2      	subs	r2, r2, r3
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d80:	6978      	ldr	r0, [r7, #20]
 8006d82:	f000 f8ff 	bl	8006f84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d86:	4b1d      	ldr	r3, [pc, #116]	; (8006dfc <pvPortMalloc+0x16c>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	4a1a      	ldr	r2, [pc, #104]	; (8006dfc <pvPortMalloc+0x16c>)
 8006d92:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d94:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <pvPortMalloc+0x16c>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	4b1a      	ldr	r3, [pc, #104]	; (8006e04 <pvPortMalloc+0x174>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d203      	bcs.n	8006da8 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006da0:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <pvPortMalloc+0x16c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a17      	ldr	r2, [pc, #92]	; (8006e04 <pvPortMalloc+0x174>)
 8006da6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006dba:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <pvPortMalloc+0x178>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	4a11      	ldr	r2, [pc, #68]	; (8006e08 <pvPortMalloc+0x178>)
 8006dc2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006dc4:	f7fe fd3c 	bl	8005840 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00c      	beq.n	8006dec <pvPortMalloc+0x15c>
        __asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	b672      	cpsid	i
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	b662      	cpsie	i
 8006de6:	60fb      	str	r3, [r7, #12]
    }
 8006de8:	bf00      	nop
 8006dea:	e7fe      	b.n	8006dea <pvPortMalloc+0x15a>
    return pvReturn;
 8006dec:	69fb      	ldr	r3, [r7, #28]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3728      	adds	r7, #40	; 0x28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20003f80 	.word	0x20003f80
 8006dfc:	20003f84 	.word	0x20003f84
 8006e00:	20003f78 	.word	0x20003f78
 8006e04:	20003f88 	.word	0x20003f88
 8006e08:	20003f8c 	.word	0x20003f8c

08006e0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d04d      	beq.n	8006eba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006e1e:	2308      	movs	r3, #8
 8006e20:	425b      	negs	r3, r3
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4413      	add	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	db0c      	blt.n	8006e4e <vPortFree+0x42>
        __asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	b672      	cpsid	i
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	b662      	cpsie	i
 8006e48:	60fb      	str	r3, [r7, #12]
    }
 8006e4a:	bf00      	nop
 8006e4c:	e7fe      	b.n	8006e4c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00c      	beq.n	8006e70 <vPortFree+0x64>
        __asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	b672      	cpsid	i
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	b662      	cpsie	i
 8006e6a:	60bb      	str	r3, [r7, #8]
    }
 8006e6c:	bf00      	nop
 8006e6e:	e7fe      	b.n	8006e6e <vPortFree+0x62>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	0fdb      	lsrs	r3, r3, #31
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01c      	beq.n	8006eba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d118      	bne.n	8006eba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006e94:	f7fe fcc6 	bl	8005824 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <vPortFree+0xb8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	4a08      	ldr	r2, [pc, #32]	; (8006ec4 <vPortFree+0xb8>)
 8006ea4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ea6:	6938      	ldr	r0, [r7, #16]
 8006ea8:	f000 f86c 	bl	8006f84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006eac:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <vPortFree+0xbc>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	4a05      	ldr	r2, [pc, #20]	; (8006ec8 <vPortFree+0xbc>)
 8006eb4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006eb6:	f7fe fcc3 	bl	8005840 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006eba:	bf00      	nop
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20003f84 	.word	0x20003f84
 8006ec8:	20003f90 	.word	0x20003f90

08006ecc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ed2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ed6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006ed8:	4b25      	ldr	r3, [pc, #148]	; (8006f70 <prvHeapInit+0xa4>)
 8006eda:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00c      	beq.n	8006f00 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3307      	adds	r3, #7
 8006eea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0307 	bic.w	r3, r3, #7
 8006ef2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	4a1d      	ldr	r2, [pc, #116]	; (8006f70 <prvHeapInit+0xa4>)
 8006efc:	4413      	add	r3, r2
 8006efe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f04:	4a1b      	ldr	r2, [pc, #108]	; (8006f74 <prvHeapInit+0xa8>)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006f0a:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <prvHeapInit+0xa8>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	4413      	add	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006f18:	2208      	movs	r2, #8
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	1a9b      	subs	r3, r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0307 	bic.w	r3, r3, #7
 8006f26:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4a13      	ldr	r2, [pc, #76]	; (8006f78 <prvHeapInit+0xac>)
 8006f2c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006f2e:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <prvHeapInit+0xac>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <prvHeapInit+0xac>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	1ad2      	subs	r2, r2, r3
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <prvHeapInit+0xac>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4a08      	ldr	r2, [pc, #32]	; (8006f7c <prvHeapInit+0xb0>)
 8006f5a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4a07      	ldr	r2, [pc, #28]	; (8006f80 <prvHeapInit+0xb4>)
 8006f62:	6013      	str	r3, [r2, #0]
}
 8006f64:	bf00      	nop
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	20000378 	.word	0x20000378
 8006f74:	20003f78 	.word	0x20003f78
 8006f78:	20003f80 	.word	0x20003f80
 8006f7c:	20003f88 	.word	0x20003f88
 8006f80:	20003f84 	.word	0x20003f84

08006f84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f8c:	4b28      	ldr	r3, [pc, #160]	; (8007030 <prvInsertBlockIntoFreeList+0xac>)
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	e002      	b.n	8006f98 <prvInsertBlockIntoFreeList+0x14>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d8f7      	bhi.n	8006f92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	4413      	add	r3, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d108      	bne.n	8006fc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	441a      	add	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	441a      	add	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d118      	bne.n	800700c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	4b15      	ldr	r3, [pc, #84]	; (8007034 <prvInsertBlockIntoFreeList+0xb0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d00d      	beq.n	8007002 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	441a      	add	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	e008      	b.n	8007014 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007002:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <prvInsertBlockIntoFreeList+0xb0>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	e003      	b.n	8007014 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	d002      	beq.n	8007022 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007022:	bf00      	nop
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20003f78 	.word	0x20003f78
 8007034:	20003f80 	.word	0x20003f80

08007038 <memset>:
 8007038:	4402      	add	r2, r0
 800703a:	4603      	mov	r3, r0
 800703c:	4293      	cmp	r3, r2
 800703e:	d100      	bne.n	8007042 <memset+0xa>
 8007040:	4770      	bx	lr
 8007042:	f803 1b01 	strb.w	r1, [r3], #1
 8007046:	e7f9      	b.n	800703c <memset+0x4>

08007048 <__libc_init_array>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4d0d      	ldr	r5, [pc, #52]	; (8007080 <__libc_init_array+0x38>)
 800704c:	4c0d      	ldr	r4, [pc, #52]	; (8007084 <__libc_init_array+0x3c>)
 800704e:	1b64      	subs	r4, r4, r5
 8007050:	10a4      	asrs	r4, r4, #2
 8007052:	2600      	movs	r6, #0
 8007054:	42a6      	cmp	r6, r4
 8007056:	d109      	bne.n	800706c <__libc_init_array+0x24>
 8007058:	4d0b      	ldr	r5, [pc, #44]	; (8007088 <__libc_init_array+0x40>)
 800705a:	4c0c      	ldr	r4, [pc, #48]	; (800708c <__libc_init_array+0x44>)
 800705c:	f000 f826 	bl	80070ac <_init>
 8007060:	1b64      	subs	r4, r4, r5
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	2600      	movs	r6, #0
 8007066:	42a6      	cmp	r6, r4
 8007068:	d105      	bne.n	8007076 <__libc_init_array+0x2e>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007070:	4798      	blx	r3
 8007072:	3601      	adds	r6, #1
 8007074:	e7ee      	b.n	8007054 <__libc_init_array+0xc>
 8007076:	f855 3b04 	ldr.w	r3, [r5], #4
 800707a:	4798      	blx	r3
 800707c:	3601      	adds	r6, #1
 800707e:	e7f2      	b.n	8007066 <__libc_init_array+0x1e>
 8007080:	08007160 	.word	0x08007160
 8007084:	08007160 	.word	0x08007160
 8007088:	08007160 	.word	0x08007160
 800708c:	08007164 	.word	0x08007164

08007090 <memcpy>:
 8007090:	440a      	add	r2, r1
 8007092:	4291      	cmp	r1, r2
 8007094:	f100 33ff 	add.w	r3, r0, #4294967295
 8007098:	d100      	bne.n	800709c <memcpy+0xc>
 800709a:	4770      	bx	lr
 800709c:	b510      	push	{r4, lr}
 800709e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070a6:	4291      	cmp	r1, r2
 80070a8:	d1f9      	bne.n	800709e <memcpy+0xe>
 80070aa:	bd10      	pop	{r4, pc}

080070ac <_init>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr

080070b8 <_fini>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr

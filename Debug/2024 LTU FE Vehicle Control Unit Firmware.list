
2024 LTU FE Vehicle Control Unit Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f8c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800718c  0800718c  0000818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007220  08007220  00009028  2**0
                  CONTENTS
  4 .ARM          00000008  08007220  08007220  00008220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007228  08007228  00009028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007228  08007228  00008228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800722c  0800722c  0000822c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08007230  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f94  20000028  08007258  00009028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003fbc  08007258  00009fbc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146fe  00000000  00000000  00009056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003136  00000000  00000000  0001d754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00020890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e88  00000000  00000000  00021b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291cc  00000000  00000000  000229e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016114  00000000  00000000  0004bbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108897  00000000  00000000  00061cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a55f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef0  00000000  00000000  0016a5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  0016f494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000028 	.word	0x20000028
 800021c:	00000000 	.word	0x00000000
 8000220:	08007174 	.word	0x08007174

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000002c 	.word	0x2000002c
 800023c:	08007174 	.word	0x08007174

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <nodeGuarding>:
 */

#include "CAN.h"

void nodeGuarding(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[1] = { (0x00U) };
 8000536:	2300      	movs	r3, #0
 8000538:	713b      	strb	r3, [r7, #4]
	uint32_t mailbox;

	txHeader.DLC = ECU_EMD_NMT_node_guarding_DLC;
 800053a:	2301      	movs	r3, #1
 800053c:	61bb      	str	r3, [r7, #24]
	txHeader.ExtId = DISABLE;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
	txHeader.IDE = CAN_ID_STD;
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
	txHeader.RTR = CAN_RTR_REMOTE;
 8000546:	2302      	movs	r3, #2
 8000548:	617b      	str	r3, [r7, #20]
	txHeader.StdId = ECU_EMD_NMT_node_guarding_CANID;
 800054a:	f240 737a 	movw	r3, #1914	@ 0x77a
 800054e:	60bb      	str	r3, [r7, #8]
	txHeader.TransmitGlobalTime = DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	773b      	strb	r3, [r7, #28]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000554:	463b      	mov	r3, r7
 8000556:	1d3a      	adds	r2, r7, #4
 8000558:	f107 0108 	add.w	r1, r7, #8
 800055c:	480a      	ldr	r0, [pc, #40]	@ (8000588 <nodeGuarding+0x58>)
 800055e:	f002 f8b8 	bl	80026d2 <HAL_CAN_AddTxMessage>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <nodeGuarding+0x3c>
	{
		Error_Handler();
 8000568:	f001 f90b 	bl	8001782 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 800056c:	bf00      	nop
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	4805      	ldr	r0, [pc, #20]	@ (8000588 <nodeGuarding+0x58>)
 8000574:	f002 f97d 	bl	8002872 <HAL_CAN_IsTxMessagePending>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f7      	bne.n	800056e <nodeGuarding+0x3e>

	return;
 800057e:	bf00      	nop
}
 8000580:	3720      	adds	r7, #32
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	2000008c 	.word	0x2000008c

0800058c <startNode>:

void startNode(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	@ 0x30
 8000590:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 8000592:	4a1d      	ldr	r2, [pc, #116]	@ (8000608 <startNode+0x7c>)
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	e892 0003 	ldmia.w	r2, {r0, r1}
 800059c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	ECU_NMT_command_t nmt_t;
	uint8_t len, ide;

	nmt_t.ECU_NMT_CommandSpecifier = (0x01U);
 80005a0:	2301      	movs	r3, #1
 80005a2:	723b      	strb	r3, [r7, #8]
	nmt_t.ECU_NMT_NodeId = (0x7AU);
 80005a4:	237a      	movs	r3, #122	@ 0x7a
 80005a6:	727b      	strb	r3, [r7, #9]

	Pack_ECU_NMT_command__DO_QUASAR_CANopen(&nmt_t, data, &len, &ide);
 80005a8:	1dbb      	adds	r3, r7, #6
 80005aa:	1dfa      	adds	r2, r7, #7
 80005ac:	f107 0110 	add.w	r1, r7, #16
 80005b0:	f107 0008 	add.w	r0, r7, #8
 80005b4:	f000 f8e2 	bl	800077c <Pack_ECU_NMT_command__DO_QUASAR_CANopen>

	txHeader.DLC = ECU_NMT_command_DLC;
 80005b8:	2302      	movs	r3, #2
 80005ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.ExtId = DISABLE;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
	txHeader.IDE = ide;
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 80005c4:	2300      	movs	r3, #0
 80005c6:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.StdId = ECU_NMT_command_CANID;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	f107 0210 	add.w	r2, r7, #16
 80005da:	f107 0118 	add.w	r1, r7, #24
 80005de:	480b      	ldr	r0, [pc, #44]	@ (800060c <startNode+0x80>)
 80005e0:	f002 f877 	bl	80026d2 <HAL_CAN_AddTxMessage>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <startNode+0x62>
	{
		Error_Handler();
 80005ea:	f001 f8ca 	bl	8001782 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 80005ee:	bf00      	nop
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	@ (800060c <startNode+0x80>)
 80005f6:	f002 f93c 	bl	8002872 <HAL_CAN_IsTxMessagePending>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f7      	bne.n	80005f0 <startNode+0x64>

	return;
 8000600:	bf00      	nop
}
 8000602:	3730      	adds	r7, #48	@ 0x30
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	0800718c 	.word	0x0800718c
 800060c:	2000008c 	.word	0x2000008c

08000610 <clearErrors>:

void clearErrors(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b090      	sub	sp, #64	@ 0x40
 8000614:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 8000616:	4a28      	ldr	r2, [pc, #160]	@ (80006b8 <clearErrors+0xa8>)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000620:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	EMD_RxPDO_3_t rxPDO3_t;
	uint8_t len, ide;

	rxPDO3_t.EMD_CMD_ActiveDischarge = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	757b      	strb	r3, [r7, #21]
	rxPDO3_t.EMD_CMD_ClearErrors = (0x01U);
 8000628:	2301      	movs	r3, #1
 800062a:	74fb      	strb	r3, [r7, #19]
	rxPDO3_t.EMD_CMD_ControlMode = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	743b      	strb	r3, [r7, #16]
	rxPDO3_t.EMD_CMD_DigitalOutput1 = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	763b      	strb	r3, [r7, #24]
	rxPDO3_t.EMD_CMD_DigitalOutput2 = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	75fb      	strb	r3, [r7, #23]
	rxPDO3_t.EMD_CMD_LimitationMode = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	75bb      	strb	r3, [r7, #22]
	rxPDO3_t.EMD_CMD_RestartRequest = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	753b      	strb	r3, [r7, #20]
	rxPDO3_t.EMD_CMD_SpeedRefLim = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
	rxPDO3_t.EMD_CMD_SpeedRefLim_VAL = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	74bb      	strb	r3, [r7, #18]
	rxPDO3_t.EMD_CMD_TorqueRefLim = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	813b      	strh	r3, [r7, #8]
	rxPDO3_t.EMD_CMD_TorqueRefLim_VAL = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	72bb      	strb	r3, [r7, #10]
	rxPDO3_t.EMD_MSGCNT_RxPDO3 = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	747b      	strb	r3, [r7, #17]

	Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(&rxPDO3_t, data, &len, &ide);
 8000654:	1dbb      	adds	r3, r7, #6
 8000656:	1dfa      	adds	r2, r7, #7
 8000658:	f107 0120 	add.w	r1, r7, #32
 800065c:	f107 0008 	add.w	r0, r7, #8
 8000660:	f000 f8c0 	bl	80007e4 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>

	txHeader.DLC = len;
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	63bb      	str	r3, [r7, #56]	@ 0x38
	txHeader.ExtId = DISABLE;
 8000668:	2300      	movs	r3, #0
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	txHeader.IDE = ide;
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
	txHeader.RTR = CAN_RTR_DATA;
 8000670:	2300      	movs	r3, #0
 8000672:	637b      	str	r3, [r7, #52]	@ 0x34
	txHeader.StdId = EMD_RxPDO_3_CANID;
 8000674:	f240 437a 	movw	r3, #1146	@ 0x47a
 8000678:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.TransmitGlobalTime = DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	f107 0220 	add.w	r2, r7, #32
 8000688:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800068c:	480b      	ldr	r0, [pc, #44]	@ (80006bc <clearErrors+0xac>)
 800068e:	f002 f820 	bl	80026d2 <HAL_CAN_AddTxMessage>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <clearErrors+0x8c>
	{
		Error_Handler();
 8000698:	f001 f873 	bl	8001782 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 800069c:	bf00      	nop
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	@ (80006bc <clearErrors+0xac>)
 80006a4:	f002 f8e5 	bl	8002872 <HAL_CAN_IsTxMessagePending>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1f7      	bne.n	800069e <clearErrors+0x8e>

	return;
 80006ae:	bf00      	nop
}
 80006b0:	3740      	adds	r7, #64	@ 0x40
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	0800718c 	.word	0x0800718c
 80006bc:	2000008c 	.word	0x2000008c

080006c0 <torqueControlMessage>:

void torqueControlMessage(int _speedRefLimit, int* _torqueRefLimit)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b092      	sub	sp, #72	@ 0x48
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 80006ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000774 <torqueControlMessage+0xb4>)
 80006cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	EMD_RxPDO_3_t rxPDO3_t;
	uint8_t len, ide;

	rxPDO3_t.EMD_CMD_ActiveDischarge = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	777b      	strb	r3, [r7, #29]
	rxPDO3_t.EMD_CMD_ClearErrors = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	76fb      	strb	r3, [r7, #27]
	rxPDO3_t.EMD_CMD_ControlMode = (0x01U);
 80006e0:	2301      	movs	r3, #1
 80006e2:	763b      	strb	r3, [r7, #24]
	rxPDO3_t.EMD_CMD_DigitalOutput1 = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 3020 	strb.w	r3, [r7, #32]
	rxPDO3_t.EMD_CMD_DigitalOutput2 = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	77fb      	strb	r3, [r7, #31]
	rxPDO3_t.EMD_CMD_LimitationMode = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	77bb      	strb	r3, [r7, #30]
	rxPDO3_t.EMD_CMD_RestartRequest = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	773b      	strb	r3, [r7, #28]
	rxPDO3_t.EMD_CMD_SpeedRefLim = _speedRefLimit;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	617b      	str	r3, [r7, #20]
	rxPDO3_t.EMD_CMD_SpeedRefLim_VAL = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	76bb      	strb	r3, [r7, #26]
	rxPDO3_t.EMD_CMD_TorqueRefLim = *_torqueRefLimit;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	b21b      	sxth	r3, r3
 8000704:	823b      	strh	r3, [r7, #16]
	rxPDO3_t.EMD_CMD_TorqueRefLim_VAL = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	74bb      	strb	r3, [r7, #18]
	rxPDO3_t.EMD_MSGCNT_RxPDO3 = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	767b      	strb	r3, [r7, #25]

	Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(&rxPDO3_t, data, &len, &ide);
 800070e:	f107 030e 	add.w	r3, r7, #14
 8000712:	f107 020f 	add.w	r2, r7, #15
 8000716:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800071a:	f107 0010 	add.w	r0, r7, #16
 800071e:	f000 f861 	bl	80007e4 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>

	txHeader.DLC = EMD_RxPDO_3_DLC;
 8000722:	2306      	movs	r3, #6
 8000724:	643b      	str	r3, [r7, #64]	@ 0x40
	txHeader.ExtId = DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	637b      	str	r3, [r7, #52]	@ 0x34
	txHeader.IDE = ide;
 800072a:	7bbb      	ldrb	r3, [r7, #14]
 800072c:	63bb      	str	r3, [r7, #56]	@ 0x38
	txHeader.RTR = CAN_RTR_DATA;
 800072e:	2300      	movs	r3, #0
 8000730:	63fb      	str	r3, [r7, #60]	@ 0x3c
	txHeader.StdId = EMD_RxPDO_3_CANID;
 8000732:	f240 437a 	movw	r3, #1146	@ 0x47a
 8000736:	633b      	str	r3, [r7, #48]	@ 0x30
	txHeader.TransmitGlobalTime = DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 800073e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000742:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000746:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800074a:	480b      	ldr	r0, [pc, #44]	@ (8000778 <torqueControlMessage+0xb8>)
 800074c:	f001 ffc1 	bl	80026d2 <HAL_CAN_AddTxMessage>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <torqueControlMessage+0x9a>
	{
		Error_Handler();
 8000756:	f001 f814 	bl	8001782 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 800075a:	bf00      	nop
 800075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	@ (8000778 <torqueControlMessage+0xb8>)
 8000762:	f002 f886 	bl	8002872 <HAL_CAN_IsTxMessagePending>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1f7      	bne.n	800075c <torqueControlMessage+0x9c>

	return;
 800076c:	bf00      	nop
}
 800076e:	3748      	adds	r7, #72	@ 0x48
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	0800718c 	.word	0x0800718c
 8000778:	2000008c 	.word	0x2000008c

0800077c <Pack_ECU_NMT_command__DO_QUASAR_CANopen>:
  _m->ECU_NMT_NodeId = (_d[1] & (0xFFU));
  return ECU_NMT_command_CANID;
}

uint32_t Pack_ECU_NMT_command__DO_QUASAR_CANopen(const ECU_NMT_command_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 800077c:	b480      	push	{r7}
 800077e:	b087      	sub	sp, #28
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < ECU_NMT_command_DLC; _d[i++] = 0);
 800078a:	2300      	movs	r3, #0
 800078c:	75fb      	strb	r3, [r7, #23]
 800078e:	e007      	b.n	80007a0 <Pack_ECU_NMT_command__DO_QUASAR_CANopen+0x24>
 8000790:	7dfb      	ldrb	r3, [r7, #23]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	75fa      	strb	r2, [r7, #23]
 8000796:	461a      	mov	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4413      	add	r3, r2
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	7dfb      	ldrb	r3, [r7, #23]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d9f4      	bls.n	8000790 <Pack_ECU_NMT_command__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->ECU_NMT_CommandSpecifier & (0xFFU));
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (_m->ECU_NMT_NodeId & (0xFFU));
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	3301      	adds	r3, #1
 80007ba:	7819      	ldrb	r1, [r3, #0]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	785a      	ldrb	r2, [r3, #1]
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	3301      	adds	r3, #1
 80007c4:	430a      	orrs	r2, r1
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	701a      	strb	r2, [r3, #0]
  *_len = 2; *_ide = 0;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2202      	movs	r2, #2
 80007ce:	701a      	strb	r2, [r3, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
  return ECU_NMT_command_CANID;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	371c      	adds	r7, #28
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>:
  _m->EMD_CMD_DigitalOutput1 = ((_d[5] >> 7) & (0x01U));
  return EMD_RxPDO_3_CANID;
}

uint32_t Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(const EMD_RxPDO_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < EMD_RxPDO_3_DLC; _d[i++] = 0);
 80007f2:	2300      	movs	r3, #0
 80007f4:	75fb      	strb	r3, [r7, #23]
 80007f6:	e007      	b.n	8000808 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen+0x24>
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	75fa      	strb	r2, [r7, #23]
 80007fe:	461a      	mov	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4413      	add	r3, r2
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	7dfb      	ldrb	r3, [r7, #23]
 800080a:	2b05      	cmp	r3, #5
 800080c:	d9f4      	bls.n	80007f8 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->EMD_CMD_TorqueRefLim & (0xFFU));
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b2da      	uxtb	r2, r3
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	701a      	strb	r2, [r3, #0]
  _d[1] |= ((_m->EMD_CMD_TorqueRefLim >> 8) & (0x3FU)) | ((_m->EMD_CMD_TorqueRefLim_VAL & (0x03U)) << 6);
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	3301      	adds	r3, #1
 8000826:	7819      	ldrb	r1, [r3, #0]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082e:	121b      	asrs	r3, r3, #8
 8000830:	b21b      	sxth	r3, r3
 8000832:	b2db      	uxtb	r3, r3
 8000834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000838:	b2da      	uxtb	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	789b      	ldrb	r3, [r3, #2]
 800083e:	019b      	lsls	r3, r3, #6
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4313      	orrs	r3, r2
 8000844:	b2da      	uxtb	r2, r3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	3301      	adds	r3, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	701a      	strb	r2, [r3, #0]
  _d[2] |= (_m->EMD_CMD_SpeedRefLim & (0xFFU));
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3302      	adds	r3, #2
 8000854:	7819      	ldrb	r1, [r3, #0]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3302      	adds	r3, #2
 8000860:	430a      	orrs	r2, r1
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	701a      	strb	r2, [r3, #0]
  _d[3] |= ((_m->EMD_CMD_SpeedRefLim >> 8) & (0xFFU));
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	3303      	adds	r3, #3
 800086a:	7819      	ldrb	r1, [r3, #0]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	121b      	asrs	r3, r3, #8
 8000872:	b2da      	uxtb	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3303      	adds	r3, #3
 8000878:	430a      	orrs	r2, r1
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	701a      	strb	r2, [r3, #0]
  _d[4] |= (_m->EMD_CMD_ControlMode & (0x0FU)) | ((_m->EMD_MSGCNT_RxPDO3 & (0x0FU)) << 4);
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	3304      	adds	r3, #4
 8000882:	7819      	ldrb	r1, [r3, #0]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	7a1b      	ldrb	r3, [r3, #8]
 8000888:	f003 030f 	and.w	r3, r3, #15
 800088c:	b2da      	uxtb	r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	7a5b      	ldrb	r3, [r3, #9]
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b2da      	uxtb	r2, r3
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3304      	adds	r3, #4
 800089e:	430a      	orrs	r2, r1
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	701a      	strb	r2, [r3, #0]
  _d[5] |= (_m->EMD_CMD_SpeedRefLim_VAL & (0x03U)) | ((_m->EMD_CMD_ClearErrors & (0x01U)) << 2) | ((_m->EMD_CMD_RestartRequest & (0x01U)) << 3) | ((_m->EMD_CMD_ActiveDischarge & (0x01U)) << 4) | ((_m->EMD_CMD_LimitationMode & (0x01U)) << 5) | ((_m->EMD_CMD_DigitalOutput2 & (0x01U)) << 6) | ((_m->EMD_CMD_DigitalOutput1 & (0x01U)) << 7);
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	3305      	adds	r3, #5
 80008a8:	7819      	ldrb	r1, [r3, #0]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	7a9b      	ldrb	r3, [r3, #10]
 80008ae:	f003 0303 	and.w	r3, r3, #3
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	7adb      	ldrb	r3, [r3, #11]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	7b1b      	ldrb	r3, [r3, #12]
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	7b5b      	ldrb	r3, [r3, #13]
 80008dc:	011b      	lsls	r3, r3, #4
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	7b9b      	ldrb	r3, [r3, #14]
 80008ee:	015b      	lsls	r3, r3, #5
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	7bdb      	ldrb	r3, [r3, #15]
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4313      	orrs	r3, r2
 800090c:	b2da      	uxtb	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	7c1b      	ldrb	r3, [r3, #16]
 8000912:	01db      	lsls	r3, r3, #7
 8000914:	b2db      	uxtb	r3, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	b2da      	uxtb	r2, r3
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3305      	adds	r3, #5
 800091e:	430a      	orrs	r2, r1
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	701a      	strb	r2, [r3, #0]
  *_len = 6; *_ide = 0;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2206      	movs	r2, #6
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
  return EMD_RxPDO_3_CANID;
 8000930:	f240 437a 	movw	r3, #1146	@ 0x47a
}
 8000934:	4618      	mov	r0, r3
 8000936:	371c      	adds	r7, #28
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <HAL_TIM_OC_DelayElapsedCallback>:
TaskHandle_t task5Handle = NULL;
TaskHandle_t task6Handle = NULL;

// RTD Speaker ISR
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(htim);

	HAL_GPIO_WritePin(RTD_PIN_PORT, RTD_PIN, RTD_DISABLE);
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000950:	2200      	movs	r2, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fa58 	bl	8002e08 <HAL_GPIO_WritePin>

	HAL_TIM_OC_Stop_IT(&htim1, IGNITION_OUPUT_CAPTURE);
 8000958:	2300      	movs	r3, #0
 800095a:	4619      	mov	r1, r3
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 800095e:	f003 f999 	bl	8003c94 <HAL_TIM_OC_Stop_IT>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	200000dc 	.word	0x200000dc

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f001 f910 	bl	8001b9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f907 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f000 fb05 	bl	8000f90 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000986:	f000 f96d 	bl	8000c64 <MX_ADC1_Init>
  MX_CAN1_Init();
 800098a:	f000 f9e9 	bl	8000d60 <MX_CAN1_Init>
  MX_CAN2_Init();
 800098e:	f000 fa1d 	bl	8000dcc <MX_CAN2_Init>
  MX_TIM1_Init();
 8000992:	f000 fa51 	bl	8000e38 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000996:	4868      	ldr	r0, [pc, #416]	@ (8000b38 <main+0x1c4>)
 8000998:	f001 fe57 	bl	800264a <HAL_CAN_Start>

  // CAN FAULT State -> Good
  HAL_GPIO_WritePin(CAN_FAULT_PORT, CAN_FAULT_PIN, NO_FAULT_STATE);
 800099c:	4b67      	ldr	r3, [pc, #412]	@ (8000b3c <main+0x1c8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2140      	movs	r1, #64	@ 0x40
 80009a2:	2201      	movs	r2, #1
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 fa2f 	bl	8002e08 <HAL_GPIO_WritePin>

  // Enable CAN 1 Transreceiver
  HAL_GPIO_WritePin(CAN_ENABLE_1_PORT, CAN_ENABLE_1_PIN, CAN_ENABLE);
 80009aa:	4b65      	ldr	r3, [pc, #404]	@ (8000b40 <main+0x1cc>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009b2:	2200      	movs	r2, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fa27 	bl	8002e08 <HAL_GPIO_WritePin>

  /***************************** Task Creation *****************************/

  xReturned = xTaskCreate(Task1_Handler, "Node_Guarding", 200, NULL, tskIDLE_PRIORITY + 3, &task1Handle);
 80009ba:	4b62      	ldr	r3, [pc, #392]	@ (8000b44 <main+0x1d0>)
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	2303      	movs	r3, #3
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2300      	movs	r3, #0
 80009c4:	22c8      	movs	r2, #200	@ 0xc8
 80009c6:	4960      	ldr	r1, [pc, #384]	@ (8000b48 <main+0x1d4>)
 80009c8:	4860      	ldr	r0, [pc, #384]	@ (8000b4c <main+0x1d8>)
 80009ca:	f004 fd2d 	bl	8005428 <xTaskCreate>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a5f      	ldr	r2, [pc, #380]	@ (8000b50 <main+0x1dc>)
 80009d2:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 80009d4:	4b5e      	ldr	r3, [pc, #376]	@ (8000b50 <main+0x1dc>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d00d      	beq.n	80009f8 <main+0x84>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80009dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009e0:	b672      	cpsid	i
 80009e2:	f383 8811 	msr	BASEPRI, r3
 80009e6:	f3bf 8f6f 	isb	sy
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	b662      	cpsie	i
 80009f0:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <main+0x80>

  xReturned = xTaskCreate(Task2_Handler, "Torque_Control", 200, NULL, tskIDLE_PRIORITY + 2, &task2Handle);
 80009f8:	4b56      	ldr	r3, [pc, #344]	@ (8000b54 <main+0x1e0>)
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	2302      	movs	r3, #2
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2300      	movs	r3, #0
 8000a02:	22c8      	movs	r2, #200	@ 0xc8
 8000a04:	4954      	ldr	r1, [pc, #336]	@ (8000b58 <main+0x1e4>)
 8000a06:	4855      	ldr	r0, [pc, #340]	@ (8000b5c <main+0x1e8>)
 8000a08:	f004 fd0e 	bl	8005428 <xTaskCreate>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a50      	ldr	r2, [pc, #320]	@ (8000b50 <main+0x1dc>)
 8000a10:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000a12:	4b4f      	ldr	r3, [pc, #316]	@ (8000b50 <main+0x1dc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d00d      	beq.n	8000a36 <main+0xc2>
        __asm volatile
 8000a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a1e:	b672      	cpsid	i
 8000a20:	f383 8811 	msr	BASEPRI, r3
 8000a24:	f3bf 8f6f 	isb	sy
 8000a28:	f3bf 8f4f 	dsb	sy
 8000a2c:	b662      	cpsie	i
 8000a2e:	613b      	str	r3, [r7, #16]
    }
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	e7fd      	b.n	8000a32 <main+0xbe>

  xReturned = xTaskCreate(Task3_Handler, "Ignition", 200, NULL, tskIDLE_PRIORITY + 1, &task3Handle);
 8000a36:	4b4a      	ldr	r3, [pc, #296]	@ (8000b60 <main+0x1ec>)
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	22c8      	movs	r2, #200	@ 0xc8
 8000a42:	4948      	ldr	r1, [pc, #288]	@ (8000b64 <main+0x1f0>)
 8000a44:	4848      	ldr	r0, [pc, #288]	@ (8000b68 <main+0x1f4>)
 8000a46:	f004 fcef 	bl	8005428 <xTaskCreate>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a40      	ldr	r2, [pc, #256]	@ (8000b50 <main+0x1dc>)
 8000a4e:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000a50:	4b3f      	ldr	r3, [pc, #252]	@ (8000b50 <main+0x1dc>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d00d      	beq.n	8000a74 <main+0x100>
        __asm volatile
 8000a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a5c:	b672      	cpsid	i
 8000a5e:	f383 8811 	msr	BASEPRI, r3
 8000a62:	f3bf 8f6f 	isb	sy
 8000a66:	f3bf 8f4f 	dsb	sy
 8000a6a:	b662      	cpsie	i
 8000a6c:	60fb      	str	r3, [r7, #12]
    }
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <main+0xfc>

  xReturned = xTaskCreate(Task4_Handler, "BMS_GetData", 200, NULL, tskIDLE_PRIORITY + 1, &task4Handle);
 8000a74:	4b3d      	ldr	r3, [pc, #244]	@ (8000b6c <main+0x1f8>)
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	22c8      	movs	r2, #200	@ 0xc8
 8000a80:	493b      	ldr	r1, [pc, #236]	@ (8000b70 <main+0x1fc>)
 8000a82:	483c      	ldr	r0, [pc, #240]	@ (8000b74 <main+0x200>)
 8000a84:	f004 fcd0 	bl	8005428 <xTaskCreate>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4a31      	ldr	r2, [pc, #196]	@ (8000b50 <main+0x1dc>)
 8000a8c:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000a8e:	4b30      	ldr	r3, [pc, #192]	@ (8000b50 <main+0x1dc>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d00d      	beq.n	8000ab2 <main+0x13e>
        __asm volatile
 8000a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a9a:	b672      	cpsid	i
 8000a9c:	f383 8811 	msr	BASEPRI, r3
 8000aa0:	f3bf 8f6f 	isb	sy
 8000aa4:	f3bf 8f4f 	dsb	sy
 8000aa8:	b662      	cpsie	i
 8000aaa:	60bb      	str	r3, [r7, #8]
    }
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	e7fd      	b.n	8000aae <main+0x13a>

  xReturned = xTaskCreate(Task5_Handler, "Temp_Sense_GetData", 200, NULL, tskIDLE_PRIORITY + 1, &task5Handle);
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <main+0x204>)
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	22c8      	movs	r2, #200	@ 0xc8
 8000abe:	492f      	ldr	r1, [pc, #188]	@ (8000b7c <main+0x208>)
 8000ac0:	482f      	ldr	r0, [pc, #188]	@ (8000b80 <main+0x20c>)
 8000ac2:	f004 fcb1 	bl	8005428 <xTaskCreate>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a21      	ldr	r2, [pc, #132]	@ (8000b50 <main+0x1dc>)
 8000aca:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000acc:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <main+0x1dc>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d00d      	beq.n	8000af0 <main+0x17c>
        __asm volatile
 8000ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ad8:	b672      	cpsid	i
 8000ada:	f383 8811 	msr	BASEPRI, r3
 8000ade:	f3bf 8f6f 	isb	sy
 8000ae2:	f3bf 8f4f 	dsb	sy
 8000ae6:	b662      	cpsie	i
 8000ae8:	607b      	str	r3, [r7, #4]
    }
 8000aea:	bf00      	nop
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <main+0x178>

  xReturned = xTaskCreate(Task6_Handler, "Torque_Derate", 200, NULL, tskIDLE_PRIORITY + 1, &task6Handle);
 8000af0:	4b24      	ldr	r3, [pc, #144]	@ (8000b84 <main+0x210>)
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	2301      	movs	r3, #1
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	2300      	movs	r3, #0
 8000afa:	22c8      	movs	r2, #200	@ 0xc8
 8000afc:	4922      	ldr	r1, [pc, #136]	@ (8000b88 <main+0x214>)
 8000afe:	4823      	ldr	r0, [pc, #140]	@ (8000b8c <main+0x218>)
 8000b00:	f004 fc92 	bl	8005428 <xTaskCreate>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <main+0x1dc>)
 8000b08:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <main+0x1dc>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d00d      	beq.n	8000b2e <main+0x1ba>
        __asm volatile
 8000b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b16:	b672      	cpsid	i
 8000b18:	f383 8811 	msr	BASEPRI, r3
 8000b1c:	f3bf 8f6f 	isb	sy
 8000b20:	f3bf 8f4f 	dsb	sy
 8000b24:	b662      	cpsie	i
 8000b26:	603b      	str	r3, [r7, #0]
    }
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	e7fd      	b.n	8000b2a <main+0x1b6>

  vTaskStartScheduler();
 8000b2e:	f004 fe67 	bl	8005800 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b32:	bf00      	nop
 8000b34:	e7fd      	b.n	8000b32 <main+0x1be>
 8000b36:	bf00      	nop
 8000b38:	2000008c 	.word	0x2000008c
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000004 	.word	0x20000004
 8000b44:	200001ac 	.word	0x200001ac
 8000b48:	08007194 	.word	0x08007194
 8000b4c:	080010e3 	.word	0x080010e3
 8000b50:	200001a8 	.word	0x200001a8
 8000b54:	200001b0 	.word	0x200001b0
 8000b58:	080071a4 	.word	0x080071a4
 8000b5c:	0800110d 	.word	0x0800110d
 8000b60:	200001b4 	.word	0x200001b4
 8000b64:	080071b4 	.word	0x080071b4
 8000b68:	08001165 	.word	0x08001165
 8000b6c:	200001b8 	.word	0x200001b8
 8000b70:	080071c0 	.word	0x080071c0
 8000b74:	08001173 	.word	0x08001173
 8000b78:	200001bc 	.word	0x200001bc
 8000b7c:	080071cc 	.word	0x080071cc
 8000b80:	0800117f 	.word	0x0800117f
 8000b84:	200001c0 	.word	0x200001c0
 8000b88:	080071e0 	.word	0x080071e0
 8000b8c:	0800118b 	.word	0x0800118b

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	@ 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	2234      	movs	r2, #52	@ 0x34
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f006 faae 	bl	8007100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb4:	4b29      	ldr	r3, [pc, #164]	@ (8000c5c <SystemClock_Config+0xcc>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a28      	ldr	r2, [pc, #160]	@ (8000c5c <SystemClock_Config+0xcc>)
 8000bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b26      	ldr	r3, [pc, #152]	@ (8000c5c <SystemClock_Config+0xcc>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bcc:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <SystemClock_Config+0xd0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bd4:	4a22      	ldr	r2, [pc, #136]	@ (8000c60 <SystemClock_Config+0xd0>)
 8000bd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <SystemClock_Config+0xd0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c00:	23b4      	movs	r3, #180	@ 0xb4
 8000c02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4618      	mov	r0, r3
 8000c16:	f002 f911 	bl	8002e3c <HAL_RCC_OscConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c20:	f000 fdaf 	bl	8001782 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c24:	230f      	movs	r3, #15
 8000c26:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	2102      	movs	r1, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 fba8 	bl	8003398 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c4e:	f000 fd98 	bl	8001782 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3750      	adds	r7, #80	@ 0x50
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c76:	4b37      	ldr	r3, [pc, #220]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000c78:	4a37      	ldr	r2, [pc, #220]	@ (8000d58 <MX_ADC1_Init+0xf4>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000c7c:	4b35      	ldr	r3, [pc, #212]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000c7e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000c84:	4b33      	ldr	r3, [pc, #204]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000c86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c8c:	4b31      	ldr	r3, [pc, #196]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c92:	4b30      	ldr	r3, [pc, #192]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b2e      	ldr	r3, [pc, #184]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8000d5c <MX_ADC1_Init+0xf8>)
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cac:	4b29      	ldr	r3, [pc, #164]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cb2:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cb8:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc6:	4823      	ldr	r0, [pc, #140]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000cc8:	f000 ff96 	bl	8001bf8 <HAL_ADC_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000cd2:	f000 fd56 	bl	8001782 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	481b      	ldr	r0, [pc, #108]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000ce8:	f001 f964 	bl	8001fb4 <HAL_ADC_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cf2:	f000 fd46 	bl	8001782 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4619      	mov	r1, r3
 8000d02:	4814      	ldr	r0, [pc, #80]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000d04:	f001 f956 	bl	8001fb4 <HAL_ADC_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d0e:	f000 fd38 	bl	8001782 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d16:	2303      	movs	r3, #3
 8000d18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000d20:	f001 f948 	bl	8001fb4 <HAL_ADC_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d2a:	f000 fd2a 	bl	8001782 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d32:	2304      	movs	r3, #4
 8000d34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <MX_ADC1_Init+0xf0>)
 8000d3c:	f001 f93a 	bl	8001fb4 <HAL_ADC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000d46:	f000 fd1c 	bl	8001782 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000044 	.word	0x20000044
 8000d58:	40012000 	.word	0x40012000
 8000d5c:	0f000001 	.word	0x0f000001

08000d60 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d64:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000d66:	4a18      	ldr	r2, [pc, #96]	@ (8000dc8 <MX_CAN1_Init+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000d6c:	2205      	movs	r2, #5
 8000d6e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000d7e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d82:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000d86:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000d8a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <MX_CAN1_Init+0x64>)
 8000db2:	f001 fb4f 	bl	8002454 <HAL_CAN_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000dbc:	f000 fce1 	bl	8001782 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000008c 	.word	0x2000008c
 8000dc8:	40006400 	.word	0x40006400

08000dcc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000dd2:	4a18      	ldr	r2, [pc, #96]	@ (8000e34 <MX_CAN2_Init+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 5;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000dd8:	2205      	movs	r2, #5
 8000dda:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000dea:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000dee:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000df2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000df6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <MX_CAN2_Init+0x64>)
 8000e1e:	f001 fb19 	bl	8002454 <HAL_CAN_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000e28:	f000 fcab 	bl	8001782 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200000b4 	.word	0x200000b4
 8000e34:	40006800 	.word	0x40006800

08000e38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b09a      	sub	sp, #104	@ 0x68
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	222c      	movs	r2, #44	@ 0x2c
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f006 f944 	bl	8007100 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e78:	4b43      	ldr	r3, [pc, #268]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e7a:	4a44      	ldr	r2, [pc, #272]	@ (8000f8c <MX_TIM1_Init+0x154>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000-1;
 8000e7e:	4b42      	ldr	r3, [pc, #264]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e80:	f244 624f 	movw	r2, #17999	@ 0x464f
 8000e84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e86:	4b40      	ldr	r3, [pc, #256]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e8e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b3c      	ldr	r3, [pc, #240]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b39      	ldr	r3, [pc, #228]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ea6:	4838      	ldr	r0, [pc, #224]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000ea8:	f002 fc7a 	bl	80037a0 <HAL_TIM_Base_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000eb2:	f000 fc66 	bl	8001782 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eba:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ebc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4831      	ldr	r0, [pc, #196]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000ec4:	f003 f94e 	bl	8004164 <HAL_TIM_ConfigClockSource>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000ece:	f000 fc58 	bl	8001782 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ed2:	482d      	ldr	r0, [pc, #180]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000ed4:	f002 fd34 	bl	8003940 <HAL_TIM_OC_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000ede:	f000 fc50 	bl	8001782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4824      	ldr	r0, [pc, #144]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000ef6:	f003 fddb 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000f00:	f000 fc3f 	bl	8001782 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f04:	2300      	movs	r3, #0
 8000f06:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 10000-1;
 8000f08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000f0c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4817      	ldr	r0, [pc, #92]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000f2c:	f003 f8a0 	bl	8004070 <HAL_TIM_OC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000f36:	f000 fc24 	bl	8001782 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000f70:	f003 fe2c 	bl	8004bcc <HAL_TIMEx_ConfigBreakDeadTime>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000f7a:	f000 fc02 	bl	8001782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3768      	adds	r7, #104	@ 0x68
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000dc 	.word	0x200000dc
 8000f8c:	40010000 	.word	0x40010000

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b46      	ldr	r3, [pc, #280]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a45      	ldr	r2, [pc, #276]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b43      	ldr	r3, [pc, #268]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	4b40      	ldr	r3, [pc, #256]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b3d      	ldr	r3, [pc, #244]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a39      	ldr	r2, [pc, #228]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b37      	ldr	r3, [pc, #220]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b34      	ldr	r3, [pc, #208]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a33      	ldr	r2, [pc, #204]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b31      	ldr	r3, [pc, #196]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	4b2e      	ldr	r3, [pc, #184]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a2d      	ldr	r2, [pc, #180]	@ (80010c0 <MX_GPIO_Init+0x130>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <MX_GPIO_Init+0x130>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001024:	4827      	ldr	r0, [pc, #156]	@ (80010c4 <MX_GPIO_Init+0x134>)
 8001026:	f001 feef 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001030:	4825      	ldr	r0, [pc, #148]	@ (80010c8 <MX_GPIO_Init+0x138>)
 8001032:	f001 fee9 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800103c:	4823      	ldr	r0, [pc, #140]	@ (80010cc <MX_GPIO_Init+0x13c>)
 800103e:	f001 fee3 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001042:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	481a      	ldr	r0, [pc, #104]	@ (80010c4 <MX_GPIO_Init+0x134>)
 800105c:	f001 fd10 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001060:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4816      	ldr	r0, [pc, #88]	@ (80010d0 <MX_GPIO_Init+0x140>)
 8001076:	f001 fd03 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800107a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <MX_GPIO_Init+0x138>)
 8001094:	f001 fcf4 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4806      	ldr	r0, [pc, #24]	@ (80010cc <MX_GPIO_Init+0x13c>)
 80010b2:	f001 fce5 	bl	8002a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	@ 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */

/***************************** Idle Task *****************************/
void vApplicationIdleHook(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <Task1_Handler>:

/***************************** Node Guarding Task *****************************/
void Task1_Handler(void* pvParameters)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = NODE_GUARDING_PERIOD;
 80010ea:	2396      	movs	r3, #150	@ 0x96
 80010ec:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 80010ee:	f004 fce9 	bl	8005ac4 <xTaskGetTickCount>
 80010f2:	4603      	mov	r3, r0
 80010f4:	60bb      	str	r3, [r7, #8]

	for (;;)
	{
		// Suspend task until period
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	68f9      	ldr	r1, [r7, #12]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 faf7 	bl	80056f0 <xTaskDelayUntil>

		// Inverter Node Guarding Frame
		nodeGuarding();
 8001102:	f7ff fa15 	bl	8000530 <nodeGuarding>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001106:	bf00      	nop
 8001108:	e7f5      	b.n	80010f6 <Task1_Handler+0x14>
	...

0800110c <Task2_Handler>:
	}
}

/***************************** Torque Control Task *****************************/
void Task2_Handler(void* pvParameters)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = TORQUE_CONTROL_PERIOD;
 8001114:	230a      	movs	r3, #10
 8001116:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8001118:	f004 fcd4 	bl	8005ac4 <xTaskGetTickCount>
 800111c:	4603      	mov	r3, r0
 800111e:	60bb      	str	r3, [r7, #8]

	for (;;)
	{
		// Suspend task until period
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	4618      	mov	r0, r3
 8001128:	f004 fae2 	bl	80056f0 <xTaskDelayUntil>

		// Throttle Sensor Error Checks
		errorSet[PRIM_THROTTLE_SENS_ERR] = primaryThrottleSensorErrorCheck();
 800112c:	2400      	movs	r4, #0
 800112e:	f000 f9df 	bl	80014f0 <primaryThrottleSensorErrorCheck>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <Task2_Handler+0x54>)
 8001138:	551a      	strb	r2, [r3, r4]

		errorSet[SECOND_THROTTLE_SENS_ERR] = secondaryThrottleSensorErrorCheck();
 800113a:	2401      	movs	r4, #1
 800113c:	f000 f9f4 	bl	8001528 <secondaryThrottleSensorErrorCheck>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <Task2_Handler+0x54>)
 8001146:	551a      	strb	r2, [r3, r4]

		errorSet[THROTTLE_OFFSET_ERROR] = throttleSensorDeviationCheck();
 8001148:	2402      	movs	r4, #2
 800114a:	f000 fa09 	bl	8001560 <throttleSensorDeviationCheck>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <Task2_Handler+0x54>)
 8001154:	551a      	strb	r2, [r3, r4]

		// Torque Request

		torqueRequest();
 8001156:	f000 fa87 	bl	8001668 <torqueRequest>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800115a:	bf00      	nop
 800115c:	e7e0      	b.n	8001120 <Task2_Handler+0x14>
 800115e:	bf00      	nop
 8001160:	200001a0 	.word	0x200001a0

08001164 <Task3_Handler>:
	}
}

/***************************** Ignition Task *****************************/
void Task3_Handler(void* pvParameters)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		ignitionTask();
 800116c:	f000 f848 	bl	8001200 <ignitionTask>
 8001170:	e7fc      	b.n	800116c <Task3_Handler+0x8>

08001172 <Task4_Handler>:
	}
}

/***************************** BMS Data Task *****************************/
void Task4_Handler(void* pvParameters)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
	for (;;)
 800117a:	bf00      	nop
 800117c:	e7fd      	b.n	800117a <Task4_Handler+0x8>

0800117e <Task5_Handler>:
	}
}

/***************************** Temp Sense Data Task *****************************/
void Task5_Handler(void* pvParameters)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	for (;;)
 8001186:	bf00      	nop
 8001188:	e7fd      	b.n	8001186 <Task5_Handler+0x8>

0800118a <Task6_Handler>:
	}
}

/***************************** Torque Derating Task *****************************/
void Task6_Handler(void* pvParameters)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	for (;;)
 8001192:	bf00      	nop
 8001194:	e7fd      	b.n	8001192 <Task6_Handler+0x8>

08001196 <map>:
	{

	}
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001196:	b480      	push	{r7}
 8001198:	b085      	sub	sp, #20
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	1a8a      	subs	r2, r1, r2
 80011b0:	fb03 f202 	mul.w	r2, r3, r2
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1acb      	subs	r3, r1, r3
 80011ba:	fb92 f2f3 	sdiv	r2, r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	4413      	add	r3, r2
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <constrain>:

long constrain(long x, long out_min, long out_max)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
	if (x < out_min)
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	429a      	cmp	r2, r3
 80011e0:	da01      	bge.n	80011e6 <constrain+0x18>
	{
		return out_min;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	e006      	b.n	80011f4 <constrain+0x26>
	}

	if (x > out_max)
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dd01      	ble.n	80011f2 <constrain+0x24>
	{
		return out_max;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	e000      	b.n	80011f4 <constrain+0x26>
	}

	return x;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <ignitionTask>:

void ignitionTask(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	buttonState = HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_PIN);
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <ignitionTask+0x98>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fde2 	bl	8002dd8 <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b20      	ldr	r3, [pc, #128]	@ (800129c <ignitionTask+0x9c>)
 800121a:	701a      	strb	r2, [r3, #0]

	buttonPressTime = HAL_GetTick();
 800121c:	f000 fce0 	bl	8001be0 <HAL_GetTick>
 8001220:	4603      	mov	r3, r0
 8001222:	4a1f      	ldr	r2, [pc, #124]	@ (80012a0 <ignitionTask+0xa0>)
 8001224:	6013      	str	r3, [r2, #0]

	while (buttonState == IGNITION_ACTIVE)
 8001226:	e030      	b.n	800128a <ignitionTask+0x8a>
	{
		if (HAL_GetTick() - buttonPressTime > IGNITION_BUTTON_THRESHOLD)
 8001228:	f000 fcda 	bl	8001be0 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <ignitionTask+0xa0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001238:	d91b      	bls.n	8001272 <ignitionTask+0x72>
		{
			startNode();
 800123a:	f7ff f9a7 	bl	800058c <startNode>
			clearErrors();
 800123e:	f7ff f9e7 	bl	8000610 <clearErrors>

			HAL_GPIO_WritePin(RTD_PIN_PORT, RTD_PIN, RTD_ACTIVE);
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <ignitionTask+0xa4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800124a:	2201      	movs	r2, #1
 800124c:	4618      	mov	r0, r3
 800124e:	f001 fddb 	bl	8002e08 <HAL_GPIO_WritePin>

			TIM1->CNT = 0;
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <ignitionTask+0xa8>)
 8001254:	2200      	movs	r2, #0
 8001256:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_OC_Start_IT(&htim1, IGNITION_OUPUT_CAPTURE);
 8001258:	2300      	movs	r3, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4813      	ldr	r0, [pc, #76]	@ (80012ac <ignitionTask+0xac>)
 800125e:	f002 fbd1 	bl	8003a04 <HAL_TIM_OC_Start_IT>

			enableCar = true;
 8001262:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <ignitionTask+0xb0>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]

			buttonPressTime = HAL_GetTick();
 8001268:	f000 fcba 	bl	8001be0 <HAL_GetTick>
 800126c:	4603      	mov	r3, r0
 800126e:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <ignitionTask+0xa0>)
 8001270:	6013      	str	r3, [r2, #0]
		}

		buttonState = HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_PIN);
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <ignitionTask+0x98>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fdab 	bl	8002dd8 <HAL_GPIO_ReadPin>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b05      	ldr	r3, [pc, #20]	@ (800129c <ignitionTask+0x9c>)
 8001288:	701a      	strb	r2, [r3, #0]
	while (buttonState == IGNITION_ACTIVE)
 800128a:	4b04      	ldr	r3, [pc, #16]	@ (800129c <ignitionTask+0x9c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	4293      	cmp	r3, r2
 8001292:	d0c9      	beq.n	8001228 <ignitionTask+0x28>
	}

	return;
 8001294:	bf00      	nop
}
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000000c 	.word	0x2000000c
 800129c:	20000128 	.word	0x20000128
 80012a0:	2000012c 	.word	0x2000012c
 80012a4:	20000008 	.word	0x20000008
 80012a8:	40010000 	.word	0x40010000
 80012ac:	200000dc 	.word	0x200000dc
 80012b0:	20000129 	.word	0x20000129

080012b4 <setADCChannel>:

void setADCChannel(ADC_ChannelConfTypeDef* adcChConfig, uint32_t adcChannel)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	adcChConfig->Channel = adcChannel;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	601a      	str	r2, [r3, #0]
	adcChConfig->Rank = ADC_REGULAR_RANK_1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	605a      	str	r2, [r3, #4]
	adcChConfig->SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2203      	movs	r2, #3
 80012ce:	609a      	str	r2, [r3, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, adcChConfig) != HAL_OK)
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4806      	ldr	r0, [pc, #24]	@ (80012ec <setADCChannel+0x38>)
 80012d4:	f000 fe6e 	bl	8001fb4 <HAL_ADC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <setADCChannel+0x30>
	{
		Error_Handler();
 80012de:	f000 fa50 	bl	8001782 <Error_Handler>
	}

	return;
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
}
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000044 	.word	0x20000044

080012f0 <getADCAverage>:

uint32_t getADCAverage(ADC_ChannelConfTypeDef* adcChConfig, uint32_t adcChannel)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	setADCChannel(adcChConfig, adcChannel);
 80012fa:	6839      	ldr	r1, [r7, #0]
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ffd9 	bl	80012b4 <setADCChannel>

	sum = 0;
 8001302:	4b5c      	ldr	r3, [pc, #368]	@ (8001474 <getADCAverage+0x184>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	e014      	b.n	8001338 <getADCAverage+0x48>
	{
		HAL_ADC_Start(&hadc1);
 800130e:	485a      	ldr	r0, [pc, #360]	@ (8001478 <getADCAverage+0x188>)
 8001310:	f000 fcb6 	bl	8001c80 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc1, (1U));
 8001314:	2101      	movs	r1, #1
 8001316:	4858      	ldr	r0, [pc, #352]	@ (8001478 <getADCAverage+0x188>)
 8001318:	f000 fdb4 	bl	8001e84 <HAL_ADC_PollForConversion>

		adcBuffer[i] = HAL_ADC_GetValue(&hadc1);
 800131c:	4856      	ldr	r0, [pc, #344]	@ (8001478 <getADCAverage+0x188>)
 800131e:	f000 fe3c 	bl	8001f9a <HAL_ADC_GetValue>
 8001322:	4602      	mov	r2, r0
 8001324:	4955      	ldr	r1, [pc, #340]	@ (800147c <getADCAverage+0x18c>)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		HAL_ADC_Stop(&hadc1);
 800132c:	4852      	ldr	r0, [pc, #328]	@ (8001478 <getADCAverage+0x188>)
 800132e:	f000 fd75 	bl	8001e1c <HAL_ADC_Stop>
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3301      	adds	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	2b0e      	cmp	r3, #14
 800133c:	dde7      	ble.n	800130e <getADCAverage+0x1e>
	}

	max = adcBuffer[0];
 800133e:	4b4f      	ldr	r3, [pc, #316]	@ (800147c <getADCAverage+0x18c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	4b4e      	ldr	r3, [pc, #312]	@ (8001480 <getADCAverage+0x190>)
 8001346:	601a      	str	r2, [r3, #0]

	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	e014      	b.n	8001378 <getADCAverage+0x88>
	{
		if (adcBuffer[i] > max)
 800134e:	4a4b      	ldr	r2, [pc, #300]	@ (800147c <getADCAverage+0x18c>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	4a4a      	ldr	r2, [pc, #296]	@ (8001480 <getADCAverage+0x190>)
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	4293      	cmp	r3, r2
 800135c:	d909      	bls.n	8001372 <getADCAverage+0x82>
		{
			max = adcBuffer[i];
 800135e:	4a47      	ldr	r2, [pc, #284]	@ (800147c <getADCAverage+0x18c>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	461a      	mov	r2, r3
 8001368:	4b45      	ldr	r3, [pc, #276]	@ (8001480 <getADCAverage+0x190>)
 800136a:	601a      	str	r2, [r3, #0]
			maxIndex = i;
 800136c:	4a45      	ldr	r2, [pc, #276]	@ (8001484 <getADCAverage+0x194>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	3301      	adds	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b0e      	cmp	r3, #14
 800137c:	dde7      	ble.n	800134e <getADCAverage+0x5e>
		}
	}

	min = adcBuffer[0];
 800137e:	4b3f      	ldr	r3, [pc, #252]	@ (800147c <getADCAverage+0x18c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4b40      	ldr	r3, [pc, #256]	@ (8001488 <getADCAverage+0x198>)
 8001386:	601a      	str	r2, [r3, #0]

	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001388:	2301      	movs	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e014      	b.n	80013b8 <getADCAverage+0xc8>
	{
		if (adcBuffer[i] < min)
 800138e:	4a3b      	ldr	r2, [pc, #236]	@ (800147c <getADCAverage+0x18c>)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	4a3c      	ldr	r2, [pc, #240]	@ (8001488 <getADCAverage+0x198>)
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	4293      	cmp	r3, r2
 800139c:	d209      	bcs.n	80013b2 <getADCAverage+0xc2>
		{
			min = adcBuffer[i];
 800139e:	4a37      	ldr	r2, [pc, #220]	@ (800147c <getADCAverage+0x18c>)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b37      	ldr	r3, [pc, #220]	@ (8001488 <getADCAverage+0x198>)
 80013aa:	601a      	str	r2, [r3, #0]
			minIndex = i;
 80013ac:	4a37      	ldr	r2, [pc, #220]	@ (800148c <getADCAverage+0x19c>)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b0e      	cmp	r3, #14
 80013bc:	dde7      	ble.n	800138e <getADCAverage+0x9e>
		}
	}

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	e01a      	b.n	80013fa <getADCAverage+0x10a>
	{
		if (i == minIndex || i == maxIndex)
 80013c4:	4b31      	ldr	r3, [pc, #196]	@ (800148c <getADCAverage+0x19c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d004      	beq.n	80013d8 <getADCAverage+0xe8>
 80013ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <getADCAverage+0x194>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d104      	bne.n	80013e2 <getADCAverage+0xf2>
		{
			sum += 0;
 80013d8:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <getADCAverage+0x184>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a25      	ldr	r2, [pc, #148]	@ (8001474 <getADCAverage+0x184>)
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e008      	b.n	80013f4 <getADCAverage+0x104>
		}
		else
		{
			sum += adcBuffer[i];
 80013e2:	4a26      	ldr	r2, [pc, #152]	@ (800147c <getADCAverage+0x18c>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ea:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <getADCAverage+0x184>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a20      	ldr	r2, [pc, #128]	@ (8001474 <getADCAverage+0x184>)
 80013f2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	3301      	adds	r3, #1
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	2b0e      	cmp	r3, #14
 80013fe:	dde1      	ble.n	80013c4 <getADCAverage+0xd4>
		}
	}

	average = sum / (ADC_SAMPLE_COUNT - 2);
 8001400:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <getADCAverage+0x184>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a22      	ldr	r2, [pc, #136]	@ (8001490 <getADCAverage+0x1a0>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	4a21      	ldr	r2, [pc, #132]	@ (8001494 <getADCAverage+0x1a4>)
 800140e:	6013      	str	r3, [r2, #0]

	adcBuffer[maxIndex] = average;
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <getADCAverage+0x194>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1f      	ldr	r2, [pc, #124]	@ (8001494 <getADCAverage+0x1a4>)
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	4918      	ldr	r1, [pc, #96]	@ (800147c <getADCAverage+0x18c>)
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	adcBuffer[minIndex] = average;
 800141e:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <getADCAverage+0x19c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1c      	ldr	r2, [pc, #112]	@ (8001494 <getADCAverage+0x1a4>)
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	4915      	ldr	r1, [pc, #84]	@ (800147c <getADCAverage+0x18c>)
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	sum = 0;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <getADCAverage+0x184>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e00b      	b.n	8001450 <getADCAverage+0x160>
	{
		sum += adcBuffer[i];
 8001438:	4a10      	ldr	r2, [pc, #64]	@ (800147c <getADCAverage+0x18c>)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <getADCAverage+0x184>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4413      	add	r3, r2
 8001446:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <getADCAverage+0x184>)
 8001448:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3301      	adds	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b0e      	cmp	r3, #14
 8001454:	ddf0      	ble.n	8001438 <getADCAverage+0x148>
	}

	average = sum / ADC_SAMPLE_COUNT;
 8001456:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <getADCAverage+0x184>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <getADCAverage+0x1a8>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	4a0c      	ldr	r2, [pc, #48]	@ (8001494 <getADCAverage+0x1a4>)
 8001464:	6013      	str	r3, [r2, #0]

	return average;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <getADCAverage+0x1a4>)
 8001468:	681b      	ldr	r3, [r3, #0]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000018c 	.word	0x2000018c
 8001478:	20000044 	.word	0x20000044
 800147c:	20000150 	.word	0x20000150
 8001480:	20000140 	.word	0x20000140
 8001484:	20000148 	.word	0x20000148
 8001488:	20000144 	.word	0x20000144
 800148c:	2000014c 	.word	0x2000014c
 8001490:	4ec4ec4f 	.word	0x4ec4ec4f
 8001494:	20000190 	.word	0x20000190
 8001498:	88888889 	.word	0x88888889

0800149c <getPrimaryThrottlePosition>:

uint32_t getPrimaryThrottlePosition(ADC_ChannelConfTypeDef* adcChConfig)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	return constrain(getADCAverage(adcChConfig, PRIMARY_THROTTLE_CHANNEL), ADC_MIN_LIMIT, ADC_MAX_LIMIT);
 80014a4:	2300      	movs	r3, #0
 80014a6:	4619      	mov	r1, r3
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff21 	bl	80012f0 <getADCAverage>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe89 	bl	80011ce <constrain>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <getSecondaryThrottlePosition>:

uint32_t getSecondaryThrottlePosition(ADC_ChannelConfTypeDef* adcChConfig)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
	return constrain(getADCAverage(adcChConfig, SECONDARY_THROTTLE_CHANNEL), ADC_MIN_LIMIT, ADC_MAX_LIMIT);
 80014ce:	2301      	movs	r3, #1
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff0c 	bl	80012f0 <getADCAverage>
 80014d8:	4603      	mov	r3, r0
 80014da:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe74 	bl	80011ce <constrain>
 80014e6:	4603      	mov	r3, r0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <primaryThrottleSensorErrorCheck>:

bool primaryThrottleSensorErrorCheck()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 80014f4:	480a      	ldr	r0, [pc, #40]	@ (8001520 <primaryThrottleSensorErrorCheck+0x30>)
 80014f6:	f7ff ffd1 	bl	800149c <getPrimaryThrottlePosition>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <primaryThrottleSensorErrorCheck+0x34>)
 80014fe:	6013      	str	r3, [r2, #0]

	if (primaryPotValue <= PRIMARY_THROTTLE_RANGE_MIN || primaryPotValue >= PRIMARY_THROTTLE_RANGE_MAX)
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <primaryThrottleSensorErrorCheck+0x34>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2200      	movs	r2, #0
 8001506:	4293      	cmp	r3, r2
 8001508:	d905      	bls.n	8001516 <primaryThrottleSensorErrorCheck+0x26>
 800150a:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <primaryThrottleSensorErrorCheck+0x34>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001512:	4293      	cmp	r3, r2
 8001514:	d301      	bcc.n	800151a <primaryThrottleSensorErrorCheck+0x2a>
	{
		return true;
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <primaryThrottleSensorErrorCheck+0x2c>
	}
	else
	{
		return false;
 800151a:	2300      	movs	r3, #0
	}
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000130 	.word	0x20000130
 8001524:	20000198 	.word	0x20000198

08001528 <secondaryThrottleSensorErrorCheck>:

bool secondaryThrottleSensorErrorCheck()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 800152c:	480a      	ldr	r0, [pc, #40]	@ (8001558 <secondaryThrottleSensorErrorCheck+0x30>)
 800152e:	f7ff ffca 	bl	80014c6 <getSecondaryThrottlePosition>
 8001532:	4603      	mov	r3, r0
 8001534:	4a09      	ldr	r2, [pc, #36]	@ (800155c <secondaryThrottleSensorErrorCheck+0x34>)
 8001536:	6013      	str	r3, [r2, #0]

	if (secondaryPotValue <= SECONDARY_THROTTLE_RANGE_MIN || secondaryPotValue >= SECONDARY_THROTTLE_RANGE_MAX)
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <secondaryThrottleSensorErrorCheck+0x34>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	4293      	cmp	r3, r2
 8001540:	d905      	bls.n	800154e <secondaryThrottleSensorErrorCheck+0x26>
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <secondaryThrottleSensorErrorCheck+0x34>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800154a:	4293      	cmp	r3, r2
 800154c:	d301      	bcc.n	8001552 <secondaryThrottleSensorErrorCheck+0x2a>
	{
		return true;
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <secondaryThrottleSensorErrorCheck+0x2c>
	}
	else
	{
		return false;
 8001552:	2300      	movs	r3, #0
	}
}
 8001554:	4618      	mov	r0, r3
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000130 	.word	0x20000130
 800155c:	2000019c 	.word	0x2000019c

08001560 <throttleSensorDeviationCheck>:

bool throttleSensorDeviationCheck()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	if (errorSet[PRIM_THROTTLE_SENS_ERR] == true || errorSet[SECOND_THROTTLE_SENS_ERR] == true)
 8001564:	2300      	movs	r3, #0
 8001566:	4a3a      	ldr	r2, [pc, #232]	@ (8001650 <throttleSensorDeviationCheck+0xf0>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d004      	beq.n	8001578 <throttleSensorDeviationCheck+0x18>
 800156e:	2301      	movs	r3, #1
 8001570:	4a37      	ldr	r2, [pc, #220]	@ (8001650 <throttleSensorDeviationCheck+0xf0>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <throttleSensorDeviationCheck+0x1c>
	{
		return false;
 8001578:	2300      	movs	r3, #0
 800157a:	e066      	b.n	800164a <throttleSensorDeviationCheck+0xea>
	}
	else
	{
		primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 800157c:	4835      	ldr	r0, [pc, #212]	@ (8001654 <throttleSensorDeviationCheck+0xf4>)
 800157e:	f7ff ff8d 	bl	800149c <getPrimaryThrottlePosition>
 8001582:	4603      	mov	r3, r0
 8001584:	4a34      	ldr	r2, [pc, #208]	@ (8001658 <throttleSensorDeviationCheck+0xf8>)
 8001586:	6013      	str	r3, [r2, #0]

		secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 8001588:	4832      	ldr	r0, [pc, #200]	@ (8001654 <throttleSensorDeviationCheck+0xf4>)
 800158a:	f7ff ff9c 	bl	80014c6 <getSecondaryThrottlePosition>
 800158e:	4603      	mov	r3, r0
 8001590:	4a32      	ldr	r2, [pc, #200]	@ (800165c <throttleSensorDeviationCheck+0xfc>)
 8001592:	6013      	str	r3, [r2, #0]

		if (primaryPotValue == 0 || secondaryPotValue == 0)
 8001594:	4b30      	ldr	r3, [pc, #192]	@ (8001658 <throttleSensorDeviationCheck+0xf8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <throttleSensorDeviationCheck+0x44>
 800159c:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <throttleSensorDeviationCheck+0xfc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d104      	bne.n	80015ae <throttleSensorDeviationCheck+0x4e>
		{
			percentageDeviation = 0;
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <throttleSensorDeviationCheck+0x100>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]

			return false;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e04d      	b.n	800164a <throttleSensorDeviationCheck+0xea>
		}
		else
		{
			if (primaryPotValue > secondaryPotValue)
 80015ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <throttleSensorDeviationCheck+0xf8>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <throttleSensorDeviationCheck+0xfc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d91b      	bls.n	80015f2 <throttleSensorDeviationCheck+0x92>
			{
				percentageDeviation = (((primaryPotValue - secondaryPotValue) / (float)primaryPotValue) * 100);
 80015ba:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <throttleSensorDeviationCheck+0xf8>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b27      	ldr	r3, [pc, #156]	@ (800165c <throttleSensorDeviationCheck+0xfc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <throttleSensorDeviationCheck+0xf8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015dc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001664 <throttleSensorDeviationCheck+0x104>
 80015e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e8:	ee17 2a90 	vmov	r2, s15
 80015ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <throttleSensorDeviationCheck+0x100>)
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e024      	b.n	800163c <throttleSensorDeviationCheck+0xdc>
			}
			else if (secondaryPotValue > primaryPotValue)
 80015f2:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <throttleSensorDeviationCheck+0xfc>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <throttleSensorDeviationCheck+0xf8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d91b      	bls.n	8001636 <throttleSensorDeviationCheck+0xd6>
			{
				percentageDeviation = (((secondaryPotValue - primaryPotValue) / (float)secondaryPotValue) * 100);
 80015fe:	4b17      	ldr	r3, [pc, #92]	@ (800165c <throttleSensorDeviationCheck+0xfc>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <throttleSensorDeviationCheck+0xf8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <throttleSensorDeviationCheck+0xfc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800161c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001620:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001664 <throttleSensorDeviationCheck+0x104>
 8001624:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800162c:	ee17 2a90 	vmov	r2, s15
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <throttleSensorDeviationCheck+0x100>)
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e002      	b.n	800163c <throttleSensorDeviationCheck+0xdc>
			}
			else
			{
				percentageDeviation = 0;
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <throttleSensorDeviationCheck+0x100>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
			}
		}

		if (percentageDeviation > THROTTLE_DEVIATION_THRESHOLD)
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <throttleSensorDeviationCheck+0x100>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b0a      	cmp	r3, #10
 8001642:	dd01      	ble.n	8001648 <throttleSensorDeviationCheck+0xe8>
		{
			return true;
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <throttleSensorDeviationCheck+0xea>
		}
		else
		{
			return false;
 8001648:	2300      	movs	r3, #0
		}
	}
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200001a0 	.word	0x200001a0
 8001654:	20000130 	.word	0x20000130
 8001658:	20000198 	.word	0x20000198
 800165c:	2000019c 	.word	0x2000019c
 8001660:	20000194 	.word	0x20000194
 8001664:	42c80000 	.word	0x42c80000

08001668 <torqueRequest>:

void torqueRequest(void)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b083      	sub	sp, #12
 800166c:	af02      	add	r7, sp, #8
	if ((errorSet[PRIMARY_BRK_SENS_ERROR] == true && errorSet[SECOND_THROTTLE_SENS_ERR] == true) || errorSet[THROTTLE_OFFSET_ERROR] == true)
 800166e:	2303      	movs	r3, #3
 8001670:	4a37      	ldr	r2, [pc, #220]	@ (8001750 <torqueRequest+0xe8>)
 8001672:	5cd3      	ldrb	r3, [r2, r3]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d104      	bne.n	8001682 <torqueRequest+0x1a>
 8001678:	2301      	movs	r3, #1
 800167a:	4a35      	ldr	r2, [pc, #212]	@ (8001750 <torqueRequest+0xe8>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d004      	beq.n	800168c <torqueRequest+0x24>
 8001682:	2302      	movs	r3, #2
 8001684:	4a32      	ldr	r2, [pc, #200]	@ (8001750 <torqueRequest+0xe8>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d104      	bne.n	8001696 <torqueRequest+0x2e>
	{
		torqueRefLimit = 5000;
 800168c:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <torqueRequest+0xec>)
 800168e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e051      	b.n	800173a <torqueRequest+0xd2>
	}
	else if (errorSet[PRIM_THROTTLE_SENS_ERR] == true)
 8001696:	2300      	movs	r3, #0
 8001698:	4a2d      	ldr	r2, [pc, #180]	@ (8001750 <torqueRequest+0xe8>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d126      	bne.n	80016ee <torqueRequest+0x86>
	{
		secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 80016a0:	482d      	ldr	r0, [pc, #180]	@ (8001758 <torqueRequest+0xf0>)
 80016a2:	f7ff ff10 	bl	80014c6 <getSecondaryThrottlePosition>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a2c      	ldr	r2, [pc, #176]	@ (800175c <torqueRequest+0xf4>)
 80016aa:	6013      	str	r3, [r2, #0]

		torqueRefLimit = map(secondaryPotValue, SECONDARY_THROTTLE_POSITION_MIN, SECONDARY_THROTTLE_POSITION_MAX, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 80016ac:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <torqueRequest+0xf4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	4619      	mov	r1, r3
 80016b6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80016ba:	461c      	mov	r4, r3
 80016bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c0:	f242 531c 	movw	r3, #9500	@ 0x251c
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	4613      	mov	r3, r2
 80016c8:	4622      	mov	r2, r4
 80016ca:	f7ff fd64 	bl	8001196 <map>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4a20      	ldr	r2, [pc, #128]	@ (8001754 <torqueRequest+0xec>)
 80016d2:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 80016d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001754 <torqueRequest+0xec>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80016dc:	f242 521c 	movw	r2, #9500	@ 0x251c
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fd74 	bl	80011ce <constrain>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001754 <torqueRequest+0xec>)
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e025      	b.n	800173a <torqueRequest+0xd2>
	}
	else
	{
		primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 80016ee:	481a      	ldr	r0, [pc, #104]	@ (8001758 <torqueRequest+0xf0>)
 80016f0:	f7ff fed4 	bl	800149c <getPrimaryThrottlePosition>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001760 <torqueRequest+0xf8>)
 80016f8:	6013      	str	r3, [r2, #0]

		torqueRefLimit = map(primaryPotValue, PRIMARY_THROTTLE_POSITION_MIN, PRIMARY_THROTTLE_POSITION_MAX, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <torqueRequest+0xf8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	2300      	movs	r3, #0
 8001702:	4619      	mov	r1, r3
 8001704:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001708:	461c      	mov	r4, r3
 800170a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170e:	f242 531c 	movw	r3, #9500	@ 0x251c
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4613      	mov	r3, r2
 8001716:	4622      	mov	r2, r4
 8001718:	f7ff fd3d 	bl	8001196 <map>
 800171c:	4603      	mov	r3, r0
 800171e:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <torqueRequest+0xec>)
 8001720:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <torqueRequest+0xec>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f241 3188 	movw	r1, #5000	@ 0x1388
 800172a:	f242 521c 	movw	r2, #9500	@ 0x251c
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fd4d 	bl	80011ce <constrain>
 8001734:	4603      	mov	r3, r0
 8001736:	4a07      	ldr	r2, [pc, #28]	@ (8001754 <torqueRequest+0xec>)
 8001738:	6013      	str	r3, [r2, #0]
	}

	torqueControlMessage(SPEED_REF_LIMIT, &torqueRefLimit);
 800173a:	f649 1364 	movw	r3, #39268	@ 0x9964
 800173e:	4905      	ldr	r1, [pc, #20]	@ (8001754 <torqueRequest+0xec>)
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ffbd 	bl	80006c0 <torqueControlMessage>
}
 8001746:	bf00      	nop
 8001748:	3704      	adds	r7, #4
 800174a:	46bd      	mov	sp, r7
 800174c:	bd90      	pop	{r4, r7, pc}
 800174e:	bf00      	nop
 8001750:	200001a0 	.word	0x200001a0
 8001754:	20000010 	.word	0x20000010
 8001758:	20000130 	.word	0x20000130
 800175c:	2000019c 	.word	0x2000019c
 8001760:	20000198 	.word	0x20000198

08001764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001774:	d101      	bne.n	800177a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001776:	f000 fa1f 	bl	8001bb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001786:	b672      	cpsid	i
}
 8001788:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178a:	bf00      	nop
 800178c:	e7fd      	b.n	800178a <Error_Handler+0x8>
	...

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <HAL_MspInit+0x44>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4a0e      	ldr	r2, [pc, #56]	@ (80017d4 <HAL_MspInit+0x44>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <HAL_MspInit+0x44>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_MspInit+0x44>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <HAL_MspInit+0x44>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_MspInit+0x44>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a15      	ldr	r2, [pc, #84]	@ (800184c <HAL_ADC_MspInit+0x74>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d123      	bne.n	8001842 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_ADC_MspInit+0x78>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fe:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <HAL_ADC_MspInit+0x78>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001804:	6453      	str	r3, [r2, #68]	@ 0x44
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_ADC_MspInit+0x78>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <HAL_ADC_MspInit+0x78>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a0e      	ldr	r2, [pc, #56]	@ (8001850 <HAL_ADC_MspInit+0x78>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <HAL_ADC_MspInit+0x78>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800182a:	230f      	movs	r3, #15
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182e:	2303      	movs	r3, #3
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	@ (8001854 <HAL_ADC_MspInit+0x7c>)
 800183e:	f001 f91f 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	@ 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40012000 	.word	0x40012000
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000

08001858 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	@ 0x30
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a3e      	ldr	r2, [pc, #248]	@ (8001970 <HAL_CAN_MspInit+0x118>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d132      	bne.n	80018e0 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800187a:	4b3e      	ldr	r3, [pc, #248]	@ (8001974 <HAL_CAN_MspInit+0x11c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a3c      	ldr	r2, [pc, #240]	@ (8001974 <HAL_CAN_MspInit+0x11c>)
 8001882:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001884:	4b3b      	ldr	r3, [pc, #236]	@ (8001974 <HAL_CAN_MspInit+0x11c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d10b      	bne.n	80018a4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800188c:	4b3a      	ldr	r3, [pc, #232]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	4a39      	ldr	r2, [pc, #228]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 8001892:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001896:	6413      	str	r3, [r2, #64]	@ 0x40
 8001898:	4b37      	ldr	r3, [pc, #220]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b34      	ldr	r3, [pc, #208]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	4a33      	ldr	r2, [pc, #204]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b0:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018ce:	2309      	movs	r3, #9
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4828      	ldr	r0, [pc, #160]	@ (800197c <HAL_CAN_MspInit+0x124>)
 80018da:	f001 f8d1 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80018de:	e042      	b.n	8001966 <HAL_CAN_MspInit+0x10e>
  else if(hcan->Instance==CAN2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a26      	ldr	r2, [pc, #152]	@ (8001980 <HAL_CAN_MspInit+0x128>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d13d      	bne.n	8001966 <HAL_CAN_MspInit+0x10e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80018ea:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	4a22      	ldr	r2, [pc, #136]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 80018f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f6:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_CAN_MspInit+0x11c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	4a1a      	ldr	r2, [pc, #104]	@ (8001974 <HAL_CAN_MspInit+0x11c>)
 800190a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800190c:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_CAN_MspInit+0x11c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d10b      	bne.n	800192c <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001914:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	4a17      	ldr	r2, [pc, #92]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 800191a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800191e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001920:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	4a11      	ldr	r2, [pc, #68]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	6313      	str	r3, [r2, #48]	@ 0x30
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <HAL_CAN_MspInit+0x120>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001944:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001956:	2309      	movs	r3, #9
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	4808      	ldr	r0, [pc, #32]	@ (8001984 <HAL_CAN_MspInit+0x12c>)
 8001962:	f001 f88d 	bl	8002a80 <HAL_GPIO_Init>
}
 8001966:	bf00      	nop
 8001968:	3730      	adds	r7, #48	@ 0x30
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40006400 	.word	0x40006400
 8001974:	200001c4 	.word	0x200001c4
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000
 8001980:	40006800 	.word	0x40006800
 8001984:	40020400 	.word	0x40020400

08001988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <HAL_TIM_Base_MspInit+0x44>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d113      	bne.n	80019c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <HAL_TIM_Base_MspInit+0x48>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	4a0c      	ldr	r2, [pc, #48]	@ (80019d0 <HAL_TIM_Base_MspInit+0x48>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_TIM_Base_MspInit+0x48>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	201b      	movs	r0, #27
 80019b8:	f001 f838 	bl	8002a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019bc:	201b      	movs	r0, #27
 80019be:	f001 f851 	bl	8002a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40010000 	.word	0x40010000
 80019d0:	40023800 	.word	0x40023800

080019d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08e      	sub	sp, #56	@ 0x38
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80019e4:	4b34      	ldr	r3, [pc, #208]	@ (8001ab8 <HAL_InitTick+0xe4>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	4a33      	ldr	r2, [pc, #204]	@ (8001ab8 <HAL_InitTick+0xe4>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f0:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <HAL_InitTick+0xe4>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019fc:	f107 0210 	add.w	r2, r7, #16
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fe98 	bl	800373c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d103      	bne.n	8001a1e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a16:	f001 fe7d 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8001a1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a1c:	e004      	b.n	8001a28 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a1e:	f001 fe79 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8001a22:	4603      	mov	r3, r0
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2a:	4a24      	ldr	r2, [pc, #144]	@ (8001abc <HAL_InitTick+0xe8>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	0c9b      	lsrs	r3, r3, #18
 8001a32:	3b01      	subs	r3, #1
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a36:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <HAL_InitTick+0xec>)
 8001a38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <HAL_InitTick+0xec>)
 8001a40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a44:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001a46:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac0 <HAL_InitTick+0xec>)
 8001a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a4a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <HAL_InitTick+0xec>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <HAL_InitTick+0xec>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_InitTick+0xec>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001a5e:	4818      	ldr	r0, [pc, #96]	@ (8001ac0 <HAL_InitTick+0xec>)
 8001a60:	f001 fe9e 	bl	80037a0 <HAL_TIM_Base_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a6a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11b      	bne.n	8001aaa <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001a72:	4813      	ldr	r0, [pc, #76]	@ (8001ac0 <HAL_InitTick+0xec>)
 8001a74:	f001 feec 	bl	8003850 <HAL_TIM_Base_Start_IT>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d111      	bne.n	8001aaa <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a86:	201c      	movs	r0, #28
 8001a88:	f000 ffec 	bl	8002a64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b0f      	cmp	r3, #15
 8001a90:	d808      	bhi.n	8001aa4 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001a92:	2200      	movs	r2, #0
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	201c      	movs	r0, #28
 8001a98:	f000 ffc8 	bl	8002a2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a9c:	4a09      	ldr	r2, [pc, #36]	@ (8001ac4 <HAL_InitTick+0xf0>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e002      	b.n	8001aaa <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001aaa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3738      	adds	r7, #56	@ 0x38
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	431bde83 	.word	0x431bde83
 8001ac0:	200001c8 	.word	0x200001c8
 8001ac4:	20000018 	.word	0x20000018

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <NMI_Handler+0x4>

08001ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <MemManage_Handler+0x4>

08001ae0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <UsageFault_Handler+0x4>

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <TIM1_CC_IRQHandler+0x10>)
 8001b06:	f002 f993 	bl	8003e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200000dc 	.word	0x200000dc

08001b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <TIM2_IRQHandler+0x10>)
 8001b1a:	f002 f989 	bl	8003e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200001c8 	.word	0x200001c8

08001b28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b50:	480d      	ldr	r0, [pc, #52]	@ (8001b88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b52:	490e      	ldr	r1, [pc, #56]	@ (8001b8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b54:	4a0e      	ldr	r2, [pc, #56]	@ (8001b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0b      	ldr	r2, [pc, #44]	@ (8001b94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b68:	4c0b      	ldr	r4, [pc, #44]	@ (8001b98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b76:	f7ff ffd7 	bl	8001b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f005 fac9 	bl	8007110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7fe fef9 	bl	8000974 <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001b90:	08007230 	.word	0x08007230
  ldr r2, =_sbss
 8001b94:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001b98:	20003fbc 	.word	0x20003fbc

08001b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>

08001b9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba2:	2003      	movs	r0, #3
 8001ba4:	f000 ff37 	bl	8002a16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba8:	200f      	movs	r0, #15
 8001baa:	f7ff ff13 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bae:	f7ff fdef 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000001c 	.word	0x2000001c
 8001bdc:	20000214 	.word	0x20000214

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000214 	.word	0x20000214

08001bf8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e031      	b.n	8001c72 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fdde 	bl	80017d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <HAL_ADC_Init+0x84>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fb0a 	bl	8002260 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c62:	e001      	b.n	8001c68 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	ffffeefd 	.word	0xffffeefd

08001c80 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Start+0x1a>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e0ad      	b.n	8001df6 <HAL_ADC_Start+0x176>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d018      	beq.n	8001ce2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001cc0:	4b50      	ldr	r3, [pc, #320]	@ (8001e04 <HAL_ADC_Start+0x184>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a50      	ldr	r2, [pc, #320]	@ (8001e08 <HAL_ADC_Start+0x188>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0c9a      	lsrs	r2, r3, #18
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001cd4:	e002      	b.n	8001cdc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f9      	bne.n	8001cd6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d175      	bne.n	8001ddc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cf4:	4b45      	ldr	r3, [pc, #276]	@ (8001e0c <HAL_ADC_Start+0x18c>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d2a:	d106      	bne.n	8001d3a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d30:	f023 0206 	bic.w	r2, r3, #6
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001d52:	4b2f      	ldr	r3, [pc, #188]	@ (8001e10 <HAL_ADC_Start+0x190>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10f      	bne.n	8001d7e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d143      	bne.n	8001df4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	e03a      	b.n	8001df4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a24      	ldr	r2, [pc, #144]	@ (8001e14 <HAL_ADC_Start+0x194>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d10e      	bne.n	8001da6 <HAL_ADC_Start+0x126>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001da4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_ADC_Start+0x190>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d120      	bne.n	8001df4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <HAL_ADC_Start+0x198>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d11b      	bne.n	8001df4 <HAL_ADC_Start+0x174>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d114      	bne.n	8001df4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	e00b      	b.n	8001df4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f043 0210 	orr.w	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000014 	.word	0x20000014
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	fffff8fe 	.word	0xfffff8fe
 8001e10:	40012300 	.word	0x40012300
 8001e14:	40012000 	.word	0x40012000
 8001e18:	40012200 	.word	0x40012200

08001e1c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_Stop+0x16>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e01f      	b.n	8001e72 <HAL_ADC_Stop+0x56>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d107      	bne.n	8001e68 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e5c:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <HAL_ADC_Stop+0x64>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	ffffeefe 	.word	0xffffeefe

08001e84 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea0:	d113      	bne.n	8001eca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eb0:	d10b      	bne.n	8001eca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f043 0220 	orr.w	r2, r3, #32
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e063      	b.n	8001f92 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001eca:	f7ff fe89 	bl	8001be0 <HAL_GetTick>
 8001ece:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ed0:	e021      	b.n	8001f16 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d01d      	beq.n	8001f16 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_ADC_PollForConversion+0x6c>
 8001ee0:	f7ff fe7e 	bl	8001be0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d212      	bcs.n	8001f16 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d00b      	beq.n	8001f16 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f043 0204 	orr.w	r2, r3, #4
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e03d      	b.n	8001f92 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d1d6      	bne.n	8001ed2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0212 	mvn.w	r2, #18
 8001f2c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d123      	bne.n	8001f90 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d11f      	bne.n	8001f90 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d006      	beq.n	8001f6c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d111      	bne.n	8001f90 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x1c>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e136      	b.n	800223e <HAL_ADC_ConfigChannel+0x28a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b09      	cmp	r3, #9
 8001fde:	d93a      	bls.n	8002056 <HAL_ADC_ConfigChannel+0xa2>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fe8:	d035      	beq.n	8002056 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68d9      	ldr	r1, [r3, #12]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b1e      	subs	r3, #30
 8002000:	2207      	movs	r2, #7
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	400a      	ands	r2, r1
 800200e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a8d      	ldr	r2, [pc, #564]	@ (800224c <HAL_ADC_ConfigChannel+0x298>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10a      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68d9      	ldr	r1, [r3, #12]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	061a      	lsls	r2, r3, #24
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800202e:	e035      	b.n	800209c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	4618      	mov	r0, r3
 8002042:	4603      	mov	r3, r0
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4403      	add	r3, r0
 8002048:	3b1e      	subs	r3, #30
 800204a:	409a      	lsls	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002054:	e022      	b.n	800209c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6919      	ldr	r1, [r3, #16]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	2207      	movs	r2, #7
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43da      	mvns	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	400a      	ands	r2, r1
 8002078:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6919      	ldr	r1, [r3, #16]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	4603      	mov	r3, r0
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4403      	add	r3, r0
 8002092:	409a      	lsls	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d824      	bhi.n	80020ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b05      	subs	r3, #5
 80020b6:	221f      	movs	r2, #31
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43da      	mvns	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	400a      	ands	r2, r1
 80020c4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	3b05      	subs	r3, #5
 80020e0:	fa00 f203 	lsl.w	r2, r0, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80020ec:	e04c      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d824      	bhi.n	8002140 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	3b23      	subs	r3, #35	@ 0x23
 8002108:	221f      	movs	r2, #31
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	400a      	ands	r2, r1
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	4618      	mov	r0, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3b23      	subs	r3, #35	@ 0x23
 8002132:	fa00 f203 	lsl.w	r2, r0, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	631a      	str	r2, [r3, #48]	@ 0x30
 800213e:	e023      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3b41      	subs	r3, #65	@ 0x41
 8002152:	221f      	movs	r2, #31
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43da      	mvns	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	400a      	ands	r2, r1
 8002160:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	3b41      	subs	r3, #65	@ 0x41
 800217c:	fa00 f203 	lsl.w	r2, r0, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a30      	ldr	r2, [pc, #192]	@ (8002250 <HAL_ADC_ConfigChannel+0x29c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10a      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1f4>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800219c:	4b2d      	ldr	r3, [pc, #180]	@ (8002254 <HAL_ADC_ConfigChannel+0x2a0>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002254 <HAL_ADC_ConfigChannel+0x2a0>)
 80021a2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80021a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a28      	ldr	r2, [pc, #160]	@ (8002250 <HAL_ADC_ConfigChannel+0x29c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10f      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x21e>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b12      	cmp	r3, #18
 80021b8:	d10b      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80021ba:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <HAL_ADC_ConfigChannel+0x2a0>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4a25      	ldr	r2, [pc, #148]	@ (8002254 <HAL_ADC_ConfigChannel+0x2a0>)
 80021c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80021c4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80021c6:	4b23      	ldr	r3, [pc, #140]	@ (8002254 <HAL_ADC_ConfigChannel+0x2a0>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a22      	ldr	r2, [pc, #136]	@ (8002254 <HAL_ADC_ConfigChannel+0x2a0>)
 80021cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021d0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002250 <HAL_ADC_ConfigChannel+0x29c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d12b      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x280>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1a      	ldr	r2, [pc, #104]	@ (800224c <HAL_ADC_ConfigChannel+0x298>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d003      	beq.n	80021ee <HAL_ADC_ConfigChannel+0x23a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b11      	cmp	r3, #17
 80021ec:	d122      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80021ee:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <HAL_ADC_ConfigChannel+0x2a0>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a18      	ldr	r2, [pc, #96]	@ (8002254 <HAL_ADC_ConfigChannel+0x2a0>)
 80021f4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80021f8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80021fa:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <HAL_ADC_ConfigChannel+0x2a0>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a15      	ldr	r2, [pc, #84]	@ (8002254 <HAL_ADC_ConfigChannel+0x2a0>)
 8002200:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002204:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a10      	ldr	r2, [pc, #64]	@ (800224c <HAL_ADC_ConfigChannel+0x298>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d111      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <HAL_ADC_ConfigChannel+0x2a4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a11      	ldr	r2, [pc, #68]	@ (800225c <HAL_ADC_ConfigChannel+0x2a8>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0c9a      	lsrs	r2, r3, #18
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002226:	e002      	b.n	800222e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3b01      	subs	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f9      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	10000012 	.word	0x10000012
 8002250:	40012000 	.word	0x40012000
 8002254:	40012300 	.word	0x40012300
 8002258:	20000014 	.word	0x20000014
 800225c:	431bde83 	.word	0x431bde83

08002260 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002268:	4b78      	ldr	r3, [pc, #480]	@ (800244c <ADC_Init+0x1ec>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a77      	ldr	r2, [pc, #476]	@ (800244c <ADC_Init+0x1ec>)
 800226e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002272:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002274:	4b75      	ldr	r3, [pc, #468]	@ (800244c <ADC_Init+0x1ec>)
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4973      	ldr	r1, [pc, #460]	@ (800244c <ADC_Init+0x1ec>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	021a      	lsls	r2, r3, #8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6899      	ldr	r1, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ee:	4a58      	ldr	r2, [pc, #352]	@ (8002450 <ADC_Init+0x1f0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d022      	beq.n	800233a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002302:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6899      	ldr	r1, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6899      	ldr	r1, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	e00f      	b.n	800235a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002358:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0202 	bic.w	r2, r2, #2
 8002368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	005a      	lsls	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01b      	beq.n	80023c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002396:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6859      	ldr	r1, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b2:	3b01      	subs	r3, #1
 80023b4:	035a      	lsls	r2, r3, #13
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	e007      	b.n	80023d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	051a      	lsls	r2, r3, #20
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6899      	ldr	r1, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002412:	025a      	lsls	r2, r3, #9
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800242a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6899      	ldr	r1, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	029a      	lsls	r2, r3, #10
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	609a      	str	r2, [r3, #8]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40012300 	.word	0x40012300
 8002450:	0f000001 	.word	0x0f000001

08002454 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0ed      	b.n	8002642 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff f9f0 	bl	8001858 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002488:	f7ff fbaa 	bl	8001be0 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800248e:	e012      	b.n	80024b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002490:	f7ff fba6 	bl	8001be0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b0a      	cmp	r3, #10
 800249c:	d90b      	bls.n	80024b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2205      	movs	r2, #5
 80024ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0c5      	b.n	8002642 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0e5      	beq.n	8002490 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0202 	bic.w	r2, r2, #2
 80024d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024d4:	f7ff fb84 	bl	8001be0 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024da:	e012      	b.n	8002502 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024dc:	f7ff fb80 	bl	8001be0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b0a      	cmp	r3, #10
 80024e8:	d90b      	bls.n	8002502 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2205      	movs	r2, #5
 80024fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e09f      	b.n	8002642 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e5      	bne.n	80024dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7e1b      	ldrb	r3, [r3, #24]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d108      	bne.n	800252a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e007      	b.n	800253a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7e5b      	ldrb	r3, [r3, #25]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d108      	bne.n	8002554 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	e007      	b.n	8002564 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002562:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7e9b      	ldrb	r3, [r3, #26]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d108      	bne.n	800257e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0220 	orr.w	r2, r2, #32
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e007      	b.n	800258e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0220 	bic.w	r2, r2, #32
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7edb      	ldrb	r3, [r3, #27]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d108      	bne.n	80025a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0210 	bic.w	r2, r2, #16
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	e007      	b.n	80025b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0210 	orr.w	r2, r2, #16
 80025b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7f1b      	ldrb	r3, [r3, #28]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d108      	bne.n	80025d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0208 	orr.w	r2, r2, #8
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e007      	b.n	80025e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0208 	bic.w	r2, r2, #8
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7f5b      	ldrb	r3, [r3, #29]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d108      	bne.n	80025fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0204 	orr.w	r2, r2, #4
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e007      	b.n	800260c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0204 	bic.w	r2, r2, #4
 800260a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	ea42 0103 	orr.w	r1, r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	1e5a      	subs	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d12e      	bne.n	80026bc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002676:	f7ff fab3 	bl	8001be0 <HAL_GetTick>
 800267a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800267c:	e012      	b.n	80026a4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800267e:	f7ff faaf 	bl	8001be0 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b0a      	cmp	r3, #10
 800268a:	d90b      	bls.n	80026a4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2205      	movs	r2, #5
 800269c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e012      	b.n	80026ca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1e5      	bne.n	800267e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e006      	b.n	80026ca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
  }
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b089      	sub	sp, #36	@ 0x24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026f0:	7ffb      	ldrb	r3, [r7, #31]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d003      	beq.n	80026fe <HAL_CAN_AddTxMessage+0x2c>
 80026f6:	7ffb      	ldrb	r3, [r7, #31]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	f040 80ad 	bne.w	8002858 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8095 	beq.w	8002848 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	0e1b      	lsrs	r3, r3, #24
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002728:	2201      	movs	r2, #1
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	409a      	lsls	r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002744:	68f9      	ldr	r1, [r7, #12]
 8002746:	6809      	ldr	r1, [r1, #0]
 8002748:	431a      	orrs	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3318      	adds	r3, #24
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	440b      	add	r3, r1
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	e00f      	b.n	8002776 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002760:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002766:	68f9      	ldr	r1, [r7, #12]
 8002768:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800276a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3318      	adds	r3, #24
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	440b      	add	r3, r1
 8002774:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3318      	adds	r3, #24
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	440b      	add	r3, r1
 8002786:	3304      	adds	r3, #4
 8002788:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	7d1b      	ldrb	r3, [r3, #20]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d111      	bne.n	80027b6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3318      	adds	r3, #24
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	4413      	add	r3, r2
 800279e:	3304      	adds	r3, #4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	6811      	ldr	r1, [r2, #0]
 80027a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	3318      	adds	r3, #24
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	440b      	add	r3, r1
 80027b2:	3304      	adds	r3, #4
 80027b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3307      	adds	r3, #7
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	061a      	lsls	r2, r3, #24
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3306      	adds	r3, #6
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3305      	adds	r3, #5
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	4313      	orrs	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	3204      	adds	r2, #4
 80027d6:	7812      	ldrb	r2, [r2, #0]
 80027d8:	4610      	mov	r0, r2
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	6811      	ldr	r1, [r2, #0]
 80027de:	ea43 0200 	orr.w	r2, r3, r0
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	440b      	add	r3, r1
 80027e8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80027ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3303      	adds	r3, #3
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	061a      	lsls	r2, r3, #24
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3302      	adds	r3, #2
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	041b      	lsls	r3, r3, #16
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3301      	adds	r3, #1
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	4313      	orrs	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	7812      	ldrb	r2, [r2, #0]
 800280e:	4610      	mov	r0, r2
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	6811      	ldr	r1, [r2, #0]
 8002814:	ea43 0200 	orr.w	r2, r3, r0
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	440b      	add	r3, r1
 800281e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002822:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3318      	adds	r3, #24
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4413      	add	r3, r2
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	6811      	ldr	r1, [r2, #0]
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3318      	adds	r3, #24
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	440b      	add	r3, r1
 8002842:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	e00e      	b.n	8002866 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e006      	b.n	8002866 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	@ 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002886:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d002      	beq.n	8002894 <HAL_CAN_IsTxMessagePending+0x22>
 800288e:	7afb      	ldrb	r3, [r7, #11]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d10b      	bne.n	80028ac <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	069b      	lsls	r3, r3, #26
 800289e:	401a      	ands	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	069b      	lsls	r3, r3, #26
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80028a8:	2301      	movs	r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80028ac:	68fb      	ldr	r3, [r7, #12]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028cc:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <__NVIC_SetPriorityGrouping+0x40>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ea:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <__NVIC_SetPriorityGrouping+0x40>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	60d3      	str	r3, [r2, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00
 8002900:	05fa0000 	.word	0x05fa0000

08002904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002908:	4b04      	ldr	r3, [pc, #16]	@ (800291c <__NVIC_GetPriorityGrouping+0x18>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	f003 0307 	and.w	r3, r3, #7
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	db0b      	blt.n	800294a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	4907      	ldr	r1, [pc, #28]	@ (8002958 <__NVIC_EnableIRQ+0x38>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2001      	movs	r0, #1
 8002942:	fa00 f202 	lsl.w	r2, r0, r2
 8002946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100

0800295c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	db0a      	blt.n	8002986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	490c      	ldr	r1, [pc, #48]	@ (80029a8 <__NVIC_SetPriority+0x4c>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	440b      	add	r3, r1
 8002980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002984:	e00a      	b.n	800299c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4908      	ldr	r1, [pc, #32]	@ (80029ac <__NVIC_SetPriority+0x50>)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3b04      	subs	r3, #4
 8002994:	0112      	lsls	r2, r2, #4
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	440b      	add	r3, r1
 800299a:	761a      	strb	r2, [r3, #24]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000e100 	.word	0xe000e100
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	@ 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f1c3 0307 	rsb	r3, r3, #7
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	bf28      	it	cs
 80029ce:	2304      	movcs	r3, #4
 80029d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3304      	adds	r3, #4
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d902      	bls.n	80029e0 <NVIC_EncodePriority+0x30>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3b03      	subs	r3, #3
 80029de:	e000      	b.n	80029e2 <NVIC_EncodePriority+0x32>
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	401a      	ands	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43d9      	mvns	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	4313      	orrs	r3, r2
         );
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3724      	adds	r7, #36	@ 0x24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ff4c 	bl	80028bc <__NVIC_SetPriorityGrouping>
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a3e:	f7ff ff61 	bl	8002904 <__NVIC_GetPriorityGrouping>
 8002a42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	6978      	ldr	r0, [r7, #20]
 8002a4a:	f7ff ffb1 	bl	80029b0 <NVIC_EncodePriority>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ff80 	bl	800295c <__NVIC_SetPriority>
}
 8002a5c:	bf00      	nop
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff54 	bl	8002920 <__NVIC_EnableIRQ>
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	@ 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e175      	b.n	8002d8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 8164 	bne.w	8002d86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d005      	beq.n	8002ad6 <HAL_GPIO_Init+0x56>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d130      	bne.n	8002b38 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 0201 	and.w	r2, r3, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d017      	beq.n	8002b74 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d123      	bne.n	8002bc8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	08da      	lsrs	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	69b9      	ldr	r1, [r7, #24]
 8002bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80be 	beq.w	8002d86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	4b66      	ldr	r3, [pc, #408]	@ (8002da4 <HAL_GPIO_Init+0x324>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0e:	4a65      	ldr	r2, [pc, #404]	@ (8002da4 <HAL_GPIO_Init+0x324>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c16:	4b63      	ldr	r3, [pc, #396]	@ (8002da4 <HAL_GPIO_Init+0x324>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c22:	4a61      	ldr	r2, [pc, #388]	@ (8002da8 <HAL_GPIO_Init+0x328>)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	220f      	movs	r2, #15
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a58      	ldr	r2, [pc, #352]	@ (8002dac <HAL_GPIO_Init+0x32c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d037      	beq.n	8002cbe <HAL_GPIO_Init+0x23e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a57      	ldr	r2, [pc, #348]	@ (8002db0 <HAL_GPIO_Init+0x330>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d031      	beq.n	8002cba <HAL_GPIO_Init+0x23a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a56      	ldr	r2, [pc, #344]	@ (8002db4 <HAL_GPIO_Init+0x334>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d02b      	beq.n	8002cb6 <HAL_GPIO_Init+0x236>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a55      	ldr	r2, [pc, #340]	@ (8002db8 <HAL_GPIO_Init+0x338>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d025      	beq.n	8002cb2 <HAL_GPIO_Init+0x232>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a54      	ldr	r2, [pc, #336]	@ (8002dbc <HAL_GPIO_Init+0x33c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01f      	beq.n	8002cae <HAL_GPIO_Init+0x22e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a53      	ldr	r2, [pc, #332]	@ (8002dc0 <HAL_GPIO_Init+0x340>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d019      	beq.n	8002caa <HAL_GPIO_Init+0x22a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a52      	ldr	r2, [pc, #328]	@ (8002dc4 <HAL_GPIO_Init+0x344>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <HAL_GPIO_Init+0x226>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a51      	ldr	r2, [pc, #324]	@ (8002dc8 <HAL_GPIO_Init+0x348>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00d      	beq.n	8002ca2 <HAL_GPIO_Init+0x222>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a50      	ldr	r2, [pc, #320]	@ (8002dcc <HAL_GPIO_Init+0x34c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <HAL_GPIO_Init+0x21e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4f      	ldr	r2, [pc, #316]	@ (8002dd0 <HAL_GPIO_Init+0x350>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d101      	bne.n	8002c9a <HAL_GPIO_Init+0x21a>
 8002c96:	2309      	movs	r3, #9
 8002c98:	e012      	b.n	8002cc0 <HAL_GPIO_Init+0x240>
 8002c9a:	230a      	movs	r3, #10
 8002c9c:	e010      	b.n	8002cc0 <HAL_GPIO_Init+0x240>
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	e00e      	b.n	8002cc0 <HAL_GPIO_Init+0x240>
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	e00c      	b.n	8002cc0 <HAL_GPIO_Init+0x240>
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	e00a      	b.n	8002cc0 <HAL_GPIO_Init+0x240>
 8002caa:	2305      	movs	r3, #5
 8002cac:	e008      	b.n	8002cc0 <HAL_GPIO_Init+0x240>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x240>
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e004      	b.n	8002cc0 <HAL_GPIO_Init+0x240>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_Init+0x240>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_GPIO_Init+0x240>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f002 0203 	and.w	r2, r2, #3
 8002cc6:	0092      	lsls	r2, r2, #2
 8002cc8:	4093      	lsls	r3, r2
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cd0:	4935      	ldr	r1, [pc, #212]	@ (8002da8 <HAL_GPIO_Init+0x328>)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cde:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd4 <HAL_GPIO_Init+0x354>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d02:	4a34      	ldr	r2, [pc, #208]	@ (8002dd4 <HAL_GPIO_Init+0x354>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d08:	4b32      	ldr	r3, [pc, #200]	@ (8002dd4 <HAL_GPIO_Init+0x354>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d2c:	4a29      	ldr	r2, [pc, #164]	@ (8002dd4 <HAL_GPIO_Init+0x354>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d32:	4b28      	ldr	r3, [pc, #160]	@ (8002dd4 <HAL_GPIO_Init+0x354>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d56:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd4 <HAL_GPIO_Init+0x354>)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <HAL_GPIO_Init+0x354>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d80:	4a14      	ldr	r2, [pc, #80]	@ (8002dd4 <HAL_GPIO_Init+0x354>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b0f      	cmp	r3, #15
 8002d90:	f67f ae86 	bls.w	8002aa0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3724      	adds	r7, #36	@ 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40013800 	.word	0x40013800
 8002dac:	40020000 	.word	0x40020000
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40020800 	.word	0x40020800
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40021400 	.word	0x40021400
 8002dc4:	40021800 	.word	0x40021800
 8002dc8:	40021c00 	.word	0x40021c00
 8002dcc:	40022000 	.word	0x40022000
 8002dd0:	40022400 	.word	0x40022400
 8002dd4:	40013c00 	.word	0x40013c00

08002dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e001      	b.n	8002dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e24:	e003      	b.n	8002e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	041a      	lsls	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	619a      	str	r2, [r3, #24]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e29b      	b.n	800338a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8087 	beq.w	8002f6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e60:	4b96      	ldr	r3, [pc, #600]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d00c      	beq.n	8002e86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6c:	4b93      	ldr	r3, [pc, #588]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d112      	bne.n	8002e9e <HAL_RCC_OscConfig+0x62>
 8002e78:	4b90      	ldr	r3, [pc, #576]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e84:	d10b      	bne.n	8002e9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e86:	4b8d      	ldr	r3, [pc, #564]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d06c      	beq.n	8002f6c <HAL_RCC_OscConfig+0x130>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d168      	bne.n	8002f6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e275      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x7a>
 8002ea8:	4b84      	ldr	r3, [pc, #528]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a83      	ldr	r2, [pc, #524]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	e02e      	b.n	8002f14 <HAL_RCC_OscConfig+0xd8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x9c>
 8002ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7e      	ldr	r2, [pc, #504]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b7c      	ldr	r3, [pc, #496]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a7b      	ldr	r2, [pc, #492]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ed0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e01d      	b.n	8002f14 <HAL_RCC_OscConfig+0xd8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0xc0>
 8002ee2:	4b76      	ldr	r3, [pc, #472]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b73      	ldr	r3, [pc, #460]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a72      	ldr	r2, [pc, #456]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e00b      	b.n	8002f14 <HAL_RCC_OscConfig+0xd8>
 8002efc:	4b6f      	ldr	r3, [pc, #444]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a6e      	ldr	r2, [pc, #440]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b6c      	ldr	r3, [pc, #432]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6b      	ldr	r2, [pc, #428]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fe60 	bl	8001be0 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f24:	f7fe fe5c 	bl	8001be0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	@ 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e229      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b61      	ldr	r3, [pc, #388]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0xe8>
 8002f42:	e014      	b.n	8002f6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fe4c 	bl	8001be0 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fe fe48 	bl	8001be0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	@ 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e215      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5e:	4b57      	ldr	r3, [pc, #348]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x110>
 8002f6a:	e000      	b.n	8002f6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d069      	beq.n	800304e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f7a:	4b50      	ldr	r3, [pc, #320]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00b      	beq.n	8002f9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f86:	4b4d      	ldr	r3, [pc, #308]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d11c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x190>
 8002f92:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d116      	bne.n	8002fcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9e:	4b47      	ldr	r3, [pc, #284]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x17a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e1e9      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b41      	ldr	r3, [pc, #260]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	493d      	ldr	r1, [pc, #244]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	e040      	b.n	800304e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d023      	beq.n	800301c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd4:	4b39      	ldr	r3, [pc, #228]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a38      	ldr	r2, [pc, #224]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fdfe 	bl	8001be0 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fdfa 	bl	8001be0 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e1c7      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	4b30      	ldr	r3, [pc, #192]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b2d      	ldr	r3, [pc, #180]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4929      	ldr	r1, [pc, #164]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
 800301a:	e018      	b.n	800304e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301c:	4b27      	ldr	r3, [pc, #156]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a26      	ldr	r2, [pc, #152]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe fdda 	bl	8001be0 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003030:	f7fe fdd6 	bl	8001be0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1a3      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	4b1e      	ldr	r3, [pc, #120]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d038      	beq.n	80030cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d019      	beq.n	8003096 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003062:	4b16      	ldr	r3, [pc, #88]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8003064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003066:	4a15      	ldr	r2, [pc, #84]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fe fdb7 	bl	8001be0 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003076:	f7fe fdb3 	bl	8001be0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e180      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003088:	4b0c      	ldr	r3, [pc, #48]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 800308a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x23a>
 8003094:	e01a      	b.n	80030cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003096:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 8003098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800309a:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <HAL_RCC_OscConfig+0x280>)
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a2:	f7fe fd9d 	bl	8001be0 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030aa:	f7fe fd99 	bl	8001be0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d903      	bls.n	80030c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e166      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
 80030bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c0:	4b92      	ldr	r3, [pc, #584]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80030c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ee      	bne.n	80030aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80a4 	beq.w	8003222 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	4b8c      	ldr	r3, [pc, #560]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	4b89      	ldr	r3, [pc, #548]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	4a88      	ldr	r2, [pc, #544]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80030ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f2:	4b86      	ldr	r3, [pc, #536]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fe:	2301      	movs	r3, #1
 8003100:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003102:	4b83      	ldr	r3, [pc, #524]	@ (8003310 <HAL_RCC_OscConfig+0x4d4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d118      	bne.n	8003140 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800310e:	4b80      	ldr	r3, [pc, #512]	@ (8003310 <HAL_RCC_OscConfig+0x4d4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a7f      	ldr	r2, [pc, #508]	@ (8003310 <HAL_RCC_OscConfig+0x4d4>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311a:	f7fe fd61 	bl	8001be0 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003122:	f7fe fd5d 	bl	8001be0 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b64      	cmp	r3, #100	@ 0x64
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e12a      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003134:	4b76      	ldr	r3, [pc, #472]	@ (8003310 <HAL_RCC_OscConfig+0x4d4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x31a>
 8003148:	4b70      	ldr	r3, [pc, #448]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314c:	4a6f      	ldr	r2, [pc, #444]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6713      	str	r3, [r2, #112]	@ 0x70
 8003154:	e02d      	b.n	80031b2 <HAL_RCC_OscConfig+0x376>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x33c>
 800315e:	4b6b      	ldr	r3, [pc, #428]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003162:	4a6a      	ldr	r2, [pc, #424]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6713      	str	r3, [r2, #112]	@ 0x70
 800316a:	4b68      	ldr	r3, [pc, #416]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316e:	4a67      	ldr	r2, [pc, #412]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	6713      	str	r3, [r2, #112]	@ 0x70
 8003176:	e01c      	b.n	80031b2 <HAL_RCC_OscConfig+0x376>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b05      	cmp	r3, #5
 800317e:	d10c      	bne.n	800319a <HAL_RCC_OscConfig+0x35e>
 8003180:	4b62      	ldr	r3, [pc, #392]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003184:	4a61      	ldr	r2, [pc, #388]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6713      	str	r3, [r2, #112]	@ 0x70
 800318c:	4b5f      	ldr	r3, [pc, #380]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003190:	4a5e      	ldr	r2, [pc, #376]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	@ 0x70
 8003198:	e00b      	b.n	80031b2 <HAL_RCC_OscConfig+0x376>
 800319a:	4b5c      	ldr	r3, [pc, #368]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319e:	4a5b      	ldr	r2, [pc, #364]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a6:	4b59      	ldr	r3, [pc, #356]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031aa:	4a58      	ldr	r2, [pc, #352]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	f023 0304 	bic.w	r3, r3, #4
 80031b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d015      	beq.n	80031e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fe fd11 	bl	8001be0 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fe fd0d 	bl	8001be0 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e0d8      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d8:	4b4c      	ldr	r3, [pc, #304]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ee      	beq.n	80031c2 <HAL_RCC_OscConfig+0x386>
 80031e4:	e014      	b.n	8003210 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fe fcfb 	bl	8001be0 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe fcf7 	bl	8001be0 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0c2      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003204:	4b41      	ldr	r3, [pc, #260]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1ee      	bne.n	80031ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003216:	4b3d      	ldr	r3, [pc, #244]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	4a3c      	ldr	r2, [pc, #240]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003220:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80ae 	beq.w	8003388 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800322c:	4b37      	ldr	r3, [pc, #220]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 030c 	and.w	r3, r3, #12
 8003234:	2b08      	cmp	r3, #8
 8003236:	d06d      	beq.n	8003314 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d14b      	bne.n	80032d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003240:	4b32      	ldr	r3, [pc, #200]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a31      	ldr	r2, [pc, #196]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003246:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800324a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fe fcc8 	bl	8001be0 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003254:	f7fe fcc4 	bl	8001be0 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e091      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	4b29      	ldr	r3, [pc, #164]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	3b01      	subs	r3, #1
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	071b      	lsls	r3, r3, #28
 800329e:	491b      	ldr	r1, [pc, #108]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a4:	4b19      	ldr	r3, [pc, #100]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a18      	ldr	r2, [pc, #96]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fe fc96 	bl	8001be0 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fe fc92 	bl	8001be0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e05f      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b10      	ldr	r3, [pc, #64]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x47c>
 80032d6:	e057      	b.n	8003388 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d8:	4b0c      	ldr	r3, [pc, #48]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0b      	ldr	r2, [pc, #44]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 80032de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fc7c 	bl	8001be0 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe fc78 	bl	8001be0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e045      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b03      	ldr	r3, [pc, #12]	@ (800330c <HAL_RCC_OscConfig+0x4d0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x4b0>
 800330a:	e03d      	b.n	8003388 <HAL_RCC_OscConfig+0x54c>
 800330c:	40023800 	.word	0x40023800
 8003310:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003314:	4b1f      	ldr	r3, [pc, #124]	@ (8003394 <HAL_RCC_OscConfig+0x558>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d030      	beq.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d129      	bne.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d122      	bne.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800334a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800334c:	4293      	cmp	r3, r2
 800334e:	d119      	bne.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d10f      	bne.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d107      	bne.n	8003384 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800

08003398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0d0      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b6a      	ldr	r3, [pc, #424]	@ (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d910      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b67      	ldr	r3, [pc, #412]	@ (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 020f 	bic.w	r2, r3, #15
 80033c6:	4965      	ldr	r1, [pc, #404]	@ (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b63      	ldr	r3, [pc, #396]	@ (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0b8      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f8:	4b59      	ldr	r3, [pc, #356]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a58      	ldr	r2, [pc, #352]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 80033fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003402:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003410:	4b53      	ldr	r3, [pc, #332]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a52      	ldr	r2, [pc, #328]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003416:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800341a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b50      	ldr	r3, [pc, #320]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	494d      	ldr	r1, [pc, #308]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d040      	beq.n	80034bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b47      	ldr	r3, [pc, #284]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d115      	bne.n	800347a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b41      	ldr	r3, [pc, #260]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e073      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b3d      	ldr	r3, [pc, #244]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e06b      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347a:	4b39      	ldr	r3, [pc, #228]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4936      	ldr	r1, [pc, #216]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	4313      	orrs	r3, r2
 800348a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348c:	f7fe fba8 	bl	8001be0 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	e00a      	b.n	80034aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003494:	f7fe fba4 	bl	8001be0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e053      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 020c 	and.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d1eb      	bne.n	8003494 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034bc:	4b27      	ldr	r3, [pc, #156]	@ (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d210      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b24      	ldr	r3, [pc, #144]	@ (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 020f 	bic.w	r2, r3, #15
 80034d2:	4922      	ldr	r1, [pc, #136]	@ (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b20      	ldr	r3, [pc, #128]	@ (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e032      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4916      	ldr	r1, [pc, #88]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003516:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490e      	ldr	r1, [pc, #56]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800352a:	f000 f821 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800352e:	4602      	mov	r2, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	490a      	ldr	r1, [pc, #40]	@ (8003564 <HAL_RCC_ClockConfig+0x1cc>)
 800353c:	5ccb      	ldrb	r3, [r1, r3]
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	4a09      	ldr	r2, [pc, #36]	@ (8003568 <HAL_RCC_ClockConfig+0x1d0>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003546:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_RCC_ClockConfig+0x1d4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fa42 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023c00 	.word	0x40023c00
 8003560:	40023800 	.word	0x40023800
 8003564:	08007208 	.word	0x08007208
 8003568:	20000014 	.word	0x20000014
 800356c:	20000018 	.word	0x20000018

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b090      	sub	sp, #64	@ 0x40
 8003576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	637b      	str	r3, [r7, #52]	@ 0x34
 800357c:	2300      	movs	r3, #0
 800357e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003580:	2300      	movs	r3, #0
 8003582:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003588:	4b59      	ldr	r3, [pc, #356]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d00d      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003594:	2b08      	cmp	r3, #8
 8003596:	f200 80a1 	bhi.w	80036dc <HAL_RCC_GetSysClockFreq+0x16c>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x34>
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x3a>
 80035a2:	e09b      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b53      	ldr	r3, [pc, #332]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80035a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035a8:	e09b      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035aa:	4b53      	ldr	r3, [pc, #332]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ae:	e098      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b0:	4b4f      	ldr	r3, [pc, #316]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035ba:	4b4d      	ldr	r3, [pc, #308]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d028      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c6:	4b4a      	ldr	r3, [pc, #296]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	2200      	movs	r2, #0
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035d8:	2100      	movs	r1, #0
 80035da:	4b47      	ldr	r3, [pc, #284]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035dc:	fb03 f201 	mul.w	r2, r3, r1
 80035e0:	2300      	movs	r3, #0
 80035e2:	fb00 f303 	mul.w	r3, r0, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	4a43      	ldr	r2, [pc, #268]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035ea:	fba0 1202 	umull	r1, r2, r0, r2
 80035ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035f0:	460a      	mov	r2, r1
 80035f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80035f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f6:	4413      	add	r3, r2
 80035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fc:	2200      	movs	r2, #0
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	61fa      	str	r2, [r7, #28]
 8003602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003606:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800360a:	f7fc fe19 	bl	8000240 <__aeabi_uldivmod>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4613      	mov	r3, r2
 8003614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003616:	e053      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003618:	4b35      	ldr	r3, [pc, #212]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	2200      	movs	r2, #0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	617a      	str	r2, [r7, #20]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800362a:	f04f 0b00 	mov.w	fp, #0
 800362e:	4652      	mov	r2, sl
 8003630:	465b      	mov	r3, fp
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f04f 0100 	mov.w	r1, #0
 800363a:	0159      	lsls	r1, r3, #5
 800363c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003640:	0150      	lsls	r0, r2, #5
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	ebb2 080a 	subs.w	r8, r2, sl
 800364a:	eb63 090b 	sbc.w	r9, r3, fp
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800365a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800365e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003662:	ebb2 0408 	subs.w	r4, r2, r8
 8003666:	eb63 0509 	sbc.w	r5, r3, r9
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	00eb      	lsls	r3, r5, #3
 8003674:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003678:	00e2      	lsls	r2, r4, #3
 800367a:	4614      	mov	r4, r2
 800367c:	461d      	mov	r5, r3
 800367e:	eb14 030a 	adds.w	r3, r4, sl
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	eb45 030b 	adc.w	r3, r5, fp
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003696:	4629      	mov	r1, r5
 8003698:	028b      	lsls	r3, r1, #10
 800369a:	4621      	mov	r1, r4
 800369c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036a0:	4621      	mov	r1, r4
 80036a2:	028a      	lsls	r2, r1, #10
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036aa:	2200      	movs	r2, #0
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	60fa      	str	r2, [r7, #12]
 80036b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b4:	f7fc fdc4 	bl	8000240 <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	3301      	adds	r3, #1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80036d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036da:	e002      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80036de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3740      	adds	r7, #64	@ 0x40
 80036e8:	46bd      	mov	sp, r7
 80036ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	017d7840 	.word	0x017d7840

080036fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <HAL_RCC_GetHCLKFreq+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000014 	.word	0x20000014

08003714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003718:	f7ff fff0 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0a9b      	lsrs	r3, r3, #10
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4903      	ldr	r1, [pc, #12]	@ (8003738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40023800 	.word	0x40023800
 8003738:	08007218 	.word	0x08007218

0800373c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	220f      	movs	r2, #15
 800374a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800374c:	4b12      	ldr	r3, [pc, #72]	@ (8003798 <HAL_RCC_GetClockConfig+0x5c>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0203 	and.w	r2, r3, #3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003758:	4b0f      	ldr	r3, [pc, #60]	@ (8003798 <HAL_RCC_GetClockConfig+0x5c>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003764:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <HAL_RCC_GetClockConfig+0x5c>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003770:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <HAL_RCC_GetClockConfig+0x5c>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	08db      	lsrs	r3, r3, #3
 8003776:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800377e:	4b07      	ldr	r3, [pc, #28]	@ (800379c <HAL_RCC_GetClockConfig+0x60>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 020f 	and.w	r2, r3, #15
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	601a      	str	r2, [r3, #0]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	40023c00 	.word	0x40023c00

080037a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e049      	b.n	8003846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fe f8de 	bl	8001988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f000 fda8 	bl	8004334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d001      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e054      	b.n	8003912 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a26      	ldr	r2, [pc, #152]	@ (8003920 <HAL_TIM_Base_Start_IT+0xd0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d022      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003892:	d01d      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a22      	ldr	r2, [pc, #136]	@ (8003924 <HAL_TIM_Base_Start_IT+0xd4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d018      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a21      	ldr	r2, [pc, #132]	@ (8003928 <HAL_TIM_Base_Start_IT+0xd8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1f      	ldr	r2, [pc, #124]	@ (800392c <HAL_TIM_Base_Start_IT+0xdc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003930 <HAL_TIM_Base_Start_IT+0xe0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003934 <HAL_TIM_Base_Start_IT+0xe4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003938 <HAL_TIM_Base_Start_IT+0xe8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d115      	bne.n	80038fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	4b19      	ldr	r3, [pc, #100]	@ (800393c <HAL_TIM_Base_Start_IT+0xec>)
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d015      	beq.n	800390e <HAL_TIM_Base_Start_IT+0xbe>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e8:	d011      	beq.n	800390e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0201 	orr.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fa:	e008      	b.n	800390e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e000      	b.n	8003910 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40010000 	.word	0x40010000
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800
 800392c:	40000c00 	.word	0x40000c00
 8003930:	40010400 	.word	0x40010400
 8003934:	40014000 	.word	0x40014000
 8003938:	40001800 	.word	0x40001800
 800393c:	00010007 	.word	0x00010007

08003940 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e049      	b.n	80039e6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f841 	bl	80039ee <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 fcd8 	bl	8004334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_TIM_OC_Start_IT+0x28>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	bf14      	ite	ne
 8003a24:	2301      	movne	r3, #1
 8003a26:	2300      	moveq	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e03c      	b.n	8003aa6 <HAL_TIM_OC_Start_IT+0xa2>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d109      	bne.n	8003a46 <HAL_TIM_OC_Start_IT+0x42>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	bf14      	ite	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	2300      	moveq	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	e02f      	b.n	8003aa6 <HAL_TIM_OC_Start_IT+0xa2>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d109      	bne.n	8003a60 <HAL_TIM_OC_Start_IT+0x5c>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	bf14      	ite	ne
 8003a58:	2301      	movne	r3, #1
 8003a5a:	2300      	moveq	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e022      	b.n	8003aa6 <HAL_TIM_OC_Start_IT+0xa2>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b0c      	cmp	r3, #12
 8003a64:	d109      	bne.n	8003a7a <HAL_TIM_OC_Start_IT+0x76>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	bf14      	ite	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	2300      	moveq	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	e015      	b.n	8003aa6 <HAL_TIM_OC_Start_IT+0xa2>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d109      	bne.n	8003a94 <HAL_TIM_OC_Start_IT+0x90>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e008      	b.n	8003aa6 <HAL_TIM_OC_Start_IT+0xa2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e0dd      	b.n	8003c6a <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d104      	bne.n	8003abe <HAL_TIM_OC_Start_IT+0xba>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003abc:	e023      	b.n	8003b06 <HAL_TIM_OC_Start_IT+0x102>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d104      	bne.n	8003ace <HAL_TIM_OC_Start_IT+0xca>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003acc:	e01b      	b.n	8003b06 <HAL_TIM_OC_Start_IT+0x102>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d104      	bne.n	8003ade <HAL_TIM_OC_Start_IT+0xda>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003adc:	e013      	b.n	8003b06 <HAL_TIM_OC_Start_IT+0x102>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b0c      	cmp	r3, #12
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_OC_Start_IT+0xea>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003aec:	e00b      	b.n	8003b06 <HAL_TIM_OC_Start_IT+0x102>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d104      	bne.n	8003afe <HAL_TIM_OC_Start_IT+0xfa>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003afc:	e003      	b.n	8003b06 <HAL_TIM_OC_Start_IT+0x102>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	d841      	bhi.n	8003b90 <HAL_TIM_OC_Start_IT+0x18c>
 8003b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b14 <HAL_TIM_OC_Start_IT+0x110>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b49 	.word	0x08003b49
 8003b18:	08003b91 	.word	0x08003b91
 8003b1c:	08003b91 	.word	0x08003b91
 8003b20:	08003b91 	.word	0x08003b91
 8003b24:	08003b5b 	.word	0x08003b5b
 8003b28:	08003b91 	.word	0x08003b91
 8003b2c:	08003b91 	.word	0x08003b91
 8003b30:	08003b91 	.word	0x08003b91
 8003b34:	08003b6d 	.word	0x08003b6d
 8003b38:	08003b91 	.word	0x08003b91
 8003b3c:	08003b91 	.word	0x08003b91
 8003b40:	08003b91 	.word	0x08003b91
 8003b44:	08003b7f 	.word	0x08003b7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0202 	orr.w	r2, r2, #2
 8003b56:	60da      	str	r2, [r3, #12]
      break;
 8003b58:	e01d      	b.n	8003b96 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0204 	orr.w	r2, r2, #4
 8003b68:	60da      	str	r2, [r3, #12]
      break;
 8003b6a:	e014      	b.n	8003b96 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0208 	orr.w	r2, r2, #8
 8003b7a:	60da      	str	r2, [r3, #12]
      break;
 8003b7c:	e00b      	b.n	8003b96 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0210 	orr.w	r2, r2, #16
 8003b8c:	60da      	str	r2, [r3, #12]
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      break;
 8003b94:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d165      	bne.n	8003c68 <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	6839      	ldr	r1, [r7, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 ff5d 	bl	8004a64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a31      	ldr	r2, [pc, #196]	@ (8003c74 <HAL_TIM_OC_Start_IT+0x270>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_TIM_OC_Start_IT+0x1ba>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8003c78 <HAL_TIM_OC_Start_IT+0x274>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_OC_Start_IT+0x1be>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <HAL_TIM_OC_Start_IT+0x1c0>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bd6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	@ (8003c74 <HAL_TIM_OC_Start_IT+0x270>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d022      	beq.n	8003c28 <HAL_TIM_OC_Start_IT+0x224>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bea:	d01d      	beq.n	8003c28 <HAL_TIM_OC_Start_IT+0x224>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a22      	ldr	r2, [pc, #136]	@ (8003c7c <HAL_TIM_OC_Start_IT+0x278>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d018      	beq.n	8003c28 <HAL_TIM_OC_Start_IT+0x224>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a21      	ldr	r2, [pc, #132]	@ (8003c80 <HAL_TIM_OC_Start_IT+0x27c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <HAL_TIM_OC_Start_IT+0x224>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1f      	ldr	r2, [pc, #124]	@ (8003c84 <HAL_TIM_OC_Start_IT+0x280>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00e      	beq.n	8003c28 <HAL_TIM_OC_Start_IT+0x224>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003c78 <HAL_TIM_OC_Start_IT+0x274>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_TIM_OC_Start_IT+0x224>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1b      	ldr	r2, [pc, #108]	@ (8003c88 <HAL_TIM_OC_Start_IT+0x284>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIM_OC_Start_IT+0x224>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1a      	ldr	r2, [pc, #104]	@ (8003c8c <HAL_TIM_OC_Start_IT+0x288>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d115      	bne.n	8003c54 <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	4b18      	ldr	r3, [pc, #96]	@ (8003c90 <HAL_TIM_OC_Start_IT+0x28c>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d015      	beq.n	8003c66 <HAL_TIM_OC_Start_IT+0x262>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c40:	d011      	beq.n	8003c66 <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c52:	e008      	b.n	8003c66 <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e000      	b.n	8003c68 <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c66:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40010400 	.word	0x40010400
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40000800 	.word	0x40000800
 8003c84:	40000c00 	.word	0x40000c00
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40001800 	.word	0x40001800
 8003c90:	00010007 	.word	0x00010007

08003c94 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b0c      	cmp	r3, #12
 8003ca6:	d841      	bhi.n	8003d2c <HAL_TIM_OC_Stop_IT+0x98>
 8003ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <HAL_TIM_OC_Stop_IT+0x1c>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	08003d2d 	.word	0x08003d2d
 8003cb8:	08003d2d 	.word	0x08003d2d
 8003cbc:	08003d2d 	.word	0x08003d2d
 8003cc0:	08003cf7 	.word	0x08003cf7
 8003cc4:	08003d2d 	.word	0x08003d2d
 8003cc8:	08003d2d 	.word	0x08003d2d
 8003ccc:	08003d2d 	.word	0x08003d2d
 8003cd0:	08003d09 	.word	0x08003d09
 8003cd4:	08003d2d 	.word	0x08003d2d
 8003cd8:	08003d2d 	.word	0x08003d2d
 8003cdc:	08003d2d 	.word	0x08003d2d
 8003ce0:	08003d1b 	.word	0x08003d1b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0202 	bic.w	r2, r2, #2
 8003cf2:	60da      	str	r2, [r3, #12]
      break;
 8003cf4:	e01d      	b.n	8003d32 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0204 	bic.w	r2, r2, #4
 8003d04:	60da      	str	r2, [r3, #12]
      break;
 8003d06:	e014      	b.n	8003d32 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0208 	bic.w	r2, r2, #8
 8003d16:	60da      	str	r2, [r3, #12]
      break;
 8003d18:	e00b      	b.n	8003d32 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0210 	bic.w	r2, r2, #16
 8003d28:	60da      	str	r2, [r3, #12]
      break;
 8003d2a:	e002      	b.n	8003d32 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d30:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d171      	bne.n	8003e1c <HAL_TIM_OC_Stop_IT+0x188>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	6839      	ldr	r1, [r7, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fe8f 	bl	8004a64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a37      	ldr	r2, [pc, #220]	@ (8003e28 <HAL_TIM_OC_Stop_IT+0x194>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_TIM_OC_Stop_IT+0xc6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a35      	ldr	r2, [pc, #212]	@ (8003e2c <HAL_TIM_OC_Stop_IT+0x198>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_OC_Stop_IT+0xca>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_TIM_OC_Stop_IT+0xcc>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d017      	beq.n	8003d94 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a1a      	ldr	r2, [r3, #32]
 8003d6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10f      	bne.n	8003d94 <HAL_TIM_OC_Stop_IT+0x100>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6a1a      	ldr	r2, [r3, #32]
 8003d7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <HAL_TIM_OC_Stop_IT+0x100>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d92:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10f      	bne.n	8003dc4 <HAL_TIM_OC_Stop_IT+0x130>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6a1a      	ldr	r2, [r3, #32]
 8003daa:	f240 4344 	movw	r3, #1092	@ 0x444
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d107      	bne.n	8003dc4 <HAL_TIM_OC_Stop_IT+0x130>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0201 	bic.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <HAL_TIM_OC_Stop_IT+0x140>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dd2:	e023      	b.n	8003e1c <HAL_TIM_OC_Stop_IT+0x188>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d104      	bne.n	8003de4 <HAL_TIM_OC_Stop_IT+0x150>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003de2:	e01b      	b.n	8003e1c <HAL_TIM_OC_Stop_IT+0x188>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d104      	bne.n	8003df4 <HAL_TIM_OC_Stop_IT+0x160>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003df2:	e013      	b.n	8003e1c <HAL_TIM_OC_Stop_IT+0x188>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d104      	bne.n	8003e04 <HAL_TIM_OC_Stop_IT+0x170>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e02:	e00b      	b.n	8003e1c <HAL_TIM_OC_Stop_IT+0x188>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d104      	bne.n	8003e14 <HAL_TIM_OC_Stop_IT+0x180>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e12:	e003      	b.n	8003e1c <HAL_TIM_OC_Stop_IT+0x188>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40010400 	.word	0x40010400

08003e30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d122      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d11b      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0202 	mvn.w	r2, #2
 8003e5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa40 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 8003e78:	e005      	b.n	8003e86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fc fd60 	bl	8000940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fa43 	bl	800430c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d122      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0204 	mvn.w	r2, #4
 8003eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fa16 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fc fd36 	bl	8000940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fa19 	bl	800430c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d122      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d11b      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0208 	mvn.w	r2, #8
 8003f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2204      	movs	r2, #4
 8003f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f9ec 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 8003f20:	e005      	b.n	8003f2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fc fd0c 	bl	8000940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f9ef 	bl	800430c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0310 	and.w	r3, r3, #16
 8003f3e:	2b10      	cmp	r3, #16
 8003f40:	d122      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d11b      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0210 	mvn.w	r2, #16
 8003f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f9c2 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 8003f74:	e005      	b.n	8003f82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fc fce2 	bl	8000940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f9c5 	bl	800430c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d10e      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d107      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0201 	mvn.w	r2, #1
 8003fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fbd8 	bl	8001764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fbe:	2b80      	cmp	r3, #128	@ 0x80
 8003fc0:	d10e      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fcc:	2b80      	cmp	r3, #128	@ 0x80
 8003fce:	d107      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fe7e 	bl	8004cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fee:	d10e      	bne.n	800400e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b80      	cmp	r3, #128	@ 0x80
 8003ffc:	d107      	bne.n	800400e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fe71 	bl	8004cf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004018:	2b40      	cmp	r3, #64	@ 0x40
 800401a:	d10e      	bne.n	800403a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004026:	2b40      	cmp	r3, #64	@ 0x40
 8004028:	d107      	bne.n	800403a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f973 	bl	8004320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b20      	cmp	r3, #32
 8004046:	d10e      	bne.n	8004066 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b20      	cmp	r3, #32
 8004054:	d107      	bne.n	8004066 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f06f 0220 	mvn.w	r2, #32
 800405e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fe31 	bl	8004cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_TIM_OC_ConfigChannel+0x1e>
 800408a:	2302      	movs	r3, #2
 800408c:	e066      	b.n	800415c <HAL_TIM_OC_ConfigChannel+0xec>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b14      	cmp	r3, #20
 800409a:	d857      	bhi.n	800414c <HAL_TIM_OC_ConfigChannel+0xdc>
 800409c:	a201      	add	r2, pc, #4	@ (adr r2, 80040a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040f9 	.word	0x080040f9
 80040a8:	0800414d 	.word	0x0800414d
 80040ac:	0800414d 	.word	0x0800414d
 80040b0:	0800414d 	.word	0x0800414d
 80040b4:	08004107 	.word	0x08004107
 80040b8:	0800414d 	.word	0x0800414d
 80040bc:	0800414d 	.word	0x0800414d
 80040c0:	0800414d 	.word	0x0800414d
 80040c4:	08004115 	.word	0x08004115
 80040c8:	0800414d 	.word	0x0800414d
 80040cc:	0800414d 	.word	0x0800414d
 80040d0:	0800414d 	.word	0x0800414d
 80040d4:	08004123 	.word	0x08004123
 80040d8:	0800414d 	.word	0x0800414d
 80040dc:	0800414d 	.word	0x0800414d
 80040e0:	0800414d 	.word	0x0800414d
 80040e4:	08004131 	.word	0x08004131
 80040e8:	0800414d 	.word	0x0800414d
 80040ec:	0800414d 	.word	0x0800414d
 80040f0:	0800414d 	.word	0x0800414d
 80040f4:	0800413f 	.word	0x0800413f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f9b8 	bl	8004474 <TIM_OC1_SetConfig>
      break;
 8004104:	e025      	b.n	8004152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fa23 	bl	8004558 <TIM_OC2_SetConfig>
      break;
 8004112:	e01e      	b.n	8004152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fa94 	bl	8004648 <TIM_OC3_SetConfig>
      break;
 8004120:	e017      	b.n	8004152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fb03 	bl	8004734 <TIM_OC4_SetConfig>
      break;
 800412e:	e010      	b.n	8004152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fb54 	bl	80047e4 <TIM_OC5_SetConfig>
      break;
 800413c:	e009      	b.n	8004152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fb9f 	bl	8004888 <TIM_OC6_SetConfig>
      break;
 800414a:	e002      	b.n	8004152 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
      break;
 8004150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800415a:	7dfb      	ldrb	r3, [r7, #23]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_TIM_ConfigClockSource+0x1c>
 800417c:	2302      	movs	r3, #2
 800417e:	e0b4      	b.n	80042ea <HAL_TIM_ConfigClockSource+0x186>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	4b56      	ldr	r3, [pc, #344]	@ (80042f4 <HAL_TIM_ConfigClockSource+0x190>)
 800419c:	4013      	ands	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041b8:	d03e      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0xd4>
 80041ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041be:	f200 8087 	bhi.w	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c6:	f000 8086 	beq.w	80042d6 <HAL_TIM_ConfigClockSource+0x172>
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ce:	d87f      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b70      	cmp	r3, #112	@ 0x70
 80041d2:	d01a      	beq.n	800420a <HAL_TIM_ConfigClockSource+0xa6>
 80041d4:	2b70      	cmp	r3, #112	@ 0x70
 80041d6:	d87b      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b60      	cmp	r3, #96	@ 0x60
 80041da:	d050      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x11a>
 80041dc:	2b60      	cmp	r3, #96	@ 0x60
 80041de:	d877      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b50      	cmp	r3, #80	@ 0x50
 80041e2:	d03c      	beq.n	800425e <HAL_TIM_ConfigClockSource+0xfa>
 80041e4:	2b50      	cmp	r3, #80	@ 0x50
 80041e6:	d873      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b40      	cmp	r3, #64	@ 0x40
 80041ea:	d058      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x13a>
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	d86f      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041f0:	2b30      	cmp	r3, #48	@ 0x30
 80041f2:	d064      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x15a>
 80041f4:	2b30      	cmp	r3, #48	@ 0x30
 80041f6:	d86b      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d060      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x15a>
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d867      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d05c      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x15a>
 8004204:	2b10      	cmp	r3, #16
 8004206:	d05a      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x15a>
 8004208:	e062      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800421a:	f000 fc03 	bl	8004a24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800422c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	609a      	str	r2, [r3, #8]
      break;
 8004236:	e04f      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004248:	f000 fbec 	bl	8004a24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800425a:	609a      	str	r2, [r3, #8]
      break;
 800425c:	e03c      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800426a:	461a      	mov	r2, r3
 800426c:	f000 fb60 	bl	8004930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2150      	movs	r1, #80	@ 0x50
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fbb9 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 800427c:	e02c      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800428a:	461a      	mov	r2, r3
 800428c:	f000 fb7f 	bl	800498e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2160      	movs	r1, #96	@ 0x60
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fba9 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 800429c:	e01c      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042aa:	461a      	mov	r2, r3
 80042ac:	f000 fb40 	bl	8004930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2140      	movs	r1, #64	@ 0x40
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fb99 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 80042bc:	e00c      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f000 fb90 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 80042ce:	e003      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
      break;
 80042d4:	e000      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	fffeff88 	.word	0xfffeff88

080042f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a40      	ldr	r2, [pc, #256]	@ (8004448 <TIM_Base_SetConfig+0x114>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004352:	d00f      	beq.n	8004374 <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a3d      	ldr	r2, [pc, #244]	@ (800444c <TIM_Base_SetConfig+0x118>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00b      	beq.n	8004374 <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a3c      	ldr	r2, [pc, #240]	@ (8004450 <TIM_Base_SetConfig+0x11c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d007      	beq.n	8004374 <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a3b      	ldr	r2, [pc, #236]	@ (8004454 <TIM_Base_SetConfig+0x120>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a3a      	ldr	r2, [pc, #232]	@ (8004458 <TIM_Base_SetConfig+0x124>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d108      	bne.n	8004386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800437a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2f      	ldr	r2, [pc, #188]	@ (8004448 <TIM_Base_SetConfig+0x114>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d02b      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004394:	d027      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2c      	ldr	r2, [pc, #176]	@ (800444c <TIM_Base_SetConfig+0x118>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d023      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004450 <TIM_Base_SetConfig+0x11c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01f      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004454 <TIM_Base_SetConfig+0x120>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01b      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a29      	ldr	r2, [pc, #164]	@ (8004458 <TIM_Base_SetConfig+0x124>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d017      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a28      	ldr	r2, [pc, #160]	@ (800445c <TIM_Base_SetConfig+0x128>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a27      	ldr	r2, [pc, #156]	@ (8004460 <TIM_Base_SetConfig+0x12c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00f      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a26      	ldr	r2, [pc, #152]	@ (8004464 <TIM_Base_SetConfig+0x130>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a25      	ldr	r2, [pc, #148]	@ (8004468 <TIM_Base_SetConfig+0x134>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d007      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a24      	ldr	r2, [pc, #144]	@ (800446c <TIM_Base_SetConfig+0x138>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d003      	beq.n	80043e6 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a23      	ldr	r2, [pc, #140]	@ (8004470 <TIM_Base_SetConfig+0x13c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d108      	bne.n	80043f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a0a      	ldr	r2, [pc, #40]	@ (8004448 <TIM_Base_SetConfig+0x114>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_Base_SetConfig+0xf8>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a0c      	ldr	r2, [pc, #48]	@ (8004458 <TIM_Base_SetConfig+0x124>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d103      	bne.n	8004434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	615a      	str	r2, [r3, #20]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40010400 	.word	0x40010400
 800445c:	40014000 	.word	0x40014000
 8004460:	40014400 	.word	0x40014400
 8004464:	40014800 	.word	0x40014800
 8004468:	40001800 	.word	0x40001800
 800446c:	40001c00 	.word	0x40001c00
 8004470:	40002000 	.word	0x40002000

08004474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4b2b      	ldr	r3, [pc, #172]	@ (800454c <TIM_OC1_SetConfig+0xd8>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 0302 	bic.w	r3, r3, #2
 80044bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a21      	ldr	r2, [pc, #132]	@ (8004550 <TIM_OC1_SetConfig+0xdc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_OC1_SetConfig+0x64>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a20      	ldr	r2, [pc, #128]	@ (8004554 <TIM_OC1_SetConfig+0xe0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10c      	bne.n	80044f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0308 	bic.w	r3, r3, #8
 80044de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 0304 	bic.w	r3, r3, #4
 80044f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <TIM_OC1_SetConfig+0xdc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_OC1_SetConfig+0x8e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a15      	ldr	r2, [pc, #84]	@ (8004554 <TIM_OC1_SetConfig+0xe0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d111      	bne.n	8004526 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	621a      	str	r2, [r3, #32]
}
 8004540:	bf00      	nop
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	fffeff8f 	.word	0xfffeff8f
 8004550:	40010000 	.word	0x40010000
 8004554:	40010400 	.word	0x40010400

08004558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f023 0210 	bic.w	r2, r3, #16
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4b2e      	ldr	r3, [pc, #184]	@ (800463c <TIM_OC2_SetConfig+0xe4>)
 8004584:	4013      	ands	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f023 0320 	bic.w	r3, r3, #32
 80045a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a23      	ldr	r2, [pc, #140]	@ (8004640 <TIM_OC2_SetConfig+0xe8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d003      	beq.n	80045c0 <TIM_OC2_SetConfig+0x68>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a22      	ldr	r2, [pc, #136]	@ (8004644 <TIM_OC2_SetConfig+0xec>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d10d      	bne.n	80045dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <TIM_OC2_SetConfig+0xe8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d003      	beq.n	80045ec <TIM_OC2_SetConfig+0x94>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a17      	ldr	r2, [pc, #92]	@ (8004644 <TIM_OC2_SetConfig+0xec>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d113      	bne.n	8004614 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	feff8fff 	.word	0xfeff8fff
 8004640:	40010000 	.word	0x40010000
 8004644:	40010400 	.word	0x40010400

08004648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4b2d      	ldr	r3, [pc, #180]	@ (8004728 <TIM_OC3_SetConfig+0xe0>)
 8004674:	4013      	ands	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0303 	bic.w	r3, r3, #3
 800467e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a22      	ldr	r2, [pc, #136]	@ (800472c <TIM_OC3_SetConfig+0xe4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_OC3_SetConfig+0x66>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a21      	ldr	r2, [pc, #132]	@ (8004730 <TIM_OC3_SetConfig+0xe8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d10d      	bne.n	80046ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a17      	ldr	r2, [pc, #92]	@ (800472c <TIM_OC3_SetConfig+0xe4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <TIM_OC3_SetConfig+0x92>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a16      	ldr	r2, [pc, #88]	@ (8004730 <TIM_OC3_SetConfig+0xe8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d113      	bne.n	8004702 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	fffeff8f 	.word	0xfffeff8f
 800472c:	40010000 	.word	0x40010000
 8004730:	40010400 	.word	0x40010400

08004734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4b1e      	ldr	r3, [pc, #120]	@ (80047d8 <TIM_OC4_SetConfig+0xa4>)
 8004760:	4013      	ands	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800477e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	031b      	lsls	r3, r3, #12
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a13      	ldr	r2, [pc, #76]	@ (80047dc <TIM_OC4_SetConfig+0xa8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_OC4_SetConfig+0x68>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a12      	ldr	r2, [pc, #72]	@ (80047e0 <TIM_OC4_SetConfig+0xac>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d109      	bne.n	80047b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	019b      	lsls	r3, r3, #6
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	feff8fff 	.word	0xfeff8fff
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40010400 	.word	0x40010400

080047e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4b1b      	ldr	r3, [pc, #108]	@ (800487c <TIM_OC5_SetConfig+0x98>)
 8004810:	4013      	ands	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004824:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	041b      	lsls	r3, r3, #16
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a12      	ldr	r2, [pc, #72]	@ (8004880 <TIM_OC5_SetConfig+0x9c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d003      	beq.n	8004842 <TIM_OC5_SetConfig+0x5e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a11      	ldr	r2, [pc, #68]	@ (8004884 <TIM_OC5_SetConfig+0xa0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d109      	bne.n	8004856 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004848:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	fffeff8f 	.word	0xfffeff8f
 8004880:	40010000 	.word	0x40010000
 8004884:	40010400 	.word	0x40010400

08004888 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004924 <TIM_OC6_SetConfig+0x9c>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	051b      	lsls	r3, r3, #20
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a13      	ldr	r2, [pc, #76]	@ (8004928 <TIM_OC6_SetConfig+0xa0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_OC6_SetConfig+0x60>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a12      	ldr	r2, [pc, #72]	@ (800492c <TIM_OC6_SetConfig+0xa4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d109      	bne.n	80048fc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	029b      	lsls	r3, r3, #10
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	621a      	str	r2, [r3, #32]
}
 8004916:	bf00      	nop
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	feff8fff 	.word	0xfeff8fff
 8004928:	40010000 	.word	0x40010000
 800492c:	40010400 	.word	0x40010400

08004930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800495a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f023 030a 	bic.w	r3, r3, #10
 800496c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800498e:	b480      	push	{r7}
 8004990:	b087      	sub	sp, #28
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0210 	bic.w	r2, r3, #16
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	031b      	lsls	r3, r3, #12
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f043 0307 	orr.w	r3, r3, #7
 8004a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2201      	movs	r2, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1a      	ldr	r2, [r3, #32]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	43db      	mvns	r3, r3
 8004a86:	401a      	ands	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1a      	ldr	r2, [r3, #32]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e06d      	b.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a30      	ldr	r2, [pc, #192]	@ (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d108      	bne.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a20      	ldr	r2, [pc, #128]	@ (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d022      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3a:	d01d      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d018      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d013      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00e      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a15      	ldr	r2, [pc, #84]	@ (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a16      	ldr	r2, [pc, #88]	@ (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a15      	ldr	r2, [pc, #84]	@ (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10c      	bne.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40010400 	.word	0x40010400
 8004bb8:	40000400 	.word	0x40000400
 8004bbc:	40000800 	.word	0x40000800
 8004bc0:	40000c00 	.word	0x40000c00
 8004bc4:	40014000 	.word	0x40014000
 8004bc8:	40001800 	.word	0x40001800

08004bcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e065      	b.n	8004cb4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a16      	ldr	r2, [pc, #88]	@ (8004cc0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a14      	ldr	r2, [pc, #80]	@ (8004cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d115      	bne.n	8004ca2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	051b      	lsls	r3, r3, #20
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40010400 	.word	0x40010400

08004cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f103 0208 	add.w	r2, r3, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f103 0208 	add.w	r2, r3, #8
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f103 0208 	add.w	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d103      	bne.n	8004d7e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e00c      	b.n	8004d98 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3308      	adds	r3, #8
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e002      	b.n	8004d8c <vListInsert+0x2e>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d2f6      	bcs.n	8004d86 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	601a      	str	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6892      	ldr	r2, [r2, #8]
 8004de6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6852      	ldr	r2, [r2, #4]
 8004df0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d103      	bne.n	8004e04 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	1e5a      	subs	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10d      	bne.n	8004e58 <xQueueGenericReset+0x34>
        __asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e40:	b672      	cpsid	i
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	b662      	cpsie	i
 8004e50:	60fb      	str	r3, [r7, #12]
    }
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	e7fd      	b.n	8004e54 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d05d      	beq.n	8004f1a <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d059      	beq.n	8004f1a <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6e:	2100      	movs	r1, #0
 8004e70:	fba3 2302 	umull	r2, r3, r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d000      	beq.n	8004e7a <xQueueGenericReset+0x56>
 8004e78:	2101      	movs	r1, #1
 8004e7a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d14c      	bne.n	8004f1a <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8004e80:	f001 fe76 	bl	8006b70 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8c:	6939      	ldr	r1, [r7, #16]
 8004e8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	441a      	add	r2, r3
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	6939      	ldr	r1, [r7, #16]
 8004eb4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	441a      	add	r2, r3
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	22ff      	movs	r2, #255	@ 0xff
 8004ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	22ff      	movs	r2, #255	@ 0xff
 8004ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d114      	bne.n	8004f00 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01a      	beq.n	8004f14 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3310      	adds	r3, #16
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 ffe6 	bl	8005eb4 <xTaskRemoveFromEventList>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d012      	beq.n	8004f14 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004eee:	4b17      	ldr	r3, [pc, #92]	@ (8004f4c <xQueueGenericReset+0x128>)
 8004ef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	e009      	b.n	8004f14 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	3310      	adds	r3, #16
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fefd 	bl	8004d04 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	3324      	adds	r3, #36	@ 0x24
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fef8 	bl	8004d04 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004f14:	f001 fe62 	bl	8006bdc <vPortExitCritical>
 8004f18:	e001      	b.n	8004f1e <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10d      	bne.n	8004f40 <xQueueGenericReset+0x11c>
        __asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f28:	b672      	cpsid	i
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	b662      	cpsie	i
 8004f38:	60bb      	str	r3, [r7, #8]
    }
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	e7fd      	b.n	8004f3c <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004f40:	697b      	ldr	r3, [r7, #20]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	e000ed04 	.word	0xe000ed04

08004f50 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	@ 0x28
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02e      	beq.n	8004fc6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004f68:	2100      	movs	r1, #0
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d000      	beq.n	8004f78 <xQueueGenericCreate+0x28>
 8004f76:	2101      	movs	r1, #1
 8004f78:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d123      	bne.n	8004fc6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004f86:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8004f8a:	d81c      	bhi.n	8004fc6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	fb02 f303 	mul.w	r3, r2, r3
 8004f94:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	3348      	adds	r3, #72	@ 0x48
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 fed8 	bl	8006d50 <pvPortMalloc>
 8004fa0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01f      	beq.n	8004fe8 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	3348      	adds	r3, #72	@ 0x48
 8004fb0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fb2:	79fa      	ldrb	r2, [r7, #7]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	68b9      	ldr	r1, [r7, #8]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f817 	bl	8004ff2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004fc4:	e010      	b.n	8004fe8 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10d      	bne.n	8004fe8 <xQueueGenericCreate+0x98>
        __asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd0:	b672      	cpsid	i
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	b662      	cpsie	i
 8004fe0:	613b      	str	r3, [r7, #16]
    }
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
    }
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	e002      	b.n	8005014 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005020:	2101      	movs	r1, #1
 8005022:	69b8      	ldr	r0, [r7, #24]
 8005024:	f7ff fefe 	bl	8004e24 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08c      	sub	sp, #48	@ 0x30
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800503c:	2300      	movs	r3, #0
 800503e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10d      	bne.n	8005066 <xQueueReceive+0x36>
        __asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	b672      	cpsid	i
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	b662      	cpsie	i
 800505e:	623b      	str	r3, [r7, #32]
    }
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	e7fd      	b.n	8005062 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <xQueueReceive+0x44>
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <xQueueReceive+0x48>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <xQueueReceive+0x4a>
 8005078:	2300      	movs	r3, #0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <xQueueReceive+0x6a>
        __asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	b672      	cpsid	i
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	b662      	cpsie	i
 8005092:	61fb      	str	r3, [r7, #28]
    }
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	e7fd      	b.n	8005096 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800509a:	f001 f927 	bl	80062ec <xTaskGetSchedulerState>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d102      	bne.n	80050aa <xQueueReceive+0x7a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <xQueueReceive+0x7e>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <xQueueReceive+0x80>
 80050ae:	2300      	movs	r3, #0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10d      	bne.n	80050d0 <xQueueReceive+0xa0>
        __asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b8:	b672      	cpsid	i
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	b662      	cpsie	i
 80050c8:	61bb      	str	r3, [r7, #24]
    }
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	e7fd      	b.n	80050cc <xQueueReceive+0x9c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80050d0:	f001 fd4e 	bl	8006b70 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01f      	beq.n	8005120 <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050e4:	f000 f88c 	bl	8005200 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	1e5a      	subs	r2, r3, #1
 80050ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ee:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00f      	beq.n	8005118 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fa:	3310      	adds	r3, #16
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fed9 	bl	8005eb4 <xTaskRemoveFromEventList>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005108:	4b3c      	ldr	r3, [pc, #240]	@ (80051fc <xQueueReceive+0x1cc>)
 800510a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005118:	f001 fd60 	bl	8006bdc <vPortExitCritical>
                return pdPASS;
 800511c:	2301      	movs	r3, #1
 800511e:	e069      	b.n	80051f4 <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005126:	f001 fd59 	bl	8006bdc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800512a:	2300      	movs	r3, #0
 800512c:	e062      	b.n	80051f4 <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 800512e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005134:	f107 0310 	add.w	r3, r7, #16
 8005138:	4618      	mov	r0, r3
 800513a:	f000 ff95 	bl	8006068 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800513e:	2301      	movs	r3, #1
 8005140:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005142:	f001 fd4b 	bl	8006bdc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005146:	f000 fbb1 	bl	80058ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800514a:	f001 fd11 	bl	8006b70 <vPortEnterCritical>
 800514e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005150:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005154:	b25b      	sxtb	r3, r3
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515a:	d103      	bne.n	8005164 <xQueueReceive+0x134>
 800515c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800516a:	b25b      	sxtb	r3, r3
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d103      	bne.n	800517a <xQueueReceive+0x14a>
 8005172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800517a:	f001 fd2f 	bl	8006bdc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800517e:	1d3a      	adds	r2, r7, #4
 8005180:	f107 0310 	add.w	r3, r7, #16
 8005184:	4611      	mov	r1, r2
 8005186:	4618      	mov	r0, r3
 8005188:	f000 ff84 	bl	8006094 <xTaskCheckForTimeOut>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d123      	bne.n	80051da <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005194:	f000 f8ac 	bl	80052f0 <prvIsQueueEmpty>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d017      	beq.n	80051ce <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800519e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a0:	3324      	adds	r3, #36	@ 0x24
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4611      	mov	r1, r2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fe14 	bl	8005dd4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80051ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051ae:	f000 f84d 	bl	800524c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80051b2:	f000 fb89 	bl	80058c8 <xTaskResumeAll>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d189      	bne.n	80050d0 <xQueueReceive+0xa0>
                {
                    portYIELD_WITHIN_API();
 80051bc:	4b0f      	ldr	r3, [pc, #60]	@ (80051fc <xQueueReceive+0x1cc>)
 80051be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	e780      	b.n	80050d0 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80051ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051d0:	f000 f83c 	bl	800524c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80051d4:	f000 fb78 	bl	80058c8 <xTaskResumeAll>
 80051d8:	e77a      	b.n	80050d0 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80051da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051dc:	f000 f836 	bl	800524c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80051e0:	f000 fb72 	bl	80058c8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051e6:	f000 f883 	bl	80052f0 <prvIsQueueEmpty>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f43f af6f 	beq.w	80050d0 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80051f2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3730      	adds	r7, #48	@ 0x30
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d018      	beq.n	8005244 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	441a      	add	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	429a      	cmp	r2, r3
 800522a:	d303      	bcc.n	8005234 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	461a      	mov	r2, r3
 800523e:	6838      	ldr	r0, [r7, #0]
 8005240:	f001 ff8a 	bl	8007158 <memcpy>
    }
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005254:	f001 fc8c 	bl	8006b70 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800525e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005260:	e011      	b.n	8005286 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d012      	beq.n	8005290 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3324      	adds	r3, #36	@ 0x24
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fe20 	bl	8005eb4 <xTaskRemoveFromEventList>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800527a:	f000 ff77 	bl	800616c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	3b01      	subs	r3, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	dce9      	bgt.n	8005262 <prvUnlockQueue+0x16>
 800528e:	e000      	b.n	8005292 <prvUnlockQueue+0x46>
                    break;
 8005290:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	22ff      	movs	r2, #255	@ 0xff
 8005296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800529a:	f001 fc9f 	bl	8006bdc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800529e:	f001 fc67 	bl	8006b70 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052a8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052aa:	e011      	b.n	80052d0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d012      	beq.n	80052da <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3310      	adds	r3, #16
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fdfb 	bl	8005eb4 <xTaskRemoveFromEventList>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80052c4:	f000 ff52 	bl	800616c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	dce9      	bgt.n	80052ac <prvUnlockQueue+0x60>
 80052d8:	e000      	b.n	80052dc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80052da:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	22ff      	movs	r2, #255	@ 0xff
 80052e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80052e4:	f001 fc7a 	bl	8006bdc <vPortExitCritical>
}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80052f8:	f001 fc3a 	bl	8006b70 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005304:	2301      	movs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e001      	b.n	800530e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800530e:	f001 fc65 	bl	8006bdc <vPortExitCritical>

    return xReturn;
 8005312:	68fb      	ldr	r3, [r7, #12]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10d      	bne.n	800534c <vQueueAddToRegistry+0x30>
        __asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005334:	b672      	cpsid	i
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	b662      	cpsie	i
 8005344:	60fb      	str	r3, [r7, #12]
    }
 8005346:	bf00      	nop
 8005348:	bf00      	nop
 800534a:	e7fd      	b.n	8005348 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d024      	beq.n	800539c <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e01e      	b.n	8005396 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005358:	4a18      	ldr	r2, [pc, #96]	@ (80053bc <vQueueAddToRegistry+0xa0>)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	429a      	cmp	r2, r3
 8005366:	d105      	bne.n	8005374 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4a13      	ldr	r2, [pc, #76]	@ (80053bc <vQueueAddToRegistry+0xa0>)
 800536e:	4413      	add	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
                    break;
 8005372:	e013      	b.n	800539c <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <vQueueAddToRegistry+0x74>
 800537a:	4a10      	ldr	r2, [pc, #64]	@ (80053bc <vQueueAddToRegistry+0xa0>)
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	4a0c      	ldr	r2, [pc, #48]	@ (80053bc <vQueueAddToRegistry+0xa0>)
 800538c:	4413      	add	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	3301      	adds	r3, #1
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b07      	cmp	r3, #7
 800539a:	d9dd      	bls.n	8005358 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000218 	.word	0x20000218

080053c0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80053d0:	f001 fbce 	bl	8006b70 <vPortEnterCritical>
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053da:	b25b      	sxtb	r3, r3
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d103      	bne.n	80053ea <vQueueWaitForMessageRestricted+0x2a>
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053f0:	b25b      	sxtb	r3, r3
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d103      	bne.n	8005400 <vQueueWaitForMessageRestricted+0x40>
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005400:	f001 fbec 	bl	8006bdc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3324      	adds	r3, #36	@ 0x24
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fd05 	bl	8005e24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800541a:	6978      	ldr	r0, [r7, #20]
 800541c:	f7ff ff16 	bl	800524c <prvUnlockQueue>
    }
 8005420:	bf00      	nop
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005428:	b580      	push	{r7, lr}
 800542a:	b08c      	sub	sp, #48	@ 0x30
 800542c:	af04      	add	r7, sp, #16
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	4613      	mov	r3, r2
 8005436:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4618      	mov	r0, r3
 800543e:	f001 fc87 	bl	8006d50 <pvPortMalloc>
 8005442:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d013      	beq.n	8005472 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800544a:	2054      	movs	r0, #84	@ 0x54
 800544c:	f001 fc80 	bl	8006d50 <pvPortMalloc>
 8005450:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005458:	2254      	movs	r2, #84	@ 0x54
 800545a:	2100      	movs	r1, #0
 800545c:	69f8      	ldr	r0, [r7, #28]
 800545e:	f001 fe4f 	bl	8007100 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
 8005468:	e005      	b.n	8005476 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800546a:	6978      	ldr	r0, [r7, #20]
 800546c:	f001 fd30 	bl	8006ed0 <vPortFree>
 8005470:	e001      	b.n	8005476 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d013      	beq.n	80054a4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800547c:	88fa      	ldrh	r2, [r7, #6]
 800547e:	2300      	movs	r3, #0
 8005480:	9303      	str	r3, [sp, #12]
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	9302      	str	r3, [sp, #8]
 8005486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 f80e 	bl	80054b4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005498:	69f8      	ldr	r0, [r7, #28]
 800549a:	f000 f897 	bl	80055cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800549e:	2301      	movs	r3, #1
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	e002      	b.n	80054aa <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
 80054a8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80054aa:	69bb      	ldr	r3, [r7, #24]
    }
 80054ac:	4618      	mov	r0, r3
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80054cc:	440b      	add	r3, r1
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f023 0307 	bic.w	r3, r3, #7
 80054da:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00d      	beq.n	8005502 <prvInitialiseNewTask+0x4e>
        __asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	b672      	cpsid	i
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	b662      	cpsie	i
 80054fa:	617b      	str	r3, [r7, #20]
    }
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
 8005500:	e7fd      	b.n	80054fe <prvInitialiseNewTask+0x4a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01e      	beq.n	8005546 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	e012      	b.n	8005534 <prvInitialiseNewTask+0x80>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	7819      	ldrb	r1, [r3, #0]
 8005516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	3334      	adds	r3, #52	@ 0x34
 800551e:	460a      	mov	r2, r1
 8005520:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d006      	beq.n	800553c <prvInitialiseNewTask+0x88>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	3301      	adds	r3, #1
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2b0f      	cmp	r3, #15
 8005538:	d9e9      	bls.n	800550e <prvInitialiseNewTask+0x5a>
 800553a:	e000      	b.n	800553e <prvInitialiseNewTask+0x8a>
            {
                break;
 800553c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800553e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005548:	2b04      	cmp	r3, #4
 800554a:	d90d      	bls.n	8005568 <prvInitialiseNewTask+0xb4>
        __asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005550:	b672      	cpsid	i
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	b662      	cpsie	i
 8005560:	613b      	str	r3, [r7, #16]
    }
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <prvInitialiseNewTask+0xb0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556a:	2b04      	cmp	r3, #4
 800556c:	d901      	bls.n	8005572 <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800556e:	2304      	movs	r3, #4
 8005570:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005576:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800557c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	3304      	adds	r3, #4
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fbde 	bl	8004d44 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	3318      	adds	r3, #24
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff fbd9 	bl	8004d44 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005596:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559a:	f1c3 0205 	rsb	r2, r3, #5
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	68f9      	ldr	r1, [r7, #12]
 80055ac:	69b8      	ldr	r0, [r7, #24]
 80055ae:	f001 f9cb 	bl	8006948 <pxPortInitialiseStack>
 80055b2:	4602      	mov	r2, r0
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055c4:	bf00      	nop
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80055d4:	f001 facc 	bl	8006b70 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80055d8:	4b3e      	ldr	r3, [pc, #248]	@ (80056d4 <prvAddNewTaskToReadyList+0x108>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	4a3d      	ldr	r2, [pc, #244]	@ (80056d4 <prvAddNewTaskToReadyList+0x108>)
 80055e0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80055e2:	4b3d      	ldr	r3, [pc, #244]	@ (80056d8 <prvAddNewTaskToReadyList+0x10c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80055ea:	4a3b      	ldr	r2, [pc, #236]	@ (80056d8 <prvAddNewTaskToReadyList+0x10c>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055f0:	4b38      	ldr	r3, [pc, #224]	@ (80056d4 <prvAddNewTaskToReadyList+0x108>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d110      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80055f8:	f000 fdde 	bl	80061b8 <prvInitialiseTaskLists>
 80055fc:	e00d      	b.n	800561a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80055fe:	4b37      	ldr	r3, [pc, #220]	@ (80056dc <prvAddNewTaskToReadyList+0x110>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005606:	4b34      	ldr	r3, [pc, #208]	@ (80056d8 <prvAddNewTaskToReadyList+0x10c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	429a      	cmp	r2, r3
 8005612:	d802      	bhi.n	800561a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005614:	4a30      	ldr	r2, [pc, #192]	@ (80056d8 <prvAddNewTaskToReadyList+0x10c>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800561a:	4b31      	ldr	r3, [pc, #196]	@ (80056e0 <prvAddNewTaskToReadyList+0x114>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3301      	adds	r3, #1
 8005620:	4a2f      	ldr	r2, [pc, #188]	@ (80056e0 <prvAddNewTaskToReadyList+0x114>)
 8005622:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005628:	2201      	movs	r2, #1
 800562a:	409a      	lsls	r2, r3
 800562c:	4b2d      	ldr	r3, [pc, #180]	@ (80056e4 <prvAddNewTaskToReadyList+0x118>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4313      	orrs	r3, r2
 8005632:	4a2c      	ldr	r2, [pc, #176]	@ (80056e4 <prvAddNewTaskToReadyList+0x118>)
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563a:	492b      	ldr	r1, [pc, #172]	@ (80056e8 <prvAddNewTaskToReadyList+0x11c>)
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	3304      	adds	r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	609a      	str	r2, [r3, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	3204      	adds	r2, #4
 8005662:	605a      	str	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	1d1a      	adds	r2, r3, #4
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	609a      	str	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4a1b      	ldr	r2, [pc, #108]	@ (80056e8 <prvAddNewTaskToReadyList+0x11c>)
 800567a:	441a      	add	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	615a      	str	r2, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005684:	4918      	ldr	r1, [pc, #96]	@ (80056e8 <prvAddNewTaskToReadyList+0x11c>)
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	1c59      	adds	r1, r3, #1
 8005694:	4814      	ldr	r0, [pc, #80]	@ (80056e8 <prvAddNewTaskToReadyList+0x11c>)
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4403      	add	r3, r0
 80056a0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80056a2:	f001 fa9b 	bl	8006bdc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80056a6:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <prvAddNewTaskToReadyList+0x110>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00e      	beq.n	80056cc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056ae:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <prvAddNewTaskToReadyList+0x10c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d207      	bcs.n	80056cc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80056bc:	4b0b      	ldr	r3, [pc, #44]	@ (80056ec <prvAddNewTaskToReadyList+0x120>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000330 	.word	0x20000330
 80056d8:	20000258 	.word	0x20000258
 80056dc:	2000033c 	.word	0x2000033c
 80056e0:	2000034c 	.word	0x2000034c
 80056e4:	20000338 	.word	0x20000338
 80056e8:	2000025c 	.word	0x2000025c
 80056ec:	e000ed04 	.word	0xe000ed04

080056f0 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	@ 0x28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80056fa:	2300      	movs	r3, #0
 80056fc:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10d      	bne.n	8005720 <xTaskDelayUntil+0x30>
        __asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005708:	b672      	cpsid	i
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	b662      	cpsie	i
 8005718:	617b      	str	r3, [r7, #20]
    }
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10d      	bne.n	8005742 <xTaskDelayUntil+0x52>
        __asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572a:	b672      	cpsid	i
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	b662      	cpsie	i
 800573a:	613b      	str	r3, [r7, #16]
    }
 800573c:	bf00      	nop
 800573e:	bf00      	nop
 8005740:	e7fd      	b.n	800573e <xTaskDelayUntil+0x4e>
        configASSERT( uxSchedulerSuspended == 0 );
 8005742:	4b2c      	ldr	r3, [pc, #176]	@ (80057f4 <xTaskDelayUntil+0x104>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00d      	beq.n	8005766 <xTaskDelayUntil+0x76>
        __asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574e:	b672      	cpsid	i
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	b662      	cpsie	i
 800575e:	60fb      	str	r3, [r7, #12]
    }
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	e7fd      	b.n	8005762 <xTaskDelayUntil+0x72>

        vTaskSuspendAll();
 8005766:	f000 f8a1 	bl	80058ac <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800576a:	4b23      	ldr	r3, [pc, #140]	@ (80057f8 <xTaskDelayUntil+0x108>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	4413      	add	r3, r2
 8005778:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6a3a      	ldr	r2, [r7, #32]
 8005780:	429a      	cmp	r2, r3
 8005782:	d20b      	bcs.n	800579c <xTaskDelayUntil+0xac>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	429a      	cmp	r2, r3
 800578c:	d211      	bcs.n	80057b2 <xTaskDelayUntil+0xc2>
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	429a      	cmp	r2, r3
 8005794:	d90d      	bls.n	80057b2 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 8005796:	2301      	movs	r3, #1
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24
 800579a:	e00a      	b.n	80057b2 <xTaskDelayUntil+0xc2>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d303      	bcc.n	80057ae <xTaskDelayUntil+0xbe>
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d901      	bls.n	80057b2 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 80057ae:	2301      	movs	r3, #1
 80057b0:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d006      	beq.n	80057cc <xTaskDelayUntil+0xdc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2100      	movs	r1, #0
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fdae 	bl	8006328 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80057cc:	f000 f87c 	bl	80058c8 <xTaskResumeAll>
 80057d0:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d107      	bne.n	80057e8 <xTaskDelayUntil+0xf8>
        {
            portYIELD_WITHIN_API();
 80057d8:	4b08      	ldr	r3, [pc, #32]	@ (80057fc <xTaskDelayUntil+0x10c>)
 80057da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80057ea:	4618      	mov	r0, r3
 80057ec:	3728      	adds	r7, #40	@ 0x28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000358 	.word	0x20000358
 80057f8:	20000334 	.word	0x20000334
 80057fc:	e000ed04 	.word	0xe000ed04

08005800 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005806:	4b22      	ldr	r3, [pc, #136]	@ (8005890 <vTaskStartScheduler+0x90>)
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	2300      	movs	r3, #0
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	2300      	movs	r3, #0
 8005810:	2280      	movs	r2, #128	@ 0x80
 8005812:	4920      	ldr	r1, [pc, #128]	@ (8005894 <vTaskStartScheduler+0x94>)
 8005814:	4820      	ldr	r0, [pc, #128]	@ (8005898 <vTaskStartScheduler+0x98>)
 8005816:	f7ff fe07 	bl	8005428 <xTaskCreate>
 800581a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d102      	bne.n	8005828 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8005822:	f000 fe01 	bl	8006428 <xTimerCreateTimerTask>
 8005826:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d118      	bne.n	8005860 <vTaskStartScheduler+0x60>
        __asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005832:	b672      	cpsid	i
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	b662      	cpsie	i
 8005842:	60bb      	str	r3, [r7, #8]
    }
 8005844:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005846:	4b15      	ldr	r3, [pc, #84]	@ (800589c <vTaskStartScheduler+0x9c>)
 8005848:	f04f 32ff 	mov.w	r2, #4294967295
 800584c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800584e:	4b14      	ldr	r3, [pc, #80]	@ (80058a0 <vTaskStartScheduler+0xa0>)
 8005850:	2201      	movs	r2, #1
 8005852:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005854:	4b13      	ldr	r3, [pc, #76]	@ (80058a4 <vTaskStartScheduler+0xa4>)
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800585a:	f001 f90b 	bl	8006a74 <xPortStartScheduler>
 800585e:	e011      	b.n	8005884 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d10d      	bne.n	8005884 <vTaskStartScheduler+0x84>
        __asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586c:	b672      	cpsid	i
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	b662      	cpsie	i
 800587c:	607b      	str	r3, [r7, #4]
    }
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <vTaskStartScheduler+0x80>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005884:	4b08      	ldr	r3, [pc, #32]	@ (80058a8 <vTaskStartScheduler+0xa8>)
 8005886:	681b      	ldr	r3, [r3, #0]
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000354 	.word	0x20000354
 8005894:	080071f0 	.word	0x080071f0
 8005898:	08006185 	.word	0x08006185
 800589c:	20000350 	.word	0x20000350
 80058a0:	2000033c 	.word	0x2000033c
 80058a4:	20000334 	.word	0x20000334
 80058a8:	20000020 	.word	0x20000020

080058ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80058b0:	4b04      	ldr	r3, [pc, #16]	@ (80058c4 <vTaskSuspendAll+0x18>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3301      	adds	r3, #1
 80058b6:	4a03      	ldr	r2, [pc, #12]	@ (80058c4 <vTaskSuspendAll+0x18>)
 80058b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80058ba:	bf00      	nop
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	20000358 	.word	0x20000358

080058c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80058d6:	4b72      	ldr	r3, [pc, #456]	@ (8005aa0 <xTaskResumeAll+0x1d8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10d      	bne.n	80058fa <xTaskResumeAll+0x32>
        __asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e2:	b672      	cpsid	i
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	b662      	cpsie	i
 80058f2:	607b      	str	r3, [r7, #4]
    }
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	e7fd      	b.n	80058f6 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80058fa:	f001 f939 	bl	8006b70 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80058fe:	4b68      	ldr	r3, [pc, #416]	@ (8005aa0 <xTaskResumeAll+0x1d8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3b01      	subs	r3, #1
 8005904:	4a66      	ldr	r2, [pc, #408]	@ (8005aa0 <xTaskResumeAll+0x1d8>)
 8005906:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005908:	4b65      	ldr	r3, [pc, #404]	@ (8005aa0 <xTaskResumeAll+0x1d8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 80c0 	bne.w	8005a92 <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005912:	4b64      	ldr	r3, [pc, #400]	@ (8005aa4 <xTaskResumeAll+0x1dc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 80bb 	beq.w	8005a92 <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800591c:	e08a      	b.n	8005a34 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800591e:	4b62      	ldr	r3, [pc, #392]	@ (8005aa8 <xTaskResumeAll+0x1e0>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	6a12      	ldr	r2, [r2, #32]
 8005934:	609a      	str	r2, [r3, #8]
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	69d2      	ldr	r2, [r2, #28]
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3318      	adds	r3, #24
 8005948:	429a      	cmp	r2, r3
 800594a:	d103      	bne.n	8005954 <xTaskResumeAll+0x8c>
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	6a1a      	ldr	r2, [r3, #32]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	605a      	str	r2, [r3, #4]
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2200      	movs	r2, #0
 8005958:	629a      	str	r2, [r3, #40]	@ 0x28
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	68d2      	ldr	r2, [r2, #12]
 8005972:	609a      	str	r2, [r3, #8]
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	6892      	ldr	r2, [r2, #8]
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3304      	adds	r3, #4
 8005986:	429a      	cmp	r2, r3
 8005988:	d103      	bne.n	8005992 <xTaskResumeAll+0xca>
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	605a      	str	r2, [r3, #4]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2200      	movs	r2, #0
 8005996:	615a      	str	r2, [r3, #20]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	1e5a      	subs	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	2201      	movs	r2, #1
 80059a8:	409a      	lsls	r2, r3
 80059aa:	4b40      	ldr	r3, [pc, #256]	@ (8005aac <xTaskResumeAll+0x1e4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	4a3e      	ldr	r2, [pc, #248]	@ (8005aac <xTaskResumeAll+0x1e4>)
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b8:	493d      	ldr	r1, [pc, #244]	@ (8005ab0 <xTaskResumeAll+0x1e8>)
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3304      	adds	r3, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	609a      	str	r2, [r3, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	60da      	str	r2, [r3, #12]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	3204      	adds	r2, #4
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	1d1a      	adds	r2, r3, #4
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	609a      	str	r2, [r3, #8]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4a2e      	ldr	r2, [pc, #184]	@ (8005ab0 <xTaskResumeAll+0x1e8>)
 80059f8:	441a      	add	r2, r3
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	615a      	str	r2, [r3, #20]
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a02:	492b      	ldr	r1, [pc, #172]	@ (8005ab0 <xTaskResumeAll+0x1e8>)
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	1c59      	adds	r1, r3, #1
 8005a12:	4827      	ldr	r0, [pc, #156]	@ (8005ab0 <xTaskResumeAll+0x1e8>)
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4403      	add	r3, r0
 8005a1e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a24:	4b23      	ldr	r3, [pc, #140]	@ (8005ab4 <xTaskResumeAll+0x1ec>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d302      	bcc.n	8005a34 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8005a2e:	4b22      	ldr	r3, [pc, #136]	@ (8005ab8 <xTaskResumeAll+0x1f0>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a34:	4b1c      	ldr	r3, [pc, #112]	@ (8005aa8 <xTaskResumeAll+0x1e0>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f47f af70 	bne.w	800591e <xTaskResumeAll+0x56>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005a44:	f000 fc36 	bl	80062b4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a48:	4b1c      	ldr	r3, [pc, #112]	@ (8005abc <xTaskResumeAll+0x1f4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d010      	beq.n	8005a76 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005a54:	f000 f846 	bl	8005ae4 <xTaskIncrementTick>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8005a5e:	4b16      	ldr	r3, [pc, #88]	@ (8005ab8 <xTaskResumeAll+0x1f0>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1f1      	bne.n	8005a54 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 8005a70:	4b12      	ldr	r3, [pc, #72]	@ (8005abc <xTaskResumeAll+0x1f4>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005a76:	4b10      	ldr	r3, [pc, #64]	@ (8005ab8 <xTaskResumeAll+0x1f0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005a82:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <xTaskResumeAll+0x1f8>)
 8005a84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005a92:	f001 f8a3 	bl	8006bdc <vPortExitCritical>

    return xAlreadyYielded;
 8005a96:	69bb      	ldr	r3, [r7, #24]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20000358 	.word	0x20000358
 8005aa4:	20000330 	.word	0x20000330
 8005aa8:	200002f0 	.word	0x200002f0
 8005aac:	20000338 	.word	0x20000338
 8005ab0:	2000025c 	.word	0x2000025c
 8005ab4:	20000258 	.word	0x20000258
 8005ab8:	20000344 	.word	0x20000344
 8005abc:	20000340 	.word	0x20000340
 8005ac0:	e000ed04 	.word	0xe000ed04

08005ac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005aca:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <xTaskGetTickCount+0x1c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005ad0:	687b      	ldr	r3, [r7, #4]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	20000334 	.word	0x20000334

08005ae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	@ 0x28
 8005ae8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005aea:	2300      	movs	r3, #0
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aee:	4b7f      	ldr	r3, [pc, #508]	@ (8005cec <xTaskIncrementTick+0x208>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f040 80ef 	bne.w	8005cd6 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005af8:	4b7d      	ldr	r3, [pc, #500]	@ (8005cf0 <xTaskIncrementTick+0x20c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005b00:	4a7b      	ldr	r2, [pc, #492]	@ (8005cf0 <xTaskIncrementTick+0x20c>)
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d123      	bne.n	8005b54 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8005b0c:	4b79      	ldr	r3, [pc, #484]	@ (8005cf4 <xTaskIncrementTick+0x210>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <xTaskIncrementTick+0x4e>
        __asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	b672      	cpsid	i
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	b662      	cpsie	i
 8005b2a:	607b      	str	r3, [r7, #4]
    }
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	e7fd      	b.n	8005b2e <xTaskIncrementTick+0x4a>
 8005b32:	4b70      	ldr	r3, [pc, #448]	@ (8005cf4 <xTaskIncrementTick+0x210>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	61fb      	str	r3, [r7, #28]
 8005b38:	4b6f      	ldr	r3, [pc, #444]	@ (8005cf8 <xTaskIncrementTick+0x214>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a6d      	ldr	r2, [pc, #436]	@ (8005cf4 <xTaskIncrementTick+0x210>)
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	4a6d      	ldr	r2, [pc, #436]	@ (8005cf8 <xTaskIncrementTick+0x214>)
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	4b6d      	ldr	r3, [pc, #436]	@ (8005cfc <xTaskIncrementTick+0x218>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8005cfc <xTaskIncrementTick+0x218>)
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	f000 fbb0 	bl	80062b4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005b54:	4b6a      	ldr	r3, [pc, #424]	@ (8005d00 <xTaskIncrementTick+0x21c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	f0c0 80a6 	bcc.w	8005cac <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b60:	4b64      	ldr	r3, [pc, #400]	@ (8005cf4 <xTaskIncrementTick+0x210>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b6a:	4b65      	ldr	r3, [pc, #404]	@ (8005d00 <xTaskIncrementTick+0x21c>)
 8005b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b70:	601a      	str	r2, [r3, #0]
                    break;
 8005b72:	e09b      	b.n	8005cac <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b74:	4b5f      	ldr	r3, [pc, #380]	@ (8005cf4 <xTaskIncrementTick+0x210>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005b84:	6a3a      	ldr	r2, [r7, #32]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d203      	bcs.n	8005b94 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005b8c:	4a5c      	ldr	r2, [pc, #368]	@ (8005d00 <xTaskIncrementTick+0x21c>)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005b92:	e08b      	b.n	8005cac <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	68d2      	ldr	r2, [r2, #12]
 8005ba2:	609a      	str	r2, [r3, #8]
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	6892      	ldr	r2, [r2, #8]
 8005bac:	605a      	str	r2, [r3, #4]
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d103      	bne.n	8005bc2 <xTaskIncrementTick+0xde>
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	615a      	str	r2, [r3, #20]
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	1e5a      	subs	r2, r3, #1
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01e      	beq.n	8005c18 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	6a12      	ldr	r2, [r2, #32]
 8005be8:	609a      	str	r2, [r3, #8]
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	69d2      	ldr	r2, [r2, #28]
 8005bf2:	605a      	str	r2, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	3318      	adds	r3, #24
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d103      	bne.n	8005c08 <xTaskIncrementTick+0x124>
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	6a1a      	ldr	r2, [r3, #32]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	605a      	str	r2, [r3, #4]
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	1e5a      	subs	r2, r3, #1
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	4b38      	ldr	r3, [pc, #224]	@ (8005d04 <xTaskIncrementTick+0x220>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	4a37      	ldr	r2, [pc, #220]	@ (8005d04 <xTaskIncrementTick+0x220>)
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2e:	4936      	ldr	r1, [pc, #216]	@ (8005d08 <xTaskIncrementTick+0x224>)
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60bb      	str	r3, [r7, #8]
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	609a      	str	r2, [r3, #8]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	60da      	str	r2, [r3, #12]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	3204      	adds	r2, #4
 8005c56:	605a      	str	r2, [r3, #4]
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	1d1a      	adds	r2, r3, #4
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	609a      	str	r2, [r3, #8]
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4a26      	ldr	r2, [pc, #152]	@ (8005d08 <xTaskIncrementTick+0x224>)
 8005c6e:	441a      	add	r2, r3
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	615a      	str	r2, [r3, #20]
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c78:	4923      	ldr	r1, [pc, #140]	@ (8005d08 <xTaskIncrementTick+0x224>)
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	1c59      	adds	r1, r3, #1
 8005c88:	481f      	ldr	r0, [pc, #124]	@ (8005d08 <xTaskIncrementTick+0x224>)
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4403      	add	r3, r0
 8005c94:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8005d0c <xTaskIncrementTick+0x228>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	f67f af5d 	bls.w	8005b60 <xTaskIncrementTick+0x7c>
                        {
                            xSwitchRequired = pdTRUE;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005caa:	e759      	b.n	8005b60 <xTaskIncrementTick+0x7c>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cac:	4b17      	ldr	r3, [pc, #92]	@ (8005d0c <xTaskIncrementTick+0x228>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb2:	4915      	ldr	r1, [pc, #84]	@ (8005d08 <xTaskIncrementTick+0x224>)
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d901      	bls.n	8005cc8 <xTaskIncrementTick+0x1e4>
            {
                xSwitchRequired = pdTRUE;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005cc8:	4b11      	ldr	r3, [pc, #68]	@ (8005d10 <xTaskIncrementTick+0x22c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <xTaskIncrementTick+0x1fc>
            {
                xSwitchRequired = pdTRUE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd4:	e004      	b.n	8005ce0 <xTaskIncrementTick+0x1fc>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d14 <xTaskIncrementTick+0x230>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8005d14 <xTaskIncrementTick+0x230>)
 8005cde:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3728      	adds	r7, #40	@ 0x28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000358 	.word	0x20000358
 8005cf0:	20000334 	.word	0x20000334
 8005cf4:	200002e8 	.word	0x200002e8
 8005cf8:	200002ec 	.word	0x200002ec
 8005cfc:	20000348 	.word	0x20000348
 8005d00:	20000350 	.word	0x20000350
 8005d04:	20000338 	.word	0x20000338
 8005d08:	2000025c 	.word	0x2000025c
 8005d0c:	20000258 	.word	0x20000258
 8005d10:	20000344 	.word	0x20000344
 8005d14:	20000340 	.word	0x20000340

08005d18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d1e:	4b28      	ldr	r3, [pc, #160]	@ (8005dc0 <vTaskSwitchContext+0xa8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005d26:	4b27      	ldr	r3, [pc, #156]	@ (8005dc4 <vTaskSwitchContext+0xac>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005d2c:	e042      	b.n	8005db4 <vTaskSwitchContext+0x9c>
        xYieldPending = pdFALSE;
 8005d2e:	4b25      	ldr	r3, [pc, #148]	@ (8005dc4 <vTaskSwitchContext+0xac>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d34:	4b24      	ldr	r3, [pc, #144]	@ (8005dc8 <vTaskSwitchContext+0xb0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	fab3 f383 	clz	r3, r3
 8005d40:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005d42:	7afb      	ldrb	r3, [r7, #11]
 8005d44:	f1c3 031f 	rsb	r3, r3, #31
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	4920      	ldr	r1, [pc, #128]	@ (8005dcc <vTaskSwitchContext+0xb4>)
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	440b      	add	r3, r1
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10d      	bne.n	8005d7a <vTaskSwitchContext+0x62>
        __asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	b672      	cpsid	i
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	b662      	cpsie	i
 8005d72:	607b      	str	r3, [r7, #4]
    }
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	e7fd      	b.n	8005d76 <vTaskSwitchContext+0x5e>
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4a11      	ldr	r2, [pc, #68]	@ (8005dcc <vTaskSwitchContext+0xb4>)
 8005d86:	4413      	add	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	605a      	str	r2, [r3, #4]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d104      	bne.n	8005daa <vTaskSwitchContext+0x92>
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	605a      	str	r2, [r3, #4]
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	4a07      	ldr	r2, [pc, #28]	@ (8005dd0 <vTaskSwitchContext+0xb8>)
 8005db2:	6013      	str	r3, [r2, #0]
}
 8005db4:	bf00      	nop
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	20000358 	.word	0x20000358
 8005dc4:	20000344 	.word	0x20000344
 8005dc8:	20000338 	.word	0x20000338
 8005dcc:	2000025c 	.word	0x2000025c
 8005dd0:	20000258 	.word	0x20000258

08005dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10d      	bne.n	8005e00 <vTaskPlaceOnEventList+0x2c>
        __asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de8:	b672      	cpsid	i
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	b662      	cpsie	i
 8005df8:	60fb      	str	r3, [r7, #12]
    }
 8005dfa:	bf00      	nop
 8005dfc:	bf00      	nop
 8005dfe:	e7fd      	b.n	8005dfc <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e00:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <vTaskPlaceOnEventList+0x4c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3318      	adds	r3, #24
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7fe ffa8 	bl	8004d5e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e0e:	2101      	movs	r1, #1
 8005e10:	6838      	ldr	r0, [r7, #0]
 8005e12:	f000 fa89 	bl	8006328 <prvAddCurrentTaskToDelayedList>
}
 8005e16:	bf00      	nop
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000258 	.word	0x20000258

08005e24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10d      	bne.n	8005e52 <vTaskPlaceOnEventListRestricted+0x2e>
        __asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	b672      	cpsid	i
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	b662      	cpsie	i
 8005e4a:	613b      	str	r3, [r7, #16]
    }
 8005e4c:	bf00      	nop
 8005e4e:	bf00      	nop
 8005e50:	e7fd      	b.n	8005e4e <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	4b15      	ldr	r3, [pc, #84]	@ (8005eb0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	61da      	str	r2, [r3, #28]
 8005e60:	4b13      	ldr	r3, [pc, #76]	@ (8005eb0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	6892      	ldr	r2, [r2, #8]
 8005e68:	621a      	str	r2, [r3, #32]
 8005e6a:	4b11      	ldr	r3, [pc, #68]	@ (8005eb0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	3218      	adds	r2, #24
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f103 0218 	add.w	r2, r3, #24
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	609a      	str	r2, [r3, #8]
 8005e82:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8005e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	68b8      	ldr	r0, [r7, #8]
 8005ea4:	f000 fa40 	bl	8006328 <prvAddCurrentTaskToDelayedList>
    }
 8005ea8:	bf00      	nop
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000258 	.word	0x20000258

08005eb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b08b      	sub	sp, #44	@ 0x2c
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10d      	bne.n	8005ee6 <xTaskRemoveFromEventList+0x32>
        __asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ece:	b672      	cpsid	i
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	b662      	cpsie	i
 8005ede:	60fb      	str	r3, [r7, #12]
    }
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	e7fd      	b.n	8005ee2 <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	6a12      	ldr	r2, [r2, #32]
 8005ef4:	609a      	str	r2, [r3, #8]
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	6a3a      	ldr	r2, [r7, #32]
 8005efc:	69d2      	ldr	r2, [r2, #28]
 8005efe:	605a      	str	r2, [r3, #4]
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	3318      	adds	r3, #24
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d103      	bne.n	8005f14 <xTaskRemoveFromEventList+0x60>
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	2200      	movs	r2, #0
 8005f18:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	1e5a      	subs	r2, r3, #1
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f24:	4b4a      	ldr	r3, [pc, #296]	@ (8006050 <xTaskRemoveFromEventList+0x19c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d15e      	bne.n	8005fea <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	6a3a      	ldr	r2, [r7, #32]
 8005f38:	68d2      	ldr	r2, [r2, #12]
 8005f3a:	609a      	str	r2, [r3, #8]
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	6a3a      	ldr	r2, [r7, #32]
 8005f42:	6892      	ldr	r2, [r2, #8]
 8005f44:	605a      	str	r2, [r3, #4]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d103      	bne.n	8005f5a <xTaskRemoveFromEventList+0xa6>
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	615a      	str	r2, [r3, #20]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	1e5a      	subs	r2, r3, #1
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	2201      	movs	r2, #1
 8005f70:	409a      	lsls	r2, r3
 8005f72:	4b38      	ldr	r3, [pc, #224]	@ (8006054 <xTaskRemoveFromEventList+0x1a0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	4a36      	ldr	r2, [pc, #216]	@ (8006054 <xTaskRemoveFromEventList+0x1a0>)
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f80:	4935      	ldr	r1, [pc, #212]	@ (8006058 <xTaskRemoveFromEventList+0x1a4>)
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	609a      	str	r2, [r3, #8]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	60da      	str	r2, [r3, #12]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	3204      	adds	r2, #4
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	1d1a      	adds	r2, r3, #4
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	609a      	str	r2, [r3, #8]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4a26      	ldr	r2, [pc, #152]	@ (8006058 <xTaskRemoveFromEventList+0x1a4>)
 8005fc0:	441a      	add	r2, r3
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	615a      	str	r2, [r3, #20]
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fca:	4923      	ldr	r1, [pc, #140]	@ (8006058 <xTaskRemoveFromEventList+0x1a4>)
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	1c59      	adds	r1, r3, #1
 8005fda:	481f      	ldr	r0, [pc, #124]	@ (8006058 <xTaskRemoveFromEventList+0x1a4>)
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4403      	add	r3, r0
 8005fe6:	6019      	str	r1, [r3, #0]
 8005fe8:	e01b      	b.n	8006022 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fea:	4b1c      	ldr	r3, [pc, #112]	@ (800605c <xTaskRemoveFromEventList+0x1a8>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	61da      	str	r2, [r3, #28]
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	621a      	str	r2, [r3, #32]
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	6a3a      	ldr	r2, [r7, #32]
 8006004:	3218      	adds	r2, #24
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	f103 0218 	add.w	r2, r3, #24
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	609a      	str	r2, [r3, #8]
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	4a11      	ldr	r2, [pc, #68]	@ (800605c <xTaskRemoveFromEventList+0x1a8>)
 8006016:	629a      	str	r2, [r3, #40]	@ 0x28
 8006018:	4b10      	ldr	r3, [pc, #64]	@ (800605c <xTaskRemoveFromEventList+0x1a8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	4a0f      	ldr	r2, [pc, #60]	@ (800605c <xTaskRemoveFromEventList+0x1a8>)
 8006020:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006026:	4b0e      	ldr	r3, [pc, #56]	@ (8006060 <xTaskRemoveFromEventList+0x1ac>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	429a      	cmp	r2, r3
 800602e:	d905      	bls.n	800603c <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006034:	4b0b      	ldr	r3, [pc, #44]	@ (8006064 <xTaskRemoveFromEventList+0x1b0>)
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e001      	b.n	8006040 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 800603c:	2300      	movs	r3, #0
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006042:	4618      	mov	r0, r3
 8006044:	372c      	adds	r7, #44	@ 0x2c
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	20000358 	.word	0x20000358
 8006054:	20000338 	.word	0x20000338
 8006058:	2000025c 	.word	0x2000025c
 800605c:	200002f0 	.word	0x200002f0
 8006060:	20000258 	.word	0x20000258
 8006064:	20000344 	.word	0x20000344

08006068 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006070:	4b06      	ldr	r3, [pc, #24]	@ (800608c <vTaskInternalSetTimeOutState+0x24>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006078:	4b05      	ldr	r3, [pc, #20]	@ (8006090 <vTaskInternalSetTimeOutState+0x28>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	605a      	str	r2, [r3, #4]
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	20000348 	.word	0x20000348
 8006090:	20000334 	.word	0x20000334

08006094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10d      	bne.n	80060c0 <xTaskCheckForTimeOut+0x2c>
        __asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a8:	b672      	cpsid	i
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	b662      	cpsie	i
 80060b8:	613b      	str	r3, [r7, #16]
    }
 80060ba:	bf00      	nop
 80060bc:	bf00      	nop
 80060be:	e7fd      	b.n	80060bc <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10d      	bne.n	80060e2 <xTaskCheckForTimeOut+0x4e>
        __asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ca:	b672      	cpsid	i
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	b662      	cpsie	i
 80060da:	60fb      	str	r3, [r7, #12]
    }
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	e7fd      	b.n	80060de <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 80060e2:	f000 fd45 	bl	8006b70 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80060e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006164 <xTaskCheckForTimeOut+0xd0>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d102      	bne.n	8006106 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006100:	2300      	movs	r3, #0
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	e026      	b.n	8006154 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b17      	ldr	r3, [pc, #92]	@ (8006168 <xTaskCheckForTimeOut+0xd4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d00a      	beq.n	8006128 <xTaskCheckForTimeOut+0x94>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	429a      	cmp	r2, r3
 800611a:	d305      	bcc.n	8006128 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800611c:	2301      	movs	r3, #1
 800611e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	e015      	b.n	8006154 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	429a      	cmp	r2, r3
 8006130:	d20b      	bcs.n	800614a <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	1ad2      	subs	r2, r2, r3
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff ff92 	bl	8006068 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	e004      	b.n	8006154 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006150:	2301      	movs	r3, #1
 8006152:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006154:	f000 fd42 	bl	8006bdc <vPortExitCritical>

    return xReturn;
 8006158:	69fb      	ldr	r3, [r7, #28]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000334 	.word	0x20000334
 8006168:	20000348 	.word	0x20000348

0800616c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006170:	4b03      	ldr	r3, [pc, #12]	@ (8006180 <vTaskMissedYield+0x14>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	20000344 	.word	0x20000344

08006184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800618c:	f000 f854 	bl	8006238 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006190:	4b07      	ldr	r3, [pc, #28]	@ (80061b0 <prvIdleTask+0x2c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d907      	bls.n	80061a8 <prvIdleTask+0x24>
            {
                taskYIELD();
 8006198:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <prvIdleTask+0x30>)
 800619a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 80061a8:	f7fa ff94 	bl	80010d4 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80061ac:	e7ee      	b.n	800618c <prvIdleTask+0x8>
 80061ae:	bf00      	nop
 80061b0:	2000025c 	.word	0x2000025c
 80061b4:	e000ed04 	.word	0xe000ed04

080061b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061be:	2300      	movs	r3, #0
 80061c0:	607b      	str	r3, [r7, #4]
 80061c2:	e00c      	b.n	80061de <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4a12      	ldr	r2, [pc, #72]	@ (8006218 <prvInitialiseTaskLists+0x60>)
 80061d0:	4413      	add	r3, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fd96 	bl	8004d04 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3301      	adds	r3, #1
 80061dc:	607b      	str	r3, [r7, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d9ef      	bls.n	80061c4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80061e4:	480d      	ldr	r0, [pc, #52]	@ (800621c <prvInitialiseTaskLists+0x64>)
 80061e6:	f7fe fd8d 	bl	8004d04 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80061ea:	480d      	ldr	r0, [pc, #52]	@ (8006220 <prvInitialiseTaskLists+0x68>)
 80061ec:	f7fe fd8a 	bl	8004d04 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80061f0:	480c      	ldr	r0, [pc, #48]	@ (8006224 <prvInitialiseTaskLists+0x6c>)
 80061f2:	f7fe fd87 	bl	8004d04 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80061f6:	480c      	ldr	r0, [pc, #48]	@ (8006228 <prvInitialiseTaskLists+0x70>)
 80061f8:	f7fe fd84 	bl	8004d04 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80061fc:	480b      	ldr	r0, [pc, #44]	@ (800622c <prvInitialiseTaskLists+0x74>)
 80061fe:	f7fe fd81 	bl	8004d04 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006202:	4b0b      	ldr	r3, [pc, #44]	@ (8006230 <prvInitialiseTaskLists+0x78>)
 8006204:	4a05      	ldr	r2, [pc, #20]	@ (800621c <prvInitialiseTaskLists+0x64>)
 8006206:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006208:	4b0a      	ldr	r3, [pc, #40]	@ (8006234 <prvInitialiseTaskLists+0x7c>)
 800620a:	4a05      	ldr	r2, [pc, #20]	@ (8006220 <prvInitialiseTaskLists+0x68>)
 800620c:	601a      	str	r2, [r3, #0]
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	2000025c 	.word	0x2000025c
 800621c:	200002c0 	.word	0x200002c0
 8006220:	200002d4 	.word	0x200002d4
 8006224:	200002f0 	.word	0x200002f0
 8006228:	20000304 	.word	0x20000304
 800622c:	2000031c 	.word	0x2000031c
 8006230:	200002e8 	.word	0x200002e8
 8006234:	200002ec 	.word	0x200002ec

08006238 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800623e:	e019      	b.n	8006274 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8006240:	f000 fc96 	bl	8006b70 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006244:	4b10      	ldr	r3, [pc, #64]	@ (8006288 <prvCheckTasksWaitingTermination+0x50>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3304      	adds	r3, #4
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe fdbd 	bl	8004dd0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8006256:	4b0d      	ldr	r3, [pc, #52]	@ (800628c <prvCheckTasksWaitingTermination+0x54>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3b01      	subs	r3, #1
 800625c:	4a0b      	ldr	r2, [pc, #44]	@ (800628c <prvCheckTasksWaitingTermination+0x54>)
 800625e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006260:	4b0b      	ldr	r3, [pc, #44]	@ (8006290 <prvCheckTasksWaitingTermination+0x58>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3b01      	subs	r3, #1
 8006266:	4a0a      	ldr	r2, [pc, #40]	@ (8006290 <prvCheckTasksWaitingTermination+0x58>)
 8006268:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800626a:	f000 fcb7 	bl	8006bdc <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f810 	bl	8006294 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006274:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <prvCheckTasksWaitingTermination+0x58>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e1      	bne.n	8006240 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800627c:	bf00      	nop
 800627e:	bf00      	nop
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20000304 	.word	0x20000304
 800628c:	20000330 	.word	0x20000330
 8006290:	20000318 	.word	0x20000318

08006294 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fe15 	bl	8006ed0 <vPortFree>
            vPortFree( pxTCB );
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fe12 	bl	8006ed0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062b8:	4b0a      	ldr	r3, [pc, #40]	@ (80062e4 <prvResetNextTaskUnblockTime+0x30>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80062c2:	4b09      	ldr	r3, [pc, #36]	@ (80062e8 <prvResetNextTaskUnblockTime+0x34>)
 80062c4:	f04f 32ff 	mov.w	r2, #4294967295
 80062c8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80062ca:	e005      	b.n	80062d8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062cc:	4b05      	ldr	r3, [pc, #20]	@ (80062e4 <prvResetNextTaskUnblockTime+0x30>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a04      	ldr	r2, [pc, #16]	@ (80062e8 <prvResetNextTaskUnblockTime+0x34>)
 80062d6:	6013      	str	r3, [r2, #0]
}
 80062d8:	bf00      	nop
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	200002e8 	.word	0x200002e8
 80062e8:	20000350 	.word	0x20000350

080062ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80062f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006320 <xTaskGetSchedulerState+0x34>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d102      	bne.n	8006300 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80062fa:	2301      	movs	r3, #1
 80062fc:	607b      	str	r3, [r7, #4]
 80062fe:	e008      	b.n	8006312 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006300:	4b08      	ldr	r3, [pc, #32]	@ (8006324 <xTaskGetSchedulerState+0x38>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006308:	2302      	movs	r3, #2
 800630a:	607b      	str	r3, [r7, #4]
 800630c:	e001      	b.n	8006312 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800630e:	2300      	movs	r3, #0
 8006310:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006312:	687b      	ldr	r3, [r7, #4]
    }
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	2000033c 	.word	0x2000033c
 8006324:	20000358 	.word	0x20000358

08006328 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006332:	4b36      	ldr	r3, [pc, #216]	@ (800640c <prvAddCurrentTaskToDelayedList+0xe4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006338:	4b35      	ldr	r3, [pc, #212]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xe8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3304      	adds	r3, #4
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fd46 	bl	8004dd0 <uxListRemove>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10b      	bne.n	8006362 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800634a:	4b31      	ldr	r3, [pc, #196]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xe8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	2201      	movs	r2, #1
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	43da      	mvns	r2, r3
 8006358:	4b2e      	ldr	r3, [pc, #184]	@ (8006414 <prvAddCurrentTaskToDelayedList+0xec>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4013      	ands	r3, r2
 800635e:	4a2d      	ldr	r2, [pc, #180]	@ (8006414 <prvAddCurrentTaskToDelayedList+0xec>)
 8006360:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d124      	bne.n	80063b4 <prvAddCurrentTaskToDelayedList+0x8c>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d021      	beq.n	80063b4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006370:	4b29      	ldr	r3, [pc, #164]	@ (8006418 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	4b26      	ldr	r3, [pc, #152]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	609a      	str	r2, [r3, #8]
 800637e:	4b24      	ldr	r3, [pc, #144]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	6892      	ldr	r2, [r2, #8]
 8006386:	60da      	str	r2, [r3, #12]
 8006388:	4b21      	ldr	r3, [pc, #132]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xe8>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	3204      	adds	r2, #4
 8006392:	605a      	str	r2, [r3, #4]
 8006394:	4b1e      	ldr	r3, [pc, #120]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	1d1a      	adds	r2, r3, #4
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	609a      	str	r2, [r3, #8]
 800639e:	4b1c      	ldr	r3, [pc, #112]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006418 <prvAddCurrentTaskToDelayedList+0xf0>)
 80063a4:	615a      	str	r2, [r3, #20]
 80063a6:	4b1c      	ldr	r3, [pc, #112]	@ (8006418 <prvAddCurrentTaskToDelayedList+0xf0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3301      	adds	r3, #1
 80063ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006418 <prvAddCurrentTaskToDelayedList+0xf0>)
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80063b2:	e026      	b.n	8006402 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4413      	add	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063bc:	4b14      	ldr	r3, [pc, #80]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d209      	bcs.n	80063e0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063cc:	4b13      	ldr	r3, [pc, #76]	@ (800641c <prvAddCurrentTaskToDelayedList+0xf4>)
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f7fe fcc0 	bl	8004d5e <vListInsert>
}
 80063de:	e010      	b.n	8006402 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006420 <prvAddCurrentTaskToDelayedList+0xf8>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4619      	mov	r1, r3
 80063ec:	4610      	mov	r0, r2
 80063ee:	f7fe fcb6 	bl	8004d5e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80063f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006424 <prvAddCurrentTaskToDelayedList+0xfc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d202      	bcs.n	8006402 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80063fc:	4a09      	ldr	r2, [pc, #36]	@ (8006424 <prvAddCurrentTaskToDelayedList+0xfc>)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6013      	str	r3, [r2, #0]
}
 8006402:	bf00      	nop
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000334 	.word	0x20000334
 8006410:	20000258 	.word	0x20000258
 8006414:	20000338 	.word	0x20000338
 8006418:	2000031c 	.word	0x2000031c
 800641c:	200002ec 	.word	0x200002ec
 8006420:	200002e8 	.word	0x200002e8
 8006424:	20000350 	.word	0x20000350

08006428 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800642e:	2300      	movs	r3, #0
 8006430:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006432:	f000 fa53 	bl	80068dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006436:	4b13      	ldr	r3, [pc, #76]	@ (8006484 <xTimerCreateTimerTask+0x5c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800643e:	4b12      	ldr	r3, [pc, #72]	@ (8006488 <xTimerCreateTimerTask+0x60>)
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	2302      	movs	r3, #2
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	2300      	movs	r3, #0
 8006448:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800644c:	490f      	ldr	r1, [pc, #60]	@ (800648c <xTimerCreateTimerTask+0x64>)
 800644e:	4810      	ldr	r0, [pc, #64]	@ (8006490 <xTimerCreateTimerTask+0x68>)
 8006450:	f7fe ffea 	bl	8005428 <xTaskCreate>
 8006454:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10d      	bne.n	8006478 <xTimerCreateTimerTask+0x50>
        __asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006460:	b672      	cpsid	i
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	b662      	cpsie	i
 8006470:	603b      	str	r3, [r7, #0]
    }
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	e7fd      	b.n	8006474 <xTimerCreateTimerTask+0x4c>
        return xReturn;
 8006478:	687b      	ldr	r3, [r7, #4]
    }
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	2000038c 	.word	0x2000038c
 8006488:	20000390 	.word	0x20000390
 800648c:	080071f8 	.word	0x080071f8
 8006490:	08006539 	.word	0x08006539

08006494 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80064a0:	e008      	b.n	80064b4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	4413      	add	r3, r2
 80064aa:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	699a      	ldr	r2, [r3, #24]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	18d1      	adds	r1, r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f8df 	bl	8006684 <prvInsertTimerInActiveList>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1ea      	bne.n	80064a2 <prvReloadTimer+0xe>
        }
    }
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064e2:	4b14      	ldr	r3, [pc, #80]	@ (8006534 <prvProcessExpiredTimer+0x5c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fe fc6d 	bl	8004dd0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff ffc3 	bl	8006494 <prvReloadTimer>
 800650e:	e008      	b.n	8006522 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006516:	f023 0301 	bic.w	r3, r3, #1
 800651a:	b2da      	uxtb	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	4798      	blx	r3
    }
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000384 	.word	0x20000384

08006538 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006540:	f107 0308 	add.w	r3, r7, #8
 8006544:	4618      	mov	r0, r3
 8006546:	f000 f859 	bl	80065fc <prvGetNextExpireTime>
 800654a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4619      	mov	r1, r3
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f805 	bl	8006560 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006556:	f000 f8d7 	bl	8006708 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800655a:	bf00      	nop
 800655c:	e7f0      	b.n	8006540 <prvTimerTask+0x8>
	...

08006560 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800656a:	f7ff f99f 	bl	80058ac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800656e:	f107 0308 	add.w	r3, r7, #8
 8006572:	4618      	mov	r0, r3
 8006574:	f000 f866 	bl	8006644 <prvSampleTimeNow>
 8006578:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d130      	bne.n	80065e2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <prvProcessTimerOrBlockTask+0x3c>
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	429a      	cmp	r2, r3
 800658c:	d806      	bhi.n	800659c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800658e:	f7ff f99b 	bl	80058c8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff ff9f 	bl	80064d8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800659a:	e024      	b.n	80065e6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d008      	beq.n	80065b4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065a2:	4b13      	ldr	r3, [pc, #76]	@ (80065f0 <prvProcessTimerOrBlockTask+0x90>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <prvProcessTimerOrBlockTask+0x50>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <prvProcessTimerOrBlockTask+0x52>
 80065b0:	2300      	movs	r3, #0
 80065b2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065b4:	4b0f      	ldr	r3, [pc, #60]	@ (80065f4 <prvProcessTimerOrBlockTask+0x94>)
 80065b6:	6818      	ldr	r0, [r3, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	4619      	mov	r1, r3
 80065c2:	f7fe fefd 	bl	80053c0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80065c6:	f7ff f97f 	bl	80058c8 <xTaskResumeAll>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80065d0:	4b09      	ldr	r3, [pc, #36]	@ (80065f8 <prvProcessTimerOrBlockTask+0x98>)
 80065d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	f3bf 8f6f 	isb	sy
    }
 80065e0:	e001      	b.n	80065e6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80065e2:	f7ff f971 	bl	80058c8 <xTaskResumeAll>
    }
 80065e6:	bf00      	nop
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000388 	.word	0x20000388
 80065f4:	2000038c 	.word	0x2000038c
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006604:	4b0e      	ldr	r3, [pc, #56]	@ (8006640 <prvGetNextExpireTime+0x44>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <prvGetNextExpireTime+0x16>
 800660e:	2201      	movs	r2, #1
 8006610:	e000      	b.n	8006614 <prvGetNextExpireTime+0x18>
 8006612:	2200      	movs	r2, #0
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d105      	bne.n	800662c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006620:	4b07      	ldr	r3, [pc, #28]	@ (8006640 <prvGetNextExpireTime+0x44>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	e001      	b.n	8006630 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006630:	68fb      	ldr	r3, [r7, #12]
    }
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	20000384 	.word	0x20000384

08006644 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800664c:	f7ff fa3a 	bl	8005ac4 <xTaskGetTickCount>
 8006650:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006652:	4b0b      	ldr	r3, [pc, #44]	@ (8006680 <prvSampleTimeNow+0x3c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	429a      	cmp	r2, r3
 800665a:	d205      	bcs.n	8006668 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800665c:	f000 f918 	bl	8006890 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e002      	b.n	800666e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800666e:	4a04      	ldr	r2, [pc, #16]	@ (8006680 <prvSampleTimeNow+0x3c>)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006674:	68fb      	ldr	r3, [r7, #12]
    }
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000394 	.word	0x20000394

08006684 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d812      	bhi.n	80066d0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d302      	bcc.n	80066be <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80066b8:	2301      	movs	r3, #1
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	e01b      	b.n	80066f6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066be:	4b10      	ldr	r3, [pc, #64]	@ (8006700 <prvInsertTimerInActiveList+0x7c>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3304      	adds	r3, #4
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f7fe fb48 	bl	8004d5e <vListInsert>
 80066ce:	e012      	b.n	80066f6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d206      	bcs.n	80066e6 <prvInsertTimerInActiveList+0x62>
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d302      	bcc.n	80066e6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	e007      	b.n	80066f6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066e6:	4b07      	ldr	r3, [pc, #28]	@ (8006704 <prvInsertTimerInActiveList+0x80>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3304      	adds	r3, #4
 80066ee:	4619      	mov	r1, r3
 80066f0:	4610      	mov	r0, r2
 80066f2:	f7fe fb34 	bl	8004d5e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80066f6:	697b      	ldr	r3, [r7, #20]
    }
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20000388 	.word	0x20000388
 8006704:	20000384 	.word	0x20000384

08006708 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800670e:	e0ab      	b.n	8006868 <prvProcessReceivedCommands+0x160>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f2c0 80a8 	blt.w	8006868 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	3304      	adds	r3, #4
 8006728:	4618      	mov	r0, r3
 800672a:	f7fe fb51 	bl	8004dd0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff ff87 	bl	8006644 <prvSampleTimeNow>
 8006736:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	3b01      	subs	r3, #1
 800673c:	2b08      	cmp	r3, #8
 800673e:	f200 8090 	bhi.w	8006862 <prvProcessReceivedCommands+0x15a>
 8006742:	a201      	add	r2, pc, #4	@ (adr r2, 8006748 <prvProcessReceivedCommands+0x40>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	0800676d 	.word	0x0800676d
 800674c:	0800676d 	.word	0x0800676d
 8006750:	080067d5 	.word	0x080067d5
 8006754:	080067e9 	.word	0x080067e9
 8006758:	08006839 	.word	0x08006839
 800675c:	0800676d 	.word	0x0800676d
 8006760:	0800676d 	.word	0x0800676d
 8006764:	080067d5 	.word	0x080067d5
 8006768:	080067e9 	.word	0x080067e9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	18d1      	adds	r1, r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	69f8      	ldr	r0, [r7, #28]
 800678c:	f7ff ff7a 	bl	8006684 <prvInsertTimerInActiveList>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d067      	beq.n	8006866 <prvProcessReceivedCommands+0x15e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d009      	beq.n	80067b8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	4413      	add	r3, r2
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	4619      	mov	r1, r3
 80067b0:	69f8      	ldr	r0, [r7, #28]
 80067b2:	f7ff fe6f 	bl	8006494 <prvReloadTimer>
 80067b6:	e008      	b.n	80067ca <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067be:	f023 0301 	bic.w	r3, r3, #1
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	69f8      	ldr	r0, [r7, #28]
 80067d0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80067d2:	e048      	b.n	8006866 <prvProcessReceivedCommands+0x15e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 80067e6:	e03f      	b.n	8006868 <prvProcessReceivedCommands+0x160>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067ee:	f043 0301 	orr.w	r3, r3, #1
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10d      	bne.n	8006824 <prvProcessReceivedCommands+0x11c>
        __asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680c:	b672      	cpsid	i
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	b662      	cpsie	i
 800681c:	617b      	str	r3, [r7, #20]
    }
 800681e:	bf00      	nop
 8006820:	bf00      	nop
 8006822:	e7fd      	b.n	8006820 <prvProcessReceivedCommands+0x118>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	699a      	ldr	r2, [r3, #24]
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	18d1      	adds	r1, r2, r3
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	69f8      	ldr	r0, [r7, #28]
 8006832:	f7ff ff27 	bl	8006684 <prvInsertTimerInActiveList>
                        break;
 8006836:	e017      	b.n	8006868 <prvProcessReceivedCommands+0x160>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d103      	bne.n	800684e <prvProcessReceivedCommands+0x146>
                            {
                                vPortFree( pxTimer );
 8006846:	69f8      	ldr	r0, [r7, #28]
 8006848:	f000 fb42 	bl	8006ed0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800684c:	e00c      	b.n	8006868 <prvProcessReceivedCommands+0x160>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	b2da      	uxtb	r2, r3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8006860:	e002      	b.n	8006868 <prvProcessReceivedCommands+0x160>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <prvProcessReceivedCommands+0x160>
                        break;
 8006866:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006868:	4b08      	ldr	r3, [pc, #32]	@ (800688c <prvProcessReceivedCommands+0x184>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f107 0108 	add.w	r1, r7, #8
 8006870:	2200      	movs	r2, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f7fe fbdc 	bl	8005030 <xQueueReceive>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	f47f af48 	bne.w	8006710 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006880:	bf00      	nop
 8006882:	bf00      	nop
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	2000038c 	.word	0x2000038c

08006890 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006896:	e009      	b.n	80068ac <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006898:	4b0e      	ldr	r3, [pc, #56]	@ (80068d4 <prvSwitchTimerLists+0x44>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80068a2:	f04f 31ff 	mov.w	r1, #4294967295
 80068a6:	6838      	ldr	r0, [r7, #0]
 80068a8:	f7ff fe16 	bl	80064d8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068ac:	4b09      	ldr	r3, [pc, #36]	@ (80068d4 <prvSwitchTimerLists+0x44>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f0      	bne.n	8006898 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80068b6:	4b07      	ldr	r3, [pc, #28]	@ (80068d4 <prvSwitchTimerLists+0x44>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80068bc:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <prvSwitchTimerLists+0x48>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a04      	ldr	r2, [pc, #16]	@ (80068d4 <prvSwitchTimerLists+0x44>)
 80068c2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80068c4:	4a04      	ldr	r2, [pc, #16]	@ (80068d8 <prvSwitchTimerLists+0x48>)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6013      	str	r3, [r2, #0]
    }
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000384 	.word	0x20000384
 80068d8:	20000388 	.word	0x20000388

080068dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80068e0:	f000 f946 	bl	8006b70 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80068e4:	4b12      	ldr	r3, [pc, #72]	@ (8006930 <prvCheckForValidListAndQueue+0x54>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d11d      	bne.n	8006928 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80068ec:	4811      	ldr	r0, [pc, #68]	@ (8006934 <prvCheckForValidListAndQueue+0x58>)
 80068ee:	f7fe fa09 	bl	8004d04 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80068f2:	4811      	ldr	r0, [pc, #68]	@ (8006938 <prvCheckForValidListAndQueue+0x5c>)
 80068f4:	f7fe fa06 	bl	8004d04 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80068f8:	4b10      	ldr	r3, [pc, #64]	@ (800693c <prvCheckForValidListAndQueue+0x60>)
 80068fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006934 <prvCheckForValidListAndQueue+0x58>)
 80068fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80068fe:	4b10      	ldr	r3, [pc, #64]	@ (8006940 <prvCheckForValidListAndQueue+0x64>)
 8006900:	4a0d      	ldr	r2, [pc, #52]	@ (8006938 <prvCheckForValidListAndQueue+0x5c>)
 8006902:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006904:	2200      	movs	r2, #0
 8006906:	210c      	movs	r1, #12
 8006908:	200a      	movs	r0, #10
 800690a:	f7fe fb21 	bl	8004f50 <xQueueGenericCreate>
 800690e:	4603      	mov	r3, r0
 8006910:	4a07      	ldr	r2, [pc, #28]	@ (8006930 <prvCheckForValidListAndQueue+0x54>)
 8006912:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006914:	4b06      	ldr	r3, [pc, #24]	@ (8006930 <prvCheckForValidListAndQueue+0x54>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800691c:	4b04      	ldr	r3, [pc, #16]	@ (8006930 <prvCheckForValidListAndQueue+0x54>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4908      	ldr	r1, [pc, #32]	@ (8006944 <prvCheckForValidListAndQueue+0x68>)
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fcfa 	bl	800531c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006928:	f000 f958 	bl	8006bdc <vPortExitCritical>
    }
 800692c:	bf00      	nop
 800692e:	bd80      	pop	{r7, pc}
 8006930:	2000038c 	.word	0x2000038c
 8006934:	2000035c 	.word	0x2000035c
 8006938:	20000370 	.word	0x20000370
 800693c:	20000384 	.word	0x20000384
 8006940:	20000388 	.word	0x20000388
 8006944:	08007200 	.word	0x08007200

08006948 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3b04      	subs	r3, #4
 8006958:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006960:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3b04      	subs	r3, #4
 8006966:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f023 0201 	bic.w	r2, r3, #1
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3b04      	subs	r3, #4
 8006976:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006978:	4a0c      	ldr	r2, [pc, #48]	@ (80069ac <pxPortInitialiseStack+0x64>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3b14      	subs	r3, #20
 8006982:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3b04      	subs	r3, #4
 800698e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f06f 0202 	mvn.w	r2, #2
 8006996:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3b20      	subs	r3, #32
 800699c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800699e:	68fb      	ldr	r3, [r7, #12]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	080069b1 	.word	0x080069b1

080069b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80069ba:	4b15      	ldr	r3, [pc, #84]	@ (8006a10 <prvTaskExitError+0x60>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c2:	d00d      	beq.n	80069e0 <prvTaskExitError+0x30>
        __asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	b672      	cpsid	i
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	b662      	cpsie	i
 80069d8:	60fb      	str	r3, [r7, #12]
    }
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	e7fd      	b.n	80069dc <prvTaskExitError+0x2c>
        __asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e4:	b672      	cpsid	i
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	b662      	cpsie	i
 80069f4:	60bb      	str	r3, [r7, #8]
    }
 80069f6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80069f8:	bf00      	nop
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0fc      	beq.n	80069fa <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	20000024 	.word	0x20000024
	...

08006a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006a20:	4b07      	ldr	r3, [pc, #28]	@ (8006a40 <pxCurrentTCBConst2>)
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	6808      	ldr	r0, [r1, #0]
 8006a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2a:	f380 8809 	msr	PSP, r0
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8811 	msr	BASEPRI, r0
 8006a3a:	4770      	bx	lr
 8006a3c:	f3af 8000 	nop.w

08006a40 <pxCurrentTCBConst2>:
 8006a40:	20000258 	.word	0x20000258
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop

08006a48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006a48:	4808      	ldr	r0, [pc, #32]	@ (8006a6c <prvPortStartFirstTask+0x24>)
 8006a4a:	6800      	ldr	r0, [r0, #0]
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f380 8808 	msr	MSP, r0
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f380 8814 	msr	CONTROL, r0
 8006a5a:	b662      	cpsie	i
 8006a5c:	b661      	cpsie	f
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	df00      	svc	0
 8006a68:	bf00      	nop
 8006a6a:	0000      	.short	0x0000
 8006a6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop

08006a74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a7a:	4b37      	ldr	r3, [pc, #220]	@ (8006b58 <xPortStartScheduler+0xe4>)
 8006a7c:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	22ff      	movs	r2, #255	@ 0xff
 8006a8a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b5c <xPortStartScheduler+0xe8>)
 8006aa0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8006b60 <xPortStartScheduler+0xec>)
 8006aa4:	2207      	movs	r2, #7
 8006aa6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aa8:	e009      	b.n	8006abe <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8006aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8006b60 <xPortStartScheduler+0xec>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8006b60 <xPortStartScheduler+0xec>)
 8006ab2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac6:	2b80      	cmp	r3, #128	@ 0x80
 8006ac8:	d0ef      	beq.n	8006aaa <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aca:	4b25      	ldr	r3, [pc, #148]	@ (8006b60 <xPortStartScheduler+0xec>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1c3 0307 	rsb	r3, r3, #7
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d00d      	beq.n	8006af2 <xPortStartScheduler+0x7e>
        __asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	b672      	cpsid	i
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	b662      	cpsie	i
 8006aea:	60bb      	str	r3, [r7, #8]
    }
 8006aec:	bf00      	nop
 8006aee:	bf00      	nop
 8006af0:	e7fd      	b.n	8006aee <xPortStartScheduler+0x7a>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006af2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b60 <xPortStartScheduler+0xec>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	4a19      	ldr	r2, [pc, #100]	@ (8006b60 <xPortStartScheduler+0xec>)
 8006afa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006afc:	4b18      	ldr	r3, [pc, #96]	@ (8006b60 <xPortStartScheduler+0xec>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b04:	4a16      	ldr	r2, [pc, #88]	@ (8006b60 <xPortStartScheduler+0xec>)
 8006b06:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006b10:	4b14      	ldr	r3, [pc, #80]	@ (8006b64 <xPortStartScheduler+0xf0>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a13      	ldr	r2, [pc, #76]	@ (8006b64 <xPortStartScheduler+0xf0>)
 8006b16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b1a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006b1c:	4b11      	ldr	r3, [pc, #68]	@ (8006b64 <xPortStartScheduler+0xf0>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a10      	ldr	r2, [pc, #64]	@ (8006b64 <xPortStartScheduler+0xf0>)
 8006b22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b26:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006b28:	f000 f8e2 	bl	8006cf0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b68 <xPortStartScheduler+0xf4>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006b32:	f000 f901 	bl	8006d38 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b36:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <xPortStartScheduler+0xf8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8006b6c <xPortStartScheduler+0xf8>)
 8006b3c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b40:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006b42:	f7ff ff81 	bl	8006a48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006b46:	f7ff f8e7 	bl	8005d18 <vTaskSwitchContext>
    prvTaskExitError();
 8006b4a:	f7ff ff31 	bl	80069b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	e000e400 	.word	0xe000e400
 8006b5c:	20000398 	.word	0x20000398
 8006b60:	2000039c 	.word	0x2000039c
 8006b64:	e000ed20 	.word	0xe000ed20
 8006b68:	20000024 	.word	0x20000024
 8006b6c:	e000ef34 	.word	0xe000ef34

08006b70 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
        __asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	b672      	cpsid	i
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	b662      	cpsie	i
 8006b8a:	607b      	str	r3, [r7, #4]
    }
 8006b8c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006b8e:	4b11      	ldr	r3, [pc, #68]	@ (8006bd4 <vPortEnterCritical+0x64>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3301      	adds	r3, #1
 8006b94:	4a0f      	ldr	r2, [pc, #60]	@ (8006bd4 <vPortEnterCritical+0x64>)
 8006b96:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006b98:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd4 <vPortEnterCritical+0x64>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d112      	bne.n	8006bc6 <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd8 <vPortEnterCritical+0x68>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00d      	beq.n	8006bc6 <vPortEnterCritical+0x56>
        __asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	b672      	cpsid	i
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	b662      	cpsie	i
 8006bbe:	603b      	str	r3, [r7, #0]
    }
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <vPortEnterCritical+0x52>
    }
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	20000024 	.word	0x20000024
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006be2:	4b13      	ldr	r3, [pc, #76]	@ (8006c30 <vPortExitCritical+0x54>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10d      	bne.n	8006c06 <vPortExitCritical+0x2a>
        __asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	b672      	cpsid	i
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	b662      	cpsie	i
 8006bfe:	607b      	str	r3, [r7, #4]
    }
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8006c06:	4b0a      	ldr	r3, [pc, #40]	@ (8006c30 <vPortExitCritical+0x54>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	4a08      	ldr	r2, [pc, #32]	@ (8006c30 <vPortExitCritical+0x54>)
 8006c0e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006c10:	4b07      	ldr	r3, [pc, #28]	@ (8006c30 <vPortExitCritical+0x54>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d105      	bne.n	8006c24 <vPortExitCritical+0x48>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006c22:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	20000024 	.word	0x20000024
	...

08006c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006c40:	f3ef 8009 	mrs	r0, PSP
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	4b15      	ldr	r3, [pc, #84]	@ (8006ca0 <pxCurrentTCBConst>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	f01e 0f10 	tst.w	lr, #16
 8006c50:	bf08      	it	eq
 8006c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5a:	6010      	str	r0, [r2, #0]
 8006c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c64:	b672      	cpsid	i
 8006c66:	f380 8811 	msr	BASEPRI, r0
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	b662      	cpsie	i
 8006c74:	f7ff f850 	bl	8005d18 <vTaskSwitchContext>
 8006c78:	f04f 0000 	mov.w	r0, #0
 8006c7c:	f380 8811 	msr	BASEPRI, r0
 8006c80:	bc09      	pop	{r0, r3}
 8006c82:	6819      	ldr	r1, [r3, #0]
 8006c84:	6808      	ldr	r0, [r1, #0]
 8006c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8a:	f01e 0f10 	tst.w	lr, #16
 8006c8e:	bf08      	it	eq
 8006c90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c94:	f380 8809 	msr	PSP, r0
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop

08006ca0 <pxCurrentTCBConst>:
 8006ca0:	20000258 	.word	0x20000258
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
        __asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	b672      	cpsid	i
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	b662      	cpsie	i
 8006cc2:	607b      	str	r3, [r7, #4]
    }
 8006cc4:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006cc6:	f7fe ff0d 	bl	8005ae4 <xTaskIncrementTick>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cd0:	4b06      	ldr	r3, [pc, #24]	@ (8006cec <SysTick_Handler+0x44>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	f383 8811 	msr	BASEPRI, r3
    }
 8006ce2:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006ce4:	bf00      	nop
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	e000ed04 	.word	0xe000ed04

08006cf0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d24 <vPortSetupTimerInterrupt+0x34>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006d28 <vPortSetupTimerInterrupt+0x38>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d00:	4b0a      	ldr	r3, [pc, #40]	@ (8006d2c <vPortSetupTimerInterrupt+0x3c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a0a      	ldr	r2, [pc, #40]	@ (8006d30 <vPortSetupTimerInterrupt+0x40>)
 8006d06:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0a:	099b      	lsrs	r3, r3, #6
 8006d0c:	4a09      	ldr	r2, [pc, #36]	@ (8006d34 <vPortSetupTimerInterrupt+0x44>)
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d12:	4b04      	ldr	r3, [pc, #16]	@ (8006d24 <vPortSetupTimerInterrupt+0x34>)
 8006d14:	2207      	movs	r2, #7
 8006d16:	601a      	str	r2, [r3, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	e000e010 	.word	0xe000e010
 8006d28:	e000e018 	.word	0xe000e018
 8006d2c:	20000014 	.word	0x20000014
 8006d30:	10624dd3 	.word	0x10624dd3
 8006d34:	e000e014 	.word	0xe000e014

08006d38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006d38:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d48 <vPortEnableVFP+0x10>
 8006d3c:	6801      	ldr	r1, [r0, #0]
 8006d3e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d42:	6001      	str	r1, [r0, #0]
 8006d44:	4770      	bx	lr
 8006d46:	0000      	.short	0x0000
 8006d48:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006d4c:	bf00      	nop
 8006d4e:	bf00      	nop

08006d50 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	@ 0x28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006d5c:	f7fe fda6 	bl	80058ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006d60:	4b56      	ldr	r3, [pc, #344]	@ (8006ebc <pvPortMalloc+0x16c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006d68:	f000 f914 	bl	8006f94 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d012      	beq.n	8006d98 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006d72:	2208      	movs	r2, #8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	43db      	mvns	r3, r3
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d804      	bhi.n	8006d94 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	4413      	add	r3, r2
 8006d90:	607b      	str	r3, [r7, #4]
 8006d92:	e001      	b.n	8006d98 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	db73      	blt.n	8006e86 <pvPortMalloc+0x136>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d070      	beq.n	8006e86 <pvPortMalloc+0x136>
 8006da4:	4b46      	ldr	r3, [pc, #280]	@ (8006ec0 <pvPortMalloc+0x170>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d86b      	bhi.n	8006e86 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006dae:	4b45      	ldr	r3, [pc, #276]	@ (8006ec4 <pvPortMalloc+0x174>)
 8006db0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006db2:	4b44      	ldr	r3, [pc, #272]	@ (8006ec4 <pvPortMalloc+0x174>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006db8:	e004      	b.n	8006dc4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d903      	bls.n	8006dd6 <pvPortMalloc+0x86>
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f1      	bne.n	8006dba <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006dd6:	4b39      	ldr	r3, [pc, #228]	@ (8006ebc <pvPortMalloc+0x16c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d052      	beq.n	8006e86 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2208      	movs	r2, #8
 8006de6:	4413      	add	r3, r2
 8006de8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	1ad2      	subs	r2, r2, r3
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d922      	bls.n	8006e48 <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4413      	add	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00d      	beq.n	8006e30 <pvPortMalloc+0xe0>
        __asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e18:	b672      	cpsid	i
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	b662      	cpsie	i
 8006e28:	613b      	str	r3, [r7, #16]
    }
 8006e2a:	bf00      	nop
 8006e2c:	bf00      	nop
 8006e2e:	e7fd      	b.n	8006e2c <pvPortMalloc+0xdc>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	1ad2      	subs	r2, r2, r3
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e42:	6978      	ldr	r0, [r7, #20]
 8006e44:	f000 f902 	bl	800704c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e48:	4b1d      	ldr	r3, [pc, #116]	@ (8006ec0 <pvPortMalloc+0x170>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec0 <pvPortMalloc+0x170>)
 8006e54:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e56:	4b1a      	ldr	r3, [pc, #104]	@ (8006ec0 <pvPortMalloc+0x170>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec8 <pvPortMalloc+0x178>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d203      	bcs.n	8006e6a <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e62:	4b17      	ldr	r3, [pc, #92]	@ (8006ec0 <pvPortMalloc+0x170>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a18      	ldr	r2, [pc, #96]	@ (8006ec8 <pvPortMalloc+0x178>)
 8006e68:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006e7c:	4b13      	ldr	r3, [pc, #76]	@ (8006ecc <pvPortMalloc+0x17c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3301      	adds	r3, #1
 8006e82:	4a12      	ldr	r2, [pc, #72]	@ (8006ecc <pvPortMalloc+0x17c>)
 8006e84:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006e86:	f7fe fd1f 	bl	80058c8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00d      	beq.n	8006eb0 <pvPortMalloc+0x160>
        __asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e98:	b672      	cpsid	i
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	b662      	cpsie	i
 8006ea8:	60fb      	str	r3, [r7, #12]
    }
 8006eaa:	bf00      	nop
 8006eac:	bf00      	nop
 8006eae:	e7fd      	b.n	8006eac <pvPortMalloc+0x15c>
    return pvReturn;
 8006eb0:	69fb      	ldr	r3, [r7, #28]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3728      	adds	r7, #40	@ 0x28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20003fa8 	.word	0x20003fa8
 8006ec0:	20003fac 	.word	0x20003fac
 8006ec4:	20003fa0 	.word	0x20003fa0
 8006ec8:	20003fb0 	.word	0x20003fb0
 8006ecc:	20003fb4 	.word	0x20003fb4

08006ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d04f      	beq.n	8006f82 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006ee2:	2308      	movs	r3, #8
 8006ee4:	425b      	negs	r3, r3
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4413      	add	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	db0d      	blt.n	8006f14 <vPortFree+0x44>
        __asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	b672      	cpsid	i
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	b662      	cpsie	i
 8006f0c:	60fb      	str	r3, [r7, #12]
    }
 8006f0e:	bf00      	nop
 8006f10:	bf00      	nop
 8006f12:	e7fd      	b.n	8006f10 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00d      	beq.n	8006f38 <vPortFree+0x68>
        __asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f20:	b672      	cpsid	i
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	b662      	cpsie	i
 8006f30:	60bb      	str	r3, [r7, #8]
    }
 8006f32:	bf00      	nop
 8006f34:	bf00      	nop
 8006f36:	e7fd      	b.n	8006f34 <vPortFree+0x64>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	0fdb      	lsrs	r3, r3, #31
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01c      	beq.n	8006f82 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d118      	bne.n	8006f82 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006f5c:	f7fe fca6 	bl	80058ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	4b09      	ldr	r3, [pc, #36]	@ (8006f8c <vPortFree+0xbc>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4413      	add	r3, r2
 8006f6a:	4a08      	ldr	r2, [pc, #32]	@ (8006f8c <vPortFree+0xbc>)
 8006f6c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f6e:	6938      	ldr	r0, [r7, #16]
 8006f70:	f000 f86c 	bl	800704c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006f74:	4b06      	ldr	r3, [pc, #24]	@ (8006f90 <vPortFree+0xc0>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	4a05      	ldr	r2, [pc, #20]	@ (8006f90 <vPortFree+0xc0>)
 8006f7c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006f7e:	f7fe fca3 	bl	80058c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006f82:	bf00      	nop
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20003fac 	.word	0x20003fac
 8006f90:	20003fb8 	.word	0x20003fb8

08006f94 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f9a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006f9e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006fa0:	4b25      	ldr	r3, [pc, #148]	@ (8007038 <prvHeapInit+0xa4>)
 8006fa2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f003 0307 	and.w	r3, r3, #7
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00c      	beq.n	8006fc8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3307      	adds	r3, #7
 8006fb2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0307 	bic.w	r3, r3, #7
 8006fba:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8007038 <prvHeapInit+0xa4>)
 8006fc4:	4413      	add	r3, r2
 8006fc6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800703c <prvHeapInit+0xa8>)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800703c <prvHeapInit+0xa8>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	4413      	add	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0307 	bic.w	r3, r3, #7
 8006fee:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a13      	ldr	r2, [pc, #76]	@ (8007040 <prvHeapInit+0xac>)
 8006ff4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006ff6:	4b12      	ldr	r3, [pc, #72]	@ (8007040 <prvHeapInit+0xac>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006ffe:	4b10      	ldr	r3, [pc, #64]	@ (8007040 <prvHeapInit+0xac>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007014:	4b0a      	ldr	r3, [pc, #40]	@ (8007040 <prvHeapInit+0xac>)
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	4a08      	ldr	r2, [pc, #32]	@ (8007044 <prvHeapInit+0xb0>)
 8007022:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	4a07      	ldr	r2, [pc, #28]	@ (8007048 <prvHeapInit+0xb4>)
 800702a:	6013      	str	r3, [r2, #0]
}
 800702c:	bf00      	nop
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	200003a0 	.word	0x200003a0
 800703c:	20003fa0 	.word	0x20003fa0
 8007040:	20003fa8 	.word	0x20003fa8
 8007044:	20003fb0 	.word	0x20003fb0
 8007048:	20003fac 	.word	0x20003fac

0800704c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007054:	4b28      	ldr	r3, [pc, #160]	@ (80070f8 <prvInsertBlockIntoFreeList+0xac>)
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e002      	b.n	8007060 <prvInsertBlockIntoFreeList+0x14>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d8f7      	bhi.n	800705a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	4413      	add	r3, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d108      	bne.n	800708e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	441a      	add	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d118      	bne.n	80070d4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b15      	ldr	r3, [pc, #84]	@ (80070fc <prvInsertBlockIntoFreeList+0xb0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d00d      	beq.n	80070ca <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e008      	b.n	80070dc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070ca:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <prvInsertBlockIntoFreeList+0xb0>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e003      	b.n	80070dc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d002      	beq.n	80070ea <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	20003fa0 	.word	0x20003fa0
 80070fc:	20003fa8 	.word	0x20003fa8

08007100 <memset>:
 8007100:	4402      	add	r2, r0
 8007102:	4603      	mov	r3, r0
 8007104:	4293      	cmp	r3, r2
 8007106:	d100      	bne.n	800710a <memset+0xa>
 8007108:	4770      	bx	lr
 800710a:	f803 1b01 	strb.w	r1, [r3], #1
 800710e:	e7f9      	b.n	8007104 <memset+0x4>

08007110 <__libc_init_array>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4d0d      	ldr	r5, [pc, #52]	@ (8007148 <__libc_init_array+0x38>)
 8007114:	4c0d      	ldr	r4, [pc, #52]	@ (800714c <__libc_init_array+0x3c>)
 8007116:	1b64      	subs	r4, r4, r5
 8007118:	10a4      	asrs	r4, r4, #2
 800711a:	2600      	movs	r6, #0
 800711c:	42a6      	cmp	r6, r4
 800711e:	d109      	bne.n	8007134 <__libc_init_array+0x24>
 8007120:	4d0b      	ldr	r5, [pc, #44]	@ (8007150 <__libc_init_array+0x40>)
 8007122:	4c0c      	ldr	r4, [pc, #48]	@ (8007154 <__libc_init_array+0x44>)
 8007124:	f000 f826 	bl	8007174 <_init>
 8007128:	1b64      	subs	r4, r4, r5
 800712a:	10a4      	asrs	r4, r4, #2
 800712c:	2600      	movs	r6, #0
 800712e:	42a6      	cmp	r6, r4
 8007130:	d105      	bne.n	800713e <__libc_init_array+0x2e>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	f855 3b04 	ldr.w	r3, [r5], #4
 8007138:	4798      	blx	r3
 800713a:	3601      	adds	r6, #1
 800713c:	e7ee      	b.n	800711c <__libc_init_array+0xc>
 800713e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007142:	4798      	blx	r3
 8007144:	3601      	adds	r6, #1
 8007146:	e7f2      	b.n	800712e <__libc_init_array+0x1e>
 8007148:	08007228 	.word	0x08007228
 800714c:	08007228 	.word	0x08007228
 8007150:	08007228 	.word	0x08007228
 8007154:	0800722c 	.word	0x0800722c

08007158 <memcpy>:
 8007158:	440a      	add	r2, r1
 800715a:	4291      	cmp	r1, r2
 800715c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007160:	d100      	bne.n	8007164 <memcpy+0xc>
 8007162:	4770      	bx	lr
 8007164:	b510      	push	{r4, lr}
 8007166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800716a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800716e:	4291      	cmp	r1, r2
 8007170:	d1f9      	bne.n	8007166 <memcpy+0xe>
 8007172:	bd10      	pop	{r4, pc}

08007174 <_init>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr

08007180 <_fini>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr

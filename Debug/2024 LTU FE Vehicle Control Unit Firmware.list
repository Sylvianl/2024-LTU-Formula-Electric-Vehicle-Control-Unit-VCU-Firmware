
2024 LTU FE Vehicle Control Unit Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080085e8  080085e8  000095e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008684  08008684  0000a028  2**0
                  CONTENTS
  4 .ARM          00000008  08008684  08008684  00009684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800868c  0800868c  0000a028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800868c  0800868c  0000968c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008690  08008690  00009690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08008694  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ff4  20000028  080086bc  0000a028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000401c  080086bc  0000b01c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017436  00000000  00000000  0000a056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003390  00000000  00000000  0002148c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00024820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001023  00000000  00000000  00025ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a81a  00000000  00000000  00026d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018404  00000000  00000000  00051525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f60c  00000000  00000000  00069929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00178f35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c0  00000000  00000000  00178f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  0017e738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000028 	.word	0x20000028
 800021c:	00000000 	.word	0x00000000
 8000220:	080085d0 	.word	0x080085d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000002c 	.word	0x2000002c
 800023c:	080085d0 	.word	0x080085d0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <initializeCAN>:
 */

#include "CAN.h"

void initializeCAN(CAN_HandleTypeDef* hcan)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f002 fd37 	bl	8002fac <HAL_CAN_Start>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <initializeCAN+0x18>
	{
		Error_Handler();
 8000544:	f001 faaf 	bl	8001aa6 <Error_Handler>
	}

	configTempSenseCANFilter(hcan);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f941 	bl	80007d0 <configTempSenseCANFilter>

	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800054e:	2102      	movs	r1, #2
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f002 ff75 	bl	8003440 <HAL_CAN_ActivateNotification>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <initializeCAN+0x30>
	{
		Error_Handler();
 800055c:	f001 faa3 	bl	8001aa6 <Error_Handler>
	}
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <nodeGuarding>:

void nodeGuarding(CAN_HandleTypeDef* hcan)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[1] = { (0x00U) };
 8000570:	2300      	movs	r3, #0
 8000572:	733b      	strb	r3, [r7, #12]
	uint32_t mailbox;

	txHeader.DLC = ECU_EMD_NMT_node_guarding_DLC;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
	txHeader.ExtId = DISABLE;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
	txHeader.IDE = CAN_ID_STD;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_REMOTE;
 8000580:	2302      	movs	r3, #2
 8000582:	61fb      	str	r3, [r7, #28]
	txHeader.StdId = ECU_EMD_NMT_node_guarding_CANID;
 8000584:	f240 737a 	movw	r3, #1914	@ 0x77a
 8000588:	613b      	str	r3, [r7, #16]
	txHeader.TransmitGlobalTime = DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	f107 020c 	add.w	r2, r7, #12
 8000598:	f107 0110 	add.w	r1, r7, #16
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f002 fd49 	bl	8003034 <HAL_CAN_AddTxMessage>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <nodeGuarding+0x44>
	{
		Error_Handler();
 80005a8:	f001 fa7d 	bl	8001aa6 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 80005ac:	bf00      	nop
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4619      	mov	r1, r3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f002 fe0e 	bl	80031d4 <HAL_CAN_IsTxMessagePending>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1f7      	bne.n	80005ae <nodeGuarding+0x46>

	return;
 80005be:	bf00      	nop
}
 80005c0:	3728      	adds	r7, #40	@ 0x28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <startNode>:

void startNode(CAN_HandleTypeDef* hcan)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08e      	sub	sp, #56	@ 0x38
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 80005d0:	4a1e      	ldr	r2, [pc, #120]	@ (800064c <startNode+0x84>)
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005da:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	ECU_NMT_command_t nmt_t;
	uint8_t len, ide;

	nmt_t.ECU_NMT_CommandSpecifier = (0x01U);
 80005de:	2301      	movs	r3, #1
 80005e0:	743b      	strb	r3, [r7, #16]
	nmt_t.ECU_NMT_NodeId = (0x7AU);
 80005e2:	237a      	movs	r3, #122	@ 0x7a
 80005e4:	747b      	strb	r3, [r7, #17]

	Pack_ECU_NMT_command__DO_QUASAR_CANopen(&nmt_t, data, &len, &ide);
 80005e6:	f107 030e 	add.w	r3, r7, #14
 80005ea:	f107 020f 	add.w	r2, r7, #15
 80005ee:	f107 0118 	add.w	r1, r7, #24
 80005f2:	f107 0010 	add.w	r0, r7, #16
 80005f6:	f000 f914 	bl	8000822 <Pack_ECU_NMT_command__DO_QUASAR_CANopen>

	txHeader.DLC = ECU_NMT_command_DLC;
 80005fa:	2302      	movs	r3, #2
 80005fc:	633b      	str	r3, [r7, #48]	@ 0x30
	txHeader.ExtId = DISABLE;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.IDE = ide;
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.RTR = CAN_RTR_DATA;
 8000606:	2300      	movs	r3, #0
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	txHeader.StdId = ECU_NMT_command_CANID;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
	txHeader.TransmitGlobalTime = DISABLE;
 800060e:	2300      	movs	r3, #0
 8000610:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	f107 0218 	add.w	r2, r7, #24
 800061c:	f107 0120 	add.w	r1, r7, #32
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f002 fd07 	bl	8003034 <HAL_CAN_AddTxMessage>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <startNode+0x68>
	{
		Error_Handler();
 800062c:	f001 fa3b 	bl	8001aa6 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 8000630:	bf00      	nop
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	4619      	mov	r1, r3
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f002 fdcc 	bl	80031d4 <HAL_CAN_IsTxMessagePending>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f7      	bne.n	8000632 <startNode+0x6a>

	return;
 8000642:	bf00      	nop
}
 8000644:	3738      	adds	r7, #56	@ 0x38
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	080085e8 	.word	0x080085e8

08000650 <clearErrors>:

void clearErrors(CAN_HandleTypeDef* hcan)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b092      	sub	sp, #72	@ 0x48
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 8000658:	4a29      	ldr	r2, [pc, #164]	@ (8000700 <clearErrors+0xb0>)
 800065a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800065e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000662:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	EMD_RxPDO_3_t rxPDO3_t;
	uint8_t len, ide;

	rxPDO3_t.EMD_CMD_ActiveDischarge = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	777b      	strb	r3, [r7, #29]
	rxPDO3_t.EMD_CMD_ClearErrors = (0x01U);
 800066a:	2301      	movs	r3, #1
 800066c:	76fb      	strb	r3, [r7, #27]
	rxPDO3_t.EMD_CMD_ControlMode = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	763b      	strb	r3, [r7, #24]
	rxPDO3_t.EMD_CMD_DigitalOutput1 = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f887 3020 	strb.w	r3, [r7, #32]
	rxPDO3_t.EMD_CMD_DigitalOutput2 = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	77fb      	strb	r3, [r7, #31]
	rxPDO3_t.EMD_CMD_LimitationMode = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	77bb      	strb	r3, [r7, #30]
	rxPDO3_t.EMD_CMD_RestartRequest = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	773b      	strb	r3, [r7, #28]
	rxPDO3_t.EMD_CMD_SpeedRefLim = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
	rxPDO3_t.EMD_CMD_SpeedRefLim_VAL = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	76bb      	strb	r3, [r7, #26]
	rxPDO3_t.EMD_CMD_TorqueRefLim = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	823b      	strh	r3, [r7, #16]
	rxPDO3_t.EMD_CMD_TorqueRefLim_VAL = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	74bb      	strb	r3, [r7, #18]
	rxPDO3_t.EMD_MSGCNT_RxPDO3 = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	767b      	strb	r3, [r7, #25]

	Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(&rxPDO3_t, data, &len, &ide);
 8000698:	f107 030e 	add.w	r3, r7, #14
 800069c:	f107 020f 	add.w	r2, r7, #15
 80006a0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80006a4:	f107 0010 	add.w	r0, r7, #16
 80006a8:	f000 f8ef 	bl	800088a <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>

	txHeader.DLC = len;
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
	txHeader.ExtId = DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
	txHeader.IDE = ide;
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
	txHeader.RTR = CAN_RTR_DATA;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
	txHeader.StdId = EMD_RxPDO_3_CANID;
 80006bc:	f240 437a 	movw	r3, #1146	@ 0x47a
 80006c0:	633b      	str	r3, [r7, #48]	@ 0x30
	txHeader.TransmitGlobalTime = DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 80006c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80006d0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f002 fcad 	bl	8003034 <HAL_CAN_AddTxMessage>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <clearErrors+0x94>
	{
		Error_Handler();
 80006e0:	f001 f9e1 	bl	8001aa6 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 80006e4:	bf00      	nop
 80006e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e8:	4619      	mov	r1, r3
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f002 fd72 	bl	80031d4 <HAL_CAN_IsTxMessagePending>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f7      	bne.n	80006e6 <clearErrors+0x96>

	return;
 80006f6:	bf00      	nop
}
 80006f8:	3748      	adds	r7, #72	@ 0x48
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	080085e8 	.word	0x080085e8

08000704 <torqueControlMessage>:

void torqueControlMessage(CAN_HandleTypeDef* hcan, int _speedRefLimit, int* _torqueRefLimit)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 8000710:	4a2e      	ldr	r2, [pc, #184]	@ (80007cc <torqueControlMessage+0xc8>)
 8000712:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000716:	e892 0003 	ldmia.w	r2, {r0, r1}
 800071a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	EMD_RxPDO_3_t rxPDO3_t;
	uint8_t len, ide;

	rxPDO3_t.EMD_CMD_ActiveDischarge = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	rxPDO3_t.EMD_CMD_ClearErrors = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	rxPDO3_t.EMD_CMD_ControlMode = (0x01U);
 800072a:	2301      	movs	r3, #1
 800072c:	f887 3020 	strb.w	r3, [r7, #32]
	rxPDO3_t.EMD_CMD_DigitalOutput1 = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	rxPDO3_t.EMD_CMD_DigitalOutput2 = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	rxPDO3_t.EMD_CMD_LimitationMode = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	rxPDO3_t.EMD_CMD_RestartRequest = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	rxPDO3_t.EMD_CMD_SpeedRefLim = _speedRefLimit;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	61fb      	str	r3, [r7, #28]
	rxPDO3_t.EMD_CMD_SpeedRefLim_VAL = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	rxPDO3_t.EMD_CMD_TorqueRefLim = *_torqueRefLimit;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	b21b      	sxth	r3, r3
 8000758:	833b      	strh	r3, [r7, #24]
	rxPDO3_t.EMD_CMD_TorqueRefLim_VAL = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	76bb      	strb	r3, [r7, #26]
	rxPDO3_t.EMD_MSGCNT_RxPDO3 = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(&rxPDO3_t, data, &len, &ide);
 8000764:	f107 0316 	add.w	r3, r7, #22
 8000768:	f107 0217 	add.w	r2, r7, #23
 800076c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000770:	f107 0018 	add.w	r0, r7, #24
 8000774:	f000 f889 	bl	800088a <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>

	txHeader.DLC = EMD_RxPDO_3_DLC;
 8000778:	2306      	movs	r3, #6
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
	txHeader.ExtId = DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	txHeader.IDE = ide;
 8000780:	7dbb      	ldrb	r3, [r7, #22]
 8000782:	643b      	str	r3, [r7, #64]	@ 0x40
	txHeader.RTR = CAN_RTR_DATA;
 8000784:	2300      	movs	r3, #0
 8000786:	647b      	str	r3, [r7, #68]	@ 0x44
	txHeader.StdId = EMD_RxPDO_3_CANID;
 8000788:	f240 437a 	movw	r3, #1146	@ 0x47a
 800078c:	63bb      	str	r3, [r7, #56]	@ 0x38
	txHeader.TransmitGlobalTime = DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 8000794:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000798:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800079c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f002 fc47 	bl	8003034 <HAL_CAN_AddTxMessage>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <torqueControlMessage+0xac>
	{
		Error_Handler();
 80007ac:	f001 f97b 	bl	8001aa6 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 80007b0:	bf00      	nop
 80007b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f002 fd0c 	bl	80031d4 <HAL_CAN_IsTxMessagePending>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f7      	bne.n	80007b2 <torqueControlMessage+0xae>

	return;
 80007c2:	bf00      	nop
}
 80007c4:	3750      	adds	r7, #80	@ 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	080085e8 	.word	0x080085e8

080007d0 <configTempSenseCANFilter>:

void configTempSenseCANFilter(CAN_HandleTypeDef* hcan)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 80007d8:	2301      	movs	r3, #1
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.FilterBank = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_LOW_PRIORITY_FIFO;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = ((0x301U)<<5);
 80007e4:	f246 0320 	movw	r3, #24608	@ 0x6020
 80007e8:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = (0x000U);
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = ((0x301U)<<5);
 80007ee:	f246 0320 	movw	r3, #24608	@ 0x6020
 80007f2:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = (0x000U);
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80007fc:	2301      	movs	r3, #1
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.SlaveStartFilterBank = 14;
 8000800:	230e      	movs	r3, #14
 8000802:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &filter) != HAL_OK)
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4619      	mov	r1, r3
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f002 fae2 	bl	8002dd4 <HAL_CAN_ConfigFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <configTempSenseCANFilter+0x4a>
	{
		Error_Handler();
 8000816:	f001 f946 	bl	8001aa6 <Error_Handler>
	}
}
 800081a:	bf00      	nop
 800081c:	3730      	adds	r7, #48	@ 0x30
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <Pack_ECU_NMT_command__DO_QUASAR_CANopen>:
  _m->ECU_NMT_NodeId = (_d[1] & (0xFFU));
  return ECU_NMT_command_CANID;
}

uint32_t Pack_ECU_NMT_command__DO_QUASAR_CANopen(const ECU_NMT_command_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000822:	b480      	push	{r7}
 8000824:	b087      	sub	sp, #28
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < ECU_NMT_command_DLC; _d[i++] = 0);
 8000830:	2300      	movs	r3, #0
 8000832:	75fb      	strb	r3, [r7, #23]
 8000834:	e007      	b.n	8000846 <Pack_ECU_NMT_command__DO_QUASAR_CANopen+0x24>
 8000836:	7dfb      	ldrb	r3, [r7, #23]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	75fa      	strb	r2, [r7, #23]
 800083c:	461a      	mov	r2, r3
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	4413      	add	r3, r2
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d9f4      	bls.n	8000836 <Pack_ECU_NMT_command__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->ECU_NMT_CommandSpecifier & (0xFFU));
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	781a      	ldrb	r2, [r3, #0]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4313      	orrs	r3, r2
 8000856:	b2da      	uxtb	r2, r3
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	701a      	strb	r2, [r3, #0]
  _d[1] |= (_m->ECU_NMT_NodeId & (0xFFU));
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3301      	adds	r3, #1
 8000860:	7819      	ldrb	r1, [r3, #0]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	785a      	ldrb	r2, [r3, #1]
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	3301      	adds	r3, #1
 800086a:	430a      	orrs	r2, r1
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	701a      	strb	r2, [r3, #0]
  *_len = 2; *_ide = 0;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2202      	movs	r2, #2
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
  return ECU_NMT_command_CANID;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	371c      	adds	r7, #28
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>:
  _m->EMD_CMD_DigitalOutput1 = ((_d[5] >> 7) & (0x01U));
  return EMD_RxPDO_3_CANID;
}

uint32_t Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(const EMD_RxPDO_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 800088a:	b480      	push	{r7}
 800088c:	b087      	sub	sp, #28
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < EMD_RxPDO_3_DLC; _d[i++] = 0);
 8000898:	2300      	movs	r3, #0
 800089a:	75fb      	strb	r3, [r7, #23]
 800089c:	e007      	b.n	80008ae <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen+0x24>
 800089e:	7dfb      	ldrb	r3, [r7, #23]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	75fa      	strb	r2, [r7, #23]
 80008a4:	461a      	mov	r2, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	4413      	add	r3, r2
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	7dfb      	ldrb	r3, [r7, #23]
 80008b0:	2b05      	cmp	r3, #5
 80008b2:	d9f4      	bls.n	800089e <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->EMD_CMD_TorqueRefLim & (0xFFU));
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	701a      	strb	r2, [r3, #0]
  _d[1] |= ((_m->EMD_CMD_TorqueRefLim >> 8) & (0x3FU)) | ((_m->EMD_CMD_TorqueRefLim_VAL & (0x03U)) << 6);
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	3301      	adds	r3, #1
 80008cc:	7819      	ldrb	r1, [r3, #0]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008d4:	121b      	asrs	r3, r3, #8
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	019b      	lsls	r3, r3, #6
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4313      	orrs	r3, r2
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	3301      	adds	r3, #1
 80008f0:	430a      	orrs	r2, r1
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	701a      	strb	r2, [r3, #0]
  _d[2] |= (_m->EMD_CMD_SpeedRefLim & (0xFFU));
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	3302      	adds	r3, #2
 80008fa:	7819      	ldrb	r1, [r3, #0]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	3302      	adds	r3, #2
 8000906:	430a      	orrs	r2, r1
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	701a      	strb	r2, [r3, #0]
  _d[3] |= ((_m->EMD_CMD_SpeedRefLim >> 8) & (0xFFU));
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3303      	adds	r3, #3
 8000910:	7819      	ldrb	r1, [r3, #0]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	121b      	asrs	r3, r3, #8
 8000918:	b2da      	uxtb	r2, r3
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3303      	adds	r3, #3
 800091e:	430a      	orrs	r2, r1
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	701a      	strb	r2, [r3, #0]
  _d[4] |= (_m->EMD_CMD_ControlMode & (0x0FU)) | ((_m->EMD_MSGCNT_RxPDO3 & (0x0FU)) << 4);
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	3304      	adds	r3, #4
 8000928:	7819      	ldrb	r1, [r3, #0]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	7a1b      	ldrb	r3, [r3, #8]
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	b2da      	uxtb	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	7a5b      	ldrb	r3, [r3, #9]
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4313      	orrs	r3, r2
 800093e:	b2da      	uxtb	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	3304      	adds	r3, #4
 8000944:	430a      	orrs	r2, r1
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	701a      	strb	r2, [r3, #0]
  _d[5] |= (_m->EMD_CMD_SpeedRefLim_VAL & (0x03U)) | ((_m->EMD_CMD_ClearErrors & (0x01U)) << 2) | ((_m->EMD_CMD_RestartRequest & (0x01U)) << 3) | ((_m->EMD_CMD_ActiveDischarge & (0x01U)) << 4) | ((_m->EMD_CMD_LimitationMode & (0x01U)) << 5) | ((_m->EMD_CMD_DigitalOutput2 & (0x01U)) << 6) | ((_m->EMD_CMD_DigitalOutput1 & (0x01U)) << 7);
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	3305      	adds	r3, #5
 800094e:	7819      	ldrb	r1, [r3, #0]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	7a9b      	ldrb	r3, [r3, #10]
 8000954:	f003 0303 	and.w	r3, r3, #3
 8000958:	b2da      	uxtb	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	7adb      	ldrb	r3, [r3, #11]
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4313      	orrs	r3, r2
 800096a:	b2da      	uxtb	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	7b1b      	ldrb	r3, [r3, #12]
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	b2da      	uxtb	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	7b5b      	ldrb	r3, [r3, #13]
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	b2db      	uxtb	r3, r3
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b2da      	uxtb	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	7b9b      	ldrb	r3, [r3, #14]
 8000994:	015b      	lsls	r3, r3, #5
 8000996:	b2db      	uxtb	r3, r3
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	7bdb      	ldrb	r3, [r3, #15]
 80009a6:	019b      	lsls	r3, r3, #6
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	7c1b      	ldrb	r3, [r3, #16]
 80009b8:	01db      	lsls	r3, r3, #7
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4313      	orrs	r3, r2
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	3305      	adds	r3, #5
 80009c4:	430a      	orrs	r2, r1
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	701a      	strb	r2, [r3, #0]
  *_len = 6; *_ide = 0;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2206      	movs	r2, #6
 80009ce:	701a      	strb	r2, [r3, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
  return EMD_RxPDO_3_CANID;
 80009d6:	f240 437a 	movw	r3, #1146	@ 0x47a
}
 80009da:	4618      	mov	r0, r3
 80009dc:	371c      	adds	r7, #28
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <Unpack_IMD_Info_Isolation>:

#include "isolation.h"

// --------------------------------------------------------------------------
uint32_t Unpack_IMD_Info_Isolation(IMD_Info_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71fb      	strb	r3, [r7, #7]
  _m->D_IMC_R_ISO = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	3301      	adds	r3, #1
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	801a      	strh	r2, [r3, #0]
  _m->D_IMC_STATUS = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	3303      	adds	r3, #3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	3202      	adds	r2, #2
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	805a      	strh	r2, [r3, #2]
  _m->D_VIFC_STATUS = ((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU));
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	3305      	adds	r3, #5
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	021b      	lsls	r3, r3, #8
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	3204      	adds	r2, #4
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	809a      	strh	r2, [r3, #4]
  return IMD_Info_CANID;
 8000a3a:	2337      	movs	r3, #55	@ 0x37
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x40>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x40>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00
 8000a8c:	05fa0000 	.word	0x05fa0000

08000a90 <HAL_TIM_OC_DelayElapsedCallback>:
QueueHandle_t lowPriorityQueue;
QueueHandle_t highPriorityQueue;

// RTD Speaker ISR
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(htim);

	HAL_GPIO_WritePin(RTD_PIN_PORT, RTD_PIN, RTD_DISABLE);
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 f9be 	bl	8003e24 <HAL_GPIO_WritePin>

	HAL_TIM_OC_Stop_IT(&htim1, IGNITION_OUPUT_CAPTURE);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8000aae:	f004 f8ff 	bl	8004cb0 <HAL_TIM_OC_Stop_IT>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	200000dc 	.word	0x200000dc

08000ac4 <HAL_CAN_RxFifo0MsgPendingCallback>:

// CAN ISR

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b090      	sub	sp, #64	@ 0x40
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rxHeaderFIFO0;
	uint8_t dataFIFO0[8];
	CAN_MsgHeaderTypedef msgFIFO0;

	if (hcan->Instance == CAN1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	@ (8000b38 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d12c      	bne.n	8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
	{
		if (HAL_CAN_GetRxMessage(hcan, CAN_LOW_PRIORITY_FIFO, &rxHeaderFIFO0, dataFIFO0) == HAL_OK)
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000ade:	2100      	movs	r1, #0
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f002 fb9b 	bl	800321c <HAL_CAN_GetRxMessage>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d121      	bne.n	8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		{
			msgFIFO0.StdID = rxHeaderFIFO0.StdId;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	617b      	str	r3, [r7, #20]
			msgFIFO0.RTR = rxHeaderFIFO0.RTR;
 8000af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000af2:	61bb      	str	r3, [r7, #24]

			memcpy(msgFIFO0.data, dataFIFO0, 8);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	f107 021c 	add.w	r2, r7, #28
 8000afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b00:	e883 0003 	stmia.w	r3, {r0, r1}

			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
			xQueueSendFromISR(lowPriorityQueue, &msgFIFO0, &xHigherPriorityTaskWoken);
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	f107 0208 	add.w	r2, r7, #8
 8000b10:	f107 010c 	add.w	r1, r7, #12
 8000b14:	2300      	movs	r3, #0
 8000b16:	f005 fa99 	bl	800604c <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d007      	beq.n	8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	f3bf 8f4f 	dsb	sy
 8000b2c:	f3bf 8f6f 	isb	sy

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000b30:	bf00      	nop
 8000b32:	3740      	adds	r7, #64	@ 0x40
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40006400 	.word	0x40006400
 8000b3c:	2000021c 	.word	0x2000021c
 8000b40:	e000ed04 	.word	0xe000ed04

08000b44 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5e:	f001 fbe2 	bl	8002326 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f929 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f000 fb27 	bl	80011b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b6a:	f000 f98f 	bl	8000e8c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000b6e:	f000 fa0b 	bl	8000f88 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000b72:	f000 fa3f 	bl	8000ff4 <MX_CAN2_Init>
  MX_TIM1_Init();
 8000b76:	f000 fa73 	bl	8001060 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // ISR Priority reset
  NVIC_SetPriorityGrouping(0);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ff64 	bl	8000a48 <__NVIC_SetPriorityGrouping>

  // Initialize CAN1
  initializeCAN(&hcan1);
 8000b80:	4875      	ldr	r0, [pc, #468]	@ (8000d58 <main+0x200>)
 8000b82:	f7ff fcd5 	bl	8000530 <initializeCAN>

  // CAN FAULT State -> Good
  HAL_GPIO_WritePin(CAN_FAULT_PORT, CAN_FAULT_PIN, NO_FAULT_STATE);
 8000b86:	4b75      	ldr	r3, [pc, #468]	@ (8000d5c <main+0x204>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2140      	movs	r1, #64	@ 0x40
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 f948 	bl	8003e24 <HAL_GPIO_WritePin>

  // Enable CAN 1 Transreceiver
  HAL_GPIO_WritePin(CAN_ENABLE_1_PORT, CAN_ENABLE_1_PIN, CAN_ENABLE);
 8000b94:	4b72      	ldr	r3, [pc, #456]	@ (8000d60 <main+0x208>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 f940 	bl	8003e24 <HAL_GPIO_WritePin>

  /***************************** Queue Creation *****************************/

  lowPriorityQueue = xQueueCreate(10, sizeof(CAN_MsgHeaderTypedef));
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	200a      	movs	r0, #10
 8000baa:	f005 f9df 	bl	8005f6c <xQueueGenericCreate>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a6c      	ldr	r2, [pc, #432]	@ (8000d64 <main+0x20c>)
 8000bb2:	6013      	str	r3, [r2, #0]

  if (lowPriorityQueue == NULL)
 8000bb4:	4b6b      	ldr	r3, [pc, #428]	@ (8000d64 <main+0x20c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <main+0x68>
  {
	  Error_Handler();
 8000bbc:	f000 ff73 	bl	8001aa6 <Error_Handler>
  }

  highPriorityQueue = xQueueCreate(5, sizeof(CAN_MsgHeaderTypedef));
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f005 f9d1 	bl	8005f6c <xQueueGenericCreate>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a66      	ldr	r2, [pc, #408]	@ (8000d68 <main+0x210>)
 8000bce:	6013      	str	r3, [r2, #0]

  if (highPriorityQueue == NULL)
 8000bd0:	4b65      	ldr	r3, [pc, #404]	@ (8000d68 <main+0x210>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d101      	bne.n	8000bdc <main+0x84>
  {
	  Error_Handler();
 8000bd8:	f000 ff65 	bl	8001aa6 <Error_Handler>
  }

  /***************************** Task Creation *****************************/

  xReturned = xTaskCreate(Task1_Handler, "Node_Guarding", 200, NULL, tskIDLE_PRIORITY + 3, &task1Handle);
 8000bdc:	4b63      	ldr	r3, [pc, #396]	@ (8000d6c <main+0x214>)
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	2303      	movs	r3, #3
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2300      	movs	r3, #0
 8000be6:	22c8      	movs	r2, #200	@ 0xc8
 8000be8:	4961      	ldr	r1, [pc, #388]	@ (8000d70 <main+0x218>)
 8000bea:	4862      	ldr	r0, [pc, #392]	@ (8000d74 <main+0x21c>)
 8000bec:	f005 fd54 	bl	8006698 <xTaskCreate>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a61      	ldr	r2, [pc, #388]	@ (8000d78 <main+0x220>)
 8000bf4:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000bf6:	4b60      	ldr	r3, [pc, #384]	@ (8000d78 <main+0x220>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d00d      	beq.n	8000c1a <main+0xc2>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c02:	b672      	cpsid	i
 8000c04:	f383 8811 	msr	BASEPRI, r3
 8000c08:	f3bf 8f6f 	isb	sy
 8000c0c:	f3bf 8f4f 	dsb	sy
 8000c10:	b662      	cpsie	i
 8000c12:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	e7fd      	b.n	8000c16 <main+0xbe>

  xReturned = xTaskCreate(Task2_Handler, "Torque_Control", 200, NULL, tskIDLE_PRIORITY + 2, &task2Handle);
 8000c1a:	4b58      	ldr	r3, [pc, #352]	@ (8000d7c <main+0x224>)
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	2302      	movs	r3, #2
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2300      	movs	r3, #0
 8000c24:	22c8      	movs	r2, #200	@ 0xc8
 8000c26:	4956      	ldr	r1, [pc, #344]	@ (8000d80 <main+0x228>)
 8000c28:	4856      	ldr	r0, [pc, #344]	@ (8000d84 <main+0x22c>)
 8000c2a:	f005 fd35 	bl	8006698 <xTaskCreate>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a51      	ldr	r2, [pc, #324]	@ (8000d78 <main+0x220>)
 8000c32:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000c34:	4b50      	ldr	r3, [pc, #320]	@ (8000d78 <main+0x220>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d00d      	beq.n	8000c58 <main+0x100>
        __asm volatile
 8000c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c40:	b672      	cpsid	i
 8000c42:	f383 8811 	msr	BASEPRI, r3
 8000c46:	f3bf 8f6f 	isb	sy
 8000c4a:	f3bf 8f4f 	dsb	sy
 8000c4e:	b662      	cpsie	i
 8000c50:	613b      	str	r3, [r7, #16]
    }
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <main+0xfc>

  xReturned = xTaskCreate(Task3_Handler, "Ignition", 200, NULL, tskIDLE_PRIORITY + 1, &task3Handle);
 8000c58:	4b4b      	ldr	r3, [pc, #300]	@ (8000d88 <main+0x230>)
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2300      	movs	r3, #0
 8000c62:	22c8      	movs	r2, #200	@ 0xc8
 8000c64:	4949      	ldr	r1, [pc, #292]	@ (8000d8c <main+0x234>)
 8000c66:	484a      	ldr	r0, [pc, #296]	@ (8000d90 <main+0x238>)
 8000c68:	f005 fd16 	bl	8006698 <xTaskCreate>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4a42      	ldr	r2, [pc, #264]	@ (8000d78 <main+0x220>)
 8000c70:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000c72:	4b41      	ldr	r3, [pc, #260]	@ (8000d78 <main+0x220>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d00d      	beq.n	8000c96 <main+0x13e>
        __asm volatile
 8000c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c7e:	b672      	cpsid	i
 8000c80:	f383 8811 	msr	BASEPRI, r3
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	f3bf 8f4f 	dsb	sy
 8000c8c:	b662      	cpsie	i
 8000c8e:	60fb      	str	r3, [r7, #12]
    }
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	e7fd      	b.n	8000c92 <main+0x13a>

  xReturned = xTaskCreate(Task4_Handler, "Process_CAN_Data", 200, NULL, tskIDLE_PRIORITY + 1, &task4Handle);
 8000c96:	4b3f      	ldr	r3, [pc, #252]	@ (8000d94 <main+0x23c>)
 8000c98:	9301      	str	r3, [sp, #4]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	22c8      	movs	r2, #200	@ 0xc8
 8000ca2:	493d      	ldr	r1, [pc, #244]	@ (8000d98 <main+0x240>)
 8000ca4:	483d      	ldr	r0, [pc, #244]	@ (8000d9c <main+0x244>)
 8000ca6:	f005 fcf7 	bl	8006698 <xTaskCreate>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a32      	ldr	r2, [pc, #200]	@ (8000d78 <main+0x220>)
 8000cae:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000cb0:	4b31      	ldr	r3, [pc, #196]	@ (8000d78 <main+0x220>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d00d      	beq.n	8000cd4 <main+0x17c>
        __asm volatile
 8000cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cbc:	b672      	cpsid	i
 8000cbe:	f383 8811 	msr	BASEPRI, r3
 8000cc2:	f3bf 8f6f 	isb	sy
 8000cc6:	f3bf 8f4f 	dsb	sy
 8000cca:	b662      	cpsie	i
 8000ccc:	60bb      	str	r3, [r7, #8]
    }
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <main+0x178>

  xReturned = xTaskCreate(Task5_Handler, "Analyze_CAN_Data", 200, NULL, tskIDLE_PRIORITY + 1, &task5Handle);
 8000cd4:	4b32      	ldr	r3, [pc, #200]	@ (8000da0 <main+0x248>)
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	22c8      	movs	r2, #200	@ 0xc8
 8000ce0:	4930      	ldr	r1, [pc, #192]	@ (8000da4 <main+0x24c>)
 8000ce2:	4831      	ldr	r0, [pc, #196]	@ (8000da8 <main+0x250>)
 8000ce4:	f005 fcd8 	bl	8006698 <xTaskCreate>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4a23      	ldr	r2, [pc, #140]	@ (8000d78 <main+0x220>)
 8000cec:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000cee:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <main+0x220>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d00d      	beq.n	8000d12 <main+0x1ba>
        __asm volatile
 8000cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cfa:	b672      	cpsid	i
 8000cfc:	f383 8811 	msr	BASEPRI, r3
 8000d00:	f3bf 8f6f 	isb	sy
 8000d04:	f3bf 8f4f 	dsb	sy
 8000d08:	b662      	cpsie	i
 8000d0a:	607b      	str	r3, [r7, #4]
    }
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	e7fd      	b.n	8000d0e <main+0x1b6>

  xReturned = xTaskCreate(Task6_Handler, "Torque_Derate", 200, NULL, tskIDLE_PRIORITY + 1, &task6Handle);
 8000d12:	4b26      	ldr	r3, [pc, #152]	@ (8000dac <main+0x254>)
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	2301      	movs	r3, #1
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	22c8      	movs	r2, #200	@ 0xc8
 8000d1e:	4924      	ldr	r1, [pc, #144]	@ (8000db0 <main+0x258>)
 8000d20:	4824      	ldr	r0, [pc, #144]	@ (8000db4 <main+0x25c>)
 8000d22:	f005 fcb9 	bl	8006698 <xTaskCreate>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <main+0x220>)
 8000d2a:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <main+0x220>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d00d      	beq.n	8000d50 <main+0x1f8>
        __asm volatile
 8000d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d38:	b672      	cpsid	i
 8000d3a:	f383 8811 	msr	BASEPRI, r3
 8000d3e:	f3bf 8f6f 	isb	sy
 8000d42:	f3bf 8f4f 	dsb	sy
 8000d46:	b662      	cpsie	i
 8000d48:	603b      	str	r3, [r7, #0]
    }
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <main+0x1f4>

  vTaskStartScheduler();
 8000d50:	f005 fe8e 	bl	8006a70 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <main+0x1fc>
 8000d58:	2000008c 	.word	0x2000008c
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000004 	.word	0x20000004
 8000d64:	2000021c 	.word	0x2000021c
 8000d68:	20000220 	.word	0x20000220
 8000d6c:	20000204 	.word	0x20000204
 8000d70:	080085f0 	.word	0x080085f0
 8000d74:	0800130d 	.word	0x0800130d
 8000d78:	20000200 	.word	0x20000200
 8000d7c:	20000208 	.word	0x20000208
 8000d80:	08008600 	.word	0x08008600
 8000d84:	0800133d 	.word	0x0800133d
 8000d88:	2000020c 	.word	0x2000020c
 8000d8c:	08008610 	.word	0x08008610
 8000d90:	08001395 	.word	0x08001395
 8000d94:	20000210 	.word	0x20000210
 8000d98:	0800861c 	.word	0x0800861c
 8000d9c:	080013a5 	.word	0x080013a5
 8000da0:	20000214 	.word	0x20000214
 8000da4:	08008630 	.word	0x08008630
 8000da8:	08001495 	.word	0x08001495
 8000dac:	20000218 	.word	0x20000218
 8000db0:	08008644 	.word	0x08008644
 8000db4:	080014a1 	.word	0x080014a1

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	@ 0x50
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2234      	movs	r2, #52	@ 0x34
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f007 fbc8 	bl	800855c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	4a28      	ldr	r2, [pc, #160]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de8:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000df4:	4b24      	ldr	r3, [pc, #144]	@ (8000e88 <SystemClock_Config+0xd0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dfc:	4a22      	ldr	r2, [pc, #136]	@ (8000e88 <SystemClock_Config+0xd0>)
 8000dfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b20      	ldr	r3, [pc, #128]	@ (8000e88 <SystemClock_Config+0xd0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e18:	2310      	movs	r3, #16
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e24:	2308      	movs	r3, #8
 8000e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e28:	23b4      	movs	r3, #180	@ 0xb4
 8000e2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 f80b 	bl	8003e58 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e48:	f000 fe2d 	bl	8001aa6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e50:	2302      	movs	r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000e54:	2380      	movs	r3, #128	@ 0x80
 8000e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 faa2 	bl	80043b4 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e76:	f000 fe16 	bl	8001aa6 <Error_Handler>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3750      	adds	r7, #80	@ 0x50
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40007000 	.word	0x40007000

08000e8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e9e:	4b37      	ldr	r3, [pc, #220]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000ea0:	4a37      	ldr	r2, [pc, #220]	@ (8000f80 <MX_ADC1_Init+0xf4>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000ea4:	4b35      	ldr	r3, [pc, #212]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000ea6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000eaa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000eac:	4b33      	ldr	r3, [pc, #204]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000eae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000eb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eb4:	4b31      	ldr	r3, [pc, #196]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eba:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ece:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000ed0:	4a2c      	ldr	r2, [pc, #176]	@ (8000f84 <MX_ADC1_Init+0xf8>)
 8000ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000eda:	4b28      	ldr	r3, [pc, #160]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000edc:	2204      	movs	r2, #4
 8000ede:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ee0:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eee:	4823      	ldr	r0, [pc, #140]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000ef0:	f001 fa46 	bl	8002380 <HAL_ADC_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000efa:	f000 fdd4 	bl	8001aa6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f06:	2303      	movs	r3, #3
 8000f08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481b      	ldr	r0, [pc, #108]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000f10:	f001 fc14 	bl	800273c <HAL_ADC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f1a:	f000 fdc4 	bl	8001aa6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4814      	ldr	r0, [pc, #80]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000f2c:	f001 fc06 	bl	800273c <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f36:	f000 fdb6 	bl	8001aa6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	480d      	ldr	r0, [pc, #52]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000f48:	f001 fbf8 	bl	800273c <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000f52:	f000 fda8 	bl	8001aa6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f56:	2303      	movs	r3, #3
 8000f58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000f64:	f001 fbea 	bl	800273c <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000f6e:	f000 fd9a 	bl	8001aa6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000044 	.word	0x20000044
 8000f80:	40012000 	.word	0x40012000
 8000f84:	0f000001 	.word	0x0f000001

08000f88 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000f8e:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <MX_CAN1_Init+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000f94:	2205      	movs	r2, #5
 8000f96:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f98:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000fa6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000faa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000fae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000fb2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <MX_CAN1_Init+0x64>)
 8000fda:	f001 fdff 	bl	8002bdc <HAL_CAN_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000fe4:	f000 fd5f 	bl	8001aa6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000008c 	.word	0x2000008c
 8000ff0:	40006400 	.word	0x40006400

08000ff4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <MX_CAN2_Init+0x64>)
 8000ffa:	4a18      	ldr	r2, [pc, #96]	@ (800105c <MX_CAN2_Init+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 5;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <MX_CAN2_Init+0x64>)
 8001000:	2205      	movs	r2, #5
 8001002:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_CAN2_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <MX_CAN2_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <MX_CAN2_Init+0x64>)
 8001012:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001016:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_CAN2_Init+0x64>)
 800101a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800101e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001020:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <MX_CAN2_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <MX_CAN2_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <MX_CAN2_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_CAN2_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <MX_CAN2_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_CAN2_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <MX_CAN2_Init+0x64>)
 8001046:	f001 fdc9 	bl	8002bdc <HAL_CAN_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001050:	f000 fd29 	bl	8001aa6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000b4 	.word	0x200000b4
 800105c:	40006800 	.word	0x40006800

08001060 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09a      	sub	sp, #104	@ 0x68
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001080:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
 8001090:	615a      	str	r2, [r3, #20]
 8001092:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	222c      	movs	r2, #44	@ 0x2c
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f007 fa5e 	bl	800855c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a0:	4b43      	ldr	r3, [pc, #268]	@ (80011b0 <MX_TIM1_Init+0x150>)
 80010a2:	4a44      	ldr	r2, [pc, #272]	@ (80011b4 <MX_TIM1_Init+0x154>)
 80010a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000-1;
 80010a6:	4b42      	ldr	r3, [pc, #264]	@ (80011b0 <MX_TIM1_Init+0x150>)
 80010a8:	f244 624f 	movw	r2, #17999	@ 0x464f
 80010ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <MX_TIM1_Init+0x150>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80010b4:	4b3e      	ldr	r3, [pc, #248]	@ (80011b0 <MX_TIM1_Init+0x150>)
 80010b6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	4b3c      	ldr	r3, [pc, #240]	@ (80011b0 <MX_TIM1_Init+0x150>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c2:	4b3b      	ldr	r3, [pc, #236]	@ (80011b0 <MX_TIM1_Init+0x150>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c8:	4b39      	ldr	r3, [pc, #228]	@ (80011b0 <MX_TIM1_Init+0x150>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ce:	4838      	ldr	r0, [pc, #224]	@ (80011b0 <MX_TIM1_Init+0x150>)
 80010d0:	f003 fb74 	bl	80047bc <HAL_TIM_Base_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80010da:	f000 fce4 	bl	8001aa6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010e4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010e8:	4619      	mov	r1, r3
 80010ea:	4831      	ldr	r0, [pc, #196]	@ (80011b0 <MX_TIM1_Init+0x150>)
 80010ec:	f004 f848 	bl	8005180 <HAL_TIM_ConfigClockSource>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80010f6:	f000 fcd6 	bl	8001aa6 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80010fa:	482d      	ldr	r0, [pc, #180]	@ (80011b0 <MX_TIM1_Init+0x150>)
 80010fc:	f003 fc2e 	bl	800495c <HAL_TIM_OC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001106:	f000 fcce 	bl	8001aa6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001116:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800111a:	4619      	mov	r1, r3
 800111c:	4824      	ldr	r0, [pc, #144]	@ (80011b0 <MX_TIM1_Init+0x150>)
 800111e:	f004 fcd5 	bl	8005acc <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001128:	f000 fcbd 	bl	8001aa6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800112c:	2300      	movs	r3, #0
 800112e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 10000-1;
 8001130:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113a:	2300      	movs	r3, #0
 800113c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	4817      	ldr	r0, [pc, #92]	@ (80011b0 <MX_TIM1_Init+0x150>)
 8001154:	f003 ff9a 	bl	800508c <HAL_TIM_OC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800115e:	f000 fca2 	bl	8001aa6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001176:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800117a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001184:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	@ (80011b0 <MX_TIM1_Init+0x150>)
 8001198:	f004 fd26 	bl	8005be8 <HAL_TIMEx_ConfigBreakDeadTime>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80011a2:	f000 fc80 	bl	8001aa6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3768      	adds	r7, #104	@ 0x68
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000dc 	.word	0x200000dc
 80011b4:	40010000 	.word	0x40010000

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b46      	ldr	r3, [pc, #280]	@ (80012e8 <MX_GPIO_Init+0x130>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a45      	ldr	r2, [pc, #276]	@ (80012e8 <MX_GPIO_Init+0x130>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b43      	ldr	r3, [pc, #268]	@ (80012e8 <MX_GPIO_Init+0x130>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	4b40      	ldr	r3, [pc, #256]	@ (80012e8 <MX_GPIO_Init+0x130>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a3f      	ldr	r2, [pc, #252]	@ (80012e8 <MX_GPIO_Init+0x130>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <MX_GPIO_Init+0x130>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <MX_GPIO_Init+0x130>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a39      	ldr	r2, [pc, #228]	@ (80012e8 <MX_GPIO_Init+0x130>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b37      	ldr	r3, [pc, #220]	@ (80012e8 <MX_GPIO_Init+0x130>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <MX_GPIO_Init+0x130>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a33      	ldr	r2, [pc, #204]	@ (80012e8 <MX_GPIO_Init+0x130>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <MX_GPIO_Init+0x130>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <MX_GPIO_Init+0x130>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a2d      	ldr	r2, [pc, #180]	@ (80012e8 <MX_GPIO_Init+0x130>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <MX_GPIO_Init+0x130>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800124c:	4827      	ldr	r0, [pc, #156]	@ (80012ec <MX_GPIO_Init+0x134>)
 800124e:	f002 fde9 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001258:	4825      	ldr	r0, [pc, #148]	@ (80012f0 <MX_GPIO_Init+0x138>)
 800125a:	f002 fde3 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001264:	4823      	ldr	r0, [pc, #140]	@ (80012f4 <MX_GPIO_Init+0x13c>)
 8001266:	f002 fddd 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800126a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	481a      	ldr	r0, [pc, #104]	@ (80012ec <MX_GPIO_Init+0x134>)
 8001284:	f002 fc0a 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4816      	ldr	r0, [pc, #88]	@ (80012f8 <MX_GPIO_Init+0x140>)
 800129e:	f002 fbfd 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80012a2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <MX_GPIO_Init+0x138>)
 80012bc:	f002 fbee 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <MX_GPIO_Init+0x13c>)
 80012da:	f002 fbdf 	bl	8003a9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	@ 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020c00 	.word	0x40020c00

080012fc <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */

/***************************** Idle Task *****************************/
void vApplicationIdleHook(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <Task1_Handler>:

/***************************** Node Guarding Task *****************************/
void Task1_Handler(void* pvParameters)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = NODE_GUARDING_PERIOD;
 8001314:	2396      	movs	r3, #150	@ 0x96
 8001316:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8001318:	f005 fd0c 	bl	8006d34 <xTaskGetTickCount>
 800131c:	4603      	mov	r3, r0
 800131e:	60bb      	str	r3, [r7, #8]

	for (;;)
	{
		// Suspend task until period
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	68f9      	ldr	r1, [r7, #12]
 8001326:	4618      	mov	r0, r3
 8001328:	f005 fb1a 	bl	8006960 <xTaskDelayUntil>

		// Inverter Node Guarding Frame
		nodeGuarding(&hcan1);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <Task1_Handler+0x2c>)
 800132e:	f7ff f91b 	bl	8000568 <nodeGuarding>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001332:	bf00      	nop
 8001334:	e7f4      	b.n	8001320 <Task1_Handler+0x14>
 8001336:	bf00      	nop
 8001338:	2000008c 	.word	0x2000008c

0800133c <Task2_Handler>:
	}
}

/***************************** Torque Control Task *****************************/
void Task2_Handler(void* pvParameters)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = TORQUE_CONTROL_PERIOD;
 8001344:	230a      	movs	r3, #10
 8001346:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8001348:	f005 fcf4 	bl	8006d34 <xTaskGetTickCount>
 800134c:	4603      	mov	r3, r0
 800134e:	60bb      	str	r3, [r7, #8]

	for (;;)
	{
		// Suspend task until period
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	68f9      	ldr	r1, [r7, #12]
 8001356:	4618      	mov	r0, r3
 8001358:	f005 fb02 	bl	8006960 <xTaskDelayUntil>

		// Throttle Sensor Error Checks
		errorSet[PRIM_THROTTLE_SENS_ERR] = primaryThrottleSensorErrorCheck();
 800135c:	2400      	movs	r4, #0
 800135e:	f000 fa57 	bl	8001810 <primaryThrottleSensorErrorCheck>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <Task2_Handler+0x54>)
 8001368:	551a      	strb	r2, [r3, r4]

		errorSet[SECOND_THROTTLE_SENS_ERR] = secondaryThrottleSensorErrorCheck();
 800136a:	2401      	movs	r4, #1
 800136c:	f000 fa6c 	bl	8001848 <secondaryThrottleSensorErrorCheck>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <Task2_Handler+0x54>)
 8001376:	551a      	strb	r2, [r3, r4]

		errorSet[THROTTLE_OFFSET_ERROR] = throttleSensorDeviationCheck();
 8001378:	2402      	movs	r4, #2
 800137a:	f000 fa81 	bl	8001880 <throttleSensorDeviationCheck>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <Task2_Handler+0x54>)
 8001384:	551a      	strb	r2, [r3, r4]

		// Torque Request

		torqueRequest();
 8001386:	f000 faff 	bl	8001988 <torqueRequest>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800138a:	bf00      	nop
 800138c:	e7e0      	b.n	8001350 <Task2_Handler+0x14>
 800138e:	bf00      	nop
 8001390:	200001a0 	.word	0x200001a0

08001394 <Task3_Handler>:
	}
}

/***************************** Ignition Task *****************************/
void Task3_Handler(void* pvParameters)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		ignitionTask();
 800139c:	f000 f8bc 	bl	8001518 <ignitionTask>
 80013a0:	e7fc      	b.n	800139c <Task3_Handler+0x8>
	...

080013a4 <Task4_Handler>:
	}
}

/***************************** CAN Data Processing Task *****************************/
void Task4_Handler(void* pvParameters)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	CAN_MsgHeaderTypedef msg;

	for (;;)
	{
		if (xQueueReceive(lowPriorityQueue, &msg, portMAX_DELAY) == pdPASS)
 80013ac:	4b32      	ldr	r3, [pc, #200]	@ (8001478 <Task4_Handler+0xd4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f107 0108 	add.w	r1, r7, #8
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 ff07 	bl	80061cc <xQueueReceive>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d1f3      	bne.n	80013ac <Task4_Handler+0x8>
		{
			switch (msg.StdID)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f240 3251 	movw	r2, #849	@ 0x351
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d04a      	beq.n	8001464 <Task4_Handler+0xc0>
 80013ce:	f240 3251 	movw	r2, #849	@ 0x351
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d84e      	bhi.n	8001474 <Task4_Handler+0xd0>
 80013d6:	f240 3241 	movw	r2, #833	@ 0x341
 80013da:	4293      	cmp	r3, r2
 80013dc:	d03a      	beq.n	8001454 <Task4_Handler+0xb0>
 80013de:	f240 3241 	movw	r2, #833	@ 0x341
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d846      	bhi.n	8001474 <Task4_Handler+0xd0>
 80013e6:	f240 3231 	movw	r2, #817	@ 0x331
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d02a      	beq.n	8001444 <Task4_Handler+0xa0>
 80013ee:	f240 3231 	movw	r2, #817	@ 0x331
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d83e      	bhi.n	8001474 <Task4_Handler+0xd0>
 80013f6:	f240 3221 	movw	r2, #801	@ 0x321
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d01a      	beq.n	8001434 <Task4_Handler+0x90>
 80013fe:	f240 3221 	movw	r2, #801	@ 0x321
 8001402:	4293      	cmp	r3, r2
 8001404:	d836      	bhi.n	8001474 <Task4_Handler+0xd0>
 8001406:	2b37      	cmp	r3, #55	@ 0x37
 8001408:	d004      	beq.n	8001414 <Task4_Handler+0x70>
 800140a:	f240 3211 	movw	r2, #785	@ 0x311
 800140e:	4293      	cmp	r3, r2
 8001410:	d008      	beq.n	8001424 <Task4_Handler+0x80>
				break;
			case TS_ECU5_TX1_CANID:
				Unpack_TS_ECU5_TX1_Temp(&ecu5TX1, msg.data, TS_ECU5_TX1_DLC);
				break;
			default:
				break;
 8001412:	e02f      	b.n	8001474 <Task4_Handler+0xd0>
				Unpack_IMD_Info_Isolation(&imdInfo, msg.data, IMD_Info_DLC);
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	2208      	movs	r2, #8
 800141a:	4619      	mov	r1, r3
 800141c:	4817      	ldr	r0, [pc, #92]	@ (800147c <Task4_Handler+0xd8>)
 800141e:	f7ff fae2 	bl	80009e6 <Unpack_IMD_Info_Isolation>
				break;
 8001422:	e028      	b.n	8001476 <Task4_Handler+0xd2>
				Unpack_TS_ECU1_TX1_Temp(&ecu1TX1, msg.data, TS_ECU1_TX1_DLC);
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	2205      	movs	r2, #5
 800142a:	4619      	mov	r1, r3
 800142c:	4814      	ldr	r0, [pc, #80]	@ (8001480 <Task4_Handler+0xdc>)
 800142e:	f000 fd67 	bl	8001f00 <Unpack_TS_ECU1_TX1_Temp>
				break;
 8001432:	e020      	b.n	8001476 <Task4_Handler+0xd2>
				Unpack_TS_ECU2_TX1_Temp(&ecu2TX1, msg.data, TS_ECU2_TX1_DLC);
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	2205      	movs	r2, #5
 800143a:	4619      	mov	r1, r3
 800143c:	4811      	ldr	r0, [pc, #68]	@ (8001484 <Task4_Handler+0xe0>)
 800143e:	f000 fdc1 	bl	8001fc4 <Unpack_TS_ECU2_TX1_Temp>
				break;
 8001442:	e018      	b.n	8001476 <Task4_Handler+0xd2>
				Unpack_TS_ECU3_TX1_Temp(&ecu3TX1, msg.data, TS_ECU3_TX1_DLC);
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	2205      	movs	r2, #5
 800144a:	4619      	mov	r1, r3
 800144c:	480e      	ldr	r0, [pc, #56]	@ (8001488 <Task4_Handler+0xe4>)
 800144e:	f000 fe1b 	bl	8002088 <Unpack_TS_ECU3_TX1_Temp>
				break;
 8001452:	e010      	b.n	8001476 <Task4_Handler+0xd2>
				Unpack_TS_ECU4_TX1_Temp(&ecu4TX1, msg.data, TS_ECU4_TX1_DLC);
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	2205      	movs	r2, #5
 800145a:	4619      	mov	r1, r3
 800145c:	480b      	ldr	r0, [pc, #44]	@ (800148c <Task4_Handler+0xe8>)
 800145e:	f000 fe75 	bl	800214c <Unpack_TS_ECU4_TX1_Temp>
				break;
 8001462:	e008      	b.n	8001476 <Task4_Handler+0xd2>
				Unpack_TS_ECU5_TX1_Temp(&ecu5TX1, msg.data, TS_ECU5_TX1_DLC);
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	2205      	movs	r2, #5
 800146a:	4619      	mov	r1, r3
 800146c:	4808      	ldr	r0, [pc, #32]	@ (8001490 <Task4_Handler+0xec>)
 800146e:	f000 fecf 	bl	8002210 <Unpack_TS_ECU5_TX1_Temp>
				break;
 8001472:	e000      	b.n	8001476 <Task4_Handler+0xd2>
				break;
 8001474:	bf00      	nop
		if (xQueueReceive(lowPriorityQueue, &msg, portMAX_DELAY) == pdPASS)
 8001476:	e799      	b.n	80013ac <Task4_Handler+0x8>
 8001478:	2000021c 	.word	0x2000021c
 800147c:	200001a8 	.word	0x200001a8
 8001480:	200001b0 	.word	0x200001b0
 8001484:	200001c0 	.word	0x200001c0
 8001488:	200001d0 	.word	0x200001d0
 800148c:	200001e0 	.word	0x200001e0
 8001490:	200001f0 	.word	0x200001f0

08001494 <Task5_Handler>:
	}
}

/***************************** Temp Sense Data Task *****************************/
void Task5_Handler(void* pvParameters)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	for (;;)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <Task5_Handler+0x8>

080014a0 <Task6_Handler>:
	}
}

/***************************** Torque Derating Task *****************************/
void Task6_Handler(void* pvParameters)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	for (;;)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <Task6_Handler+0x8>

080014ac <map>:
	{

	}
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	69b9      	ldr	r1, [r7, #24]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	1a8a      	subs	r2, r1, r2
 80014c6:	fb03 f202 	mul.w	r2, r3, r2
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1acb      	subs	r3, r1, r3
 80014d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	4413      	add	r3, r2
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <constrain>:

long constrain(long x, long out_min, long out_max)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	if (x < out_min)
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	da01      	bge.n	80014fc <constrain+0x18>
	{
		return out_min;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	e006      	b.n	800150a <constrain+0x26>
	}

	if (x > out_max)
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	dd01      	ble.n	8001508 <constrain+0x24>
	{
		return out_max;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	e000      	b.n	800150a <constrain+0x26>
	}

	return x;
 8001508:	68fb      	ldr	r3, [r7, #12]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <ignitionTask>:

void ignitionTask(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	buttonState = HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_PIN);
 800151c:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <ignitionTask+0x9c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fc64 	bl	8003df4 <HAL_GPIO_ReadPin>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <ignitionTask+0xa0>)
 8001532:	701a      	strb	r2, [r3, #0]

	buttonPressTime = HAL_GetTick();
 8001534:	f000 ff18 	bl	8002368 <HAL_GetTick>
 8001538:	4603      	mov	r3, r0
 800153a:	4a20      	ldr	r2, [pc, #128]	@ (80015bc <ignitionTask+0xa4>)
 800153c:	6013      	str	r3, [r2, #0]

	while (buttonState == IGNITION_ACTIVE)
 800153e:	e032      	b.n	80015a6 <ignitionTask+0x8e>
	{
		if (HAL_GetTick() - buttonPressTime > IGNITION_BUTTON_THRESHOLD)
 8001540:	f000 ff12 	bl	8002368 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <ignitionTask+0xa4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001550:	d91d      	bls.n	800158e <ignitionTask+0x76>
		{
			startNode(&hcan1);
 8001552:	481b      	ldr	r0, [pc, #108]	@ (80015c0 <ignitionTask+0xa8>)
 8001554:	f7ff f838 	bl	80005c8 <startNode>
			clearErrors(&hcan1);
 8001558:	4819      	ldr	r0, [pc, #100]	@ (80015c0 <ignitionTask+0xa8>)
 800155a:	f7ff f879 	bl	8000650 <clearErrors>

			HAL_GPIO_WritePin(RTD_PIN_PORT, RTD_PIN, RTD_ACTIVE);
 800155e:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <ignitionTask+0xac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001566:	2201      	movs	r2, #1
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fc5b 	bl	8003e24 <HAL_GPIO_WritePin>

			TIM1->CNT = 0;
 800156e:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <ignitionTask+0xb0>)
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_OC_Start_IT(&htim1, IGNITION_OUPUT_CAPTURE);
 8001574:	2300      	movs	r3, #0
 8001576:	4619      	mov	r1, r3
 8001578:	4814      	ldr	r0, [pc, #80]	@ (80015cc <ignitionTask+0xb4>)
 800157a:	f003 fa51 	bl	8004a20 <HAL_TIM_OC_Start_IT>

			enableCar = true;
 800157e:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <ignitionTask+0xb8>)
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]

			buttonPressTime = HAL_GetTick();
 8001584:	f000 fef0 	bl	8002368 <HAL_GetTick>
 8001588:	4603      	mov	r3, r0
 800158a:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <ignitionTask+0xa4>)
 800158c:	6013      	str	r3, [r2, #0]
		}

		buttonState = HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_PIN);
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <ignitionTask+0x9c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fc2b 	bl	8003df4 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <ignitionTask+0xa0>)
 80015a4:	701a      	strb	r2, [r3, #0]
	while (buttonState == IGNITION_ACTIVE)
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <ignitionTask+0xa0>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d0c7      	beq.n	8001540 <ignitionTask+0x28>
	}

	return;
 80015b0:	bf00      	nop
}
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000000c 	.word	0x2000000c
 80015b8:	20000128 	.word	0x20000128
 80015bc:	2000012c 	.word	0x2000012c
 80015c0:	2000008c 	.word	0x2000008c
 80015c4:	20000008 	.word	0x20000008
 80015c8:	40010000 	.word	0x40010000
 80015cc:	200000dc 	.word	0x200000dc
 80015d0:	20000129 	.word	0x20000129

080015d4 <setADCChannel>:

void setADCChannel(ADC_ChannelConfTypeDef* adcChConfig, uint32_t adcChannel)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	adcChConfig->Channel = adcChannel;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	601a      	str	r2, [r3, #0]
	adcChConfig->Rank = ADC_REGULAR_RANK_1;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	605a      	str	r2, [r3, #4]
	adcChConfig->SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	609a      	str	r2, [r3, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, adcChConfig) != HAL_OK)
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4806      	ldr	r0, [pc, #24]	@ (800160c <setADCChannel+0x38>)
 80015f4:	f001 f8a2 	bl	800273c <HAL_ADC_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <setADCChannel+0x30>
	{
		Error_Handler();
 80015fe:	f000 fa52 	bl	8001aa6 <Error_Handler>
	}

	return;
 8001602:	bf00      	nop
 8001604:	bf00      	nop
}
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000044 	.word	0x20000044

08001610 <getADCAverage>:

uint32_t getADCAverage(ADC_ChannelConfTypeDef* adcChConfig, uint32_t adcChannel)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	setADCChannel(adcChConfig, adcChannel);
 800161a:	6839      	ldr	r1, [r7, #0]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ffd9 	bl	80015d4 <setADCChannel>

	sum = 0;
 8001622:	4b5c      	ldr	r3, [pc, #368]	@ (8001794 <getADCAverage+0x184>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	e014      	b.n	8001658 <getADCAverage+0x48>
	{
		HAL_ADC_Start(&hadc1);
 800162e:	485a      	ldr	r0, [pc, #360]	@ (8001798 <getADCAverage+0x188>)
 8001630:	f000 feea 	bl	8002408 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc1, (1U));
 8001634:	2101      	movs	r1, #1
 8001636:	4858      	ldr	r0, [pc, #352]	@ (8001798 <getADCAverage+0x188>)
 8001638:	f000 ffe8 	bl	800260c <HAL_ADC_PollForConversion>

		adcBuffer[i] = HAL_ADC_GetValue(&hadc1);
 800163c:	4856      	ldr	r0, [pc, #344]	@ (8001798 <getADCAverage+0x188>)
 800163e:	f001 f870 	bl	8002722 <HAL_ADC_GetValue>
 8001642:	4602      	mov	r2, r0
 8001644:	4955      	ldr	r1, [pc, #340]	@ (800179c <getADCAverage+0x18c>)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		HAL_ADC_Stop(&hadc1);
 800164c:	4852      	ldr	r0, [pc, #328]	@ (8001798 <getADCAverage+0x188>)
 800164e:	f000 ffa9 	bl	80025a4 <HAL_ADC_Stop>
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b0e      	cmp	r3, #14
 800165c:	dde7      	ble.n	800162e <getADCAverage+0x1e>
	}

	max = adcBuffer[0];
 800165e:	4b4f      	ldr	r3, [pc, #316]	@ (800179c <getADCAverage+0x18c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4b4e      	ldr	r3, [pc, #312]	@ (80017a0 <getADCAverage+0x190>)
 8001666:	601a      	str	r2, [r3, #0]

	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001668:	2301      	movs	r3, #1
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	e014      	b.n	8001698 <getADCAverage+0x88>
	{
		if (adcBuffer[i] > max)
 800166e:	4a4b      	ldr	r2, [pc, #300]	@ (800179c <getADCAverage+0x18c>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	4a4a      	ldr	r2, [pc, #296]	@ (80017a0 <getADCAverage+0x190>)
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	4293      	cmp	r3, r2
 800167c:	d909      	bls.n	8001692 <getADCAverage+0x82>
		{
			max = adcBuffer[i];
 800167e:	4a47      	ldr	r2, [pc, #284]	@ (800179c <getADCAverage+0x18c>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	461a      	mov	r2, r3
 8001688:	4b45      	ldr	r3, [pc, #276]	@ (80017a0 <getADCAverage+0x190>)
 800168a:	601a      	str	r2, [r3, #0]
			maxIndex = i;
 800168c:	4a45      	ldr	r2, [pc, #276]	@ (80017a4 <getADCAverage+0x194>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	3301      	adds	r3, #1
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b0e      	cmp	r3, #14
 800169c:	dde7      	ble.n	800166e <getADCAverage+0x5e>
		}
	}

	min = adcBuffer[0];
 800169e:	4b3f      	ldr	r3, [pc, #252]	@ (800179c <getADCAverage+0x18c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b40      	ldr	r3, [pc, #256]	@ (80017a8 <getADCAverage+0x198>)
 80016a6:	601a      	str	r2, [r3, #0]

	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 80016a8:	2301      	movs	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e014      	b.n	80016d8 <getADCAverage+0xc8>
	{
		if (adcBuffer[i] < min)
 80016ae:	4a3b      	ldr	r2, [pc, #236]	@ (800179c <getADCAverage+0x18c>)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	4a3c      	ldr	r2, [pc, #240]	@ (80017a8 <getADCAverage+0x198>)
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d209      	bcs.n	80016d2 <getADCAverage+0xc2>
		{
			min = adcBuffer[i];
 80016be:	4a37      	ldr	r2, [pc, #220]	@ (800179c <getADCAverage+0x18c>)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <getADCAverage+0x198>)
 80016ca:	601a      	str	r2, [r3, #0]
			minIndex = i;
 80016cc:	4a37      	ldr	r2, [pc, #220]	@ (80017ac <getADCAverage+0x19c>)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b0e      	cmp	r3, #14
 80016dc:	dde7      	ble.n	80016ae <getADCAverage+0x9e>
		}
	}

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	e01a      	b.n	800171a <getADCAverage+0x10a>
	{
		if (i == minIndex || i == maxIndex)
 80016e4:	4b31      	ldr	r3, [pc, #196]	@ (80017ac <getADCAverage+0x19c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d004      	beq.n	80016f8 <getADCAverage+0xe8>
 80016ee:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <getADCAverage+0x194>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d104      	bne.n	8001702 <getADCAverage+0xf2>
		{
			sum += 0;
 80016f8:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <getADCAverage+0x184>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <getADCAverage+0x184>)
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	e008      	b.n	8001714 <getADCAverage+0x104>
		}
		else
		{
			sum += adcBuffer[i];
 8001702:	4a26      	ldr	r2, [pc, #152]	@ (800179c <getADCAverage+0x18c>)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <getADCAverage+0x184>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a20      	ldr	r2, [pc, #128]	@ (8001794 <getADCAverage+0x184>)
 8001712:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	3301      	adds	r3, #1
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b0e      	cmp	r3, #14
 800171e:	dde1      	ble.n	80016e4 <getADCAverage+0xd4>
		}
	}

	average = sum / (ADC_SAMPLE_COUNT - 2);
 8001720:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <getADCAverage+0x184>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a22      	ldr	r2, [pc, #136]	@ (80017b0 <getADCAverage+0x1a0>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	4a21      	ldr	r2, [pc, #132]	@ (80017b4 <getADCAverage+0x1a4>)
 800172e:	6013      	str	r3, [r2, #0]

	adcBuffer[maxIndex] = average;
 8001730:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <getADCAverage+0x194>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1f      	ldr	r2, [pc, #124]	@ (80017b4 <getADCAverage+0x1a4>)
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	4918      	ldr	r1, [pc, #96]	@ (800179c <getADCAverage+0x18c>)
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	adcBuffer[minIndex] = average;
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <getADCAverage+0x19c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <getADCAverage+0x1a4>)
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	4915      	ldr	r1, [pc, #84]	@ (800179c <getADCAverage+0x18c>)
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	sum = 0;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <getADCAverage+0x184>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e00b      	b.n	8001770 <getADCAverage+0x160>
	{
		sum += adcBuffer[i];
 8001758:	4a10      	ldr	r2, [pc, #64]	@ (800179c <getADCAverage+0x18c>)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <getADCAverage+0x184>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4413      	add	r3, r2
 8001766:	4a0b      	ldr	r2, [pc, #44]	@ (8001794 <getADCAverage+0x184>)
 8001768:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3301      	adds	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b0e      	cmp	r3, #14
 8001774:	ddf0      	ble.n	8001758 <getADCAverage+0x148>
	}

	average = sum / ADC_SAMPLE_COUNT;
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <getADCAverage+0x184>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a0f      	ldr	r2, [pc, #60]	@ (80017b8 <getADCAverage+0x1a8>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	4a0c      	ldr	r2, [pc, #48]	@ (80017b4 <getADCAverage+0x1a4>)
 8001784:	6013      	str	r3, [r2, #0]

	return average;
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <getADCAverage+0x1a4>)
 8001788:	681b      	ldr	r3, [r3, #0]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000018c 	.word	0x2000018c
 8001798:	20000044 	.word	0x20000044
 800179c:	20000150 	.word	0x20000150
 80017a0:	20000140 	.word	0x20000140
 80017a4:	20000148 	.word	0x20000148
 80017a8:	20000144 	.word	0x20000144
 80017ac:	2000014c 	.word	0x2000014c
 80017b0:	4ec4ec4f 	.word	0x4ec4ec4f
 80017b4:	20000190 	.word	0x20000190
 80017b8:	88888889 	.word	0x88888889

080017bc <getPrimaryThrottlePosition>:

uint32_t getPrimaryThrottlePosition(ADC_ChannelConfTypeDef* adcChConfig)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	return constrain(getADCAverage(adcChConfig, PRIMARY_THROTTLE_CHANNEL), ADC_MIN_LIMIT, ADC_MAX_LIMIT);
 80017c4:	2300      	movs	r3, #0
 80017c6:	4619      	mov	r1, r3
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff21 	bl	8001610 <getADCAverage>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fe84 	bl	80014e4 <constrain>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <getSecondaryThrottlePosition>:

uint32_t getSecondaryThrottlePosition(ADC_ChannelConfTypeDef* adcChConfig)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
	return constrain(getADCAverage(adcChConfig, SECONDARY_THROTTLE_CHANNEL), ADC_MIN_LIMIT, ADC_MAX_LIMIT);
 80017ee:	2301      	movs	r3, #1
 80017f0:	4619      	mov	r1, r3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff0c 	bl	8001610 <getADCAverage>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fe6f 	bl	80014e4 <constrain>
 8001806:	4603      	mov	r3, r0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <primaryThrottleSensorErrorCheck>:

bool primaryThrottleSensorErrorCheck()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 8001814:	480a      	ldr	r0, [pc, #40]	@ (8001840 <primaryThrottleSensorErrorCheck+0x30>)
 8001816:	f7ff ffd1 	bl	80017bc <getPrimaryThrottlePosition>
 800181a:	4603      	mov	r3, r0
 800181c:	4a09      	ldr	r2, [pc, #36]	@ (8001844 <primaryThrottleSensorErrorCheck+0x34>)
 800181e:	6013      	str	r3, [r2, #0]

	if (primaryPotValue <= PRIMARY_THROTTLE_RANGE_MIN || primaryPotValue >= PRIMARY_THROTTLE_RANGE_MAX)
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <primaryThrottleSensorErrorCheck+0x34>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2200      	movs	r2, #0
 8001826:	4293      	cmp	r3, r2
 8001828:	d905      	bls.n	8001836 <primaryThrottleSensorErrorCheck+0x26>
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <primaryThrottleSensorErrorCheck+0x34>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001832:	4293      	cmp	r3, r2
 8001834:	d301      	bcc.n	800183a <primaryThrottleSensorErrorCheck+0x2a>
	{
		return true;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <primaryThrottleSensorErrorCheck+0x2c>
	}
	else
	{
		return false;
 800183a:	2300      	movs	r3, #0
	}
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000130 	.word	0x20000130
 8001844:	20000198 	.word	0x20000198

08001848 <secondaryThrottleSensorErrorCheck>:

bool secondaryThrottleSensorErrorCheck()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 800184c:	480a      	ldr	r0, [pc, #40]	@ (8001878 <secondaryThrottleSensorErrorCheck+0x30>)
 800184e:	f7ff ffca 	bl	80017e6 <getSecondaryThrottlePosition>
 8001852:	4603      	mov	r3, r0
 8001854:	4a09      	ldr	r2, [pc, #36]	@ (800187c <secondaryThrottleSensorErrorCheck+0x34>)
 8001856:	6013      	str	r3, [r2, #0]

	if (secondaryPotValue <= SECONDARY_THROTTLE_RANGE_MIN || secondaryPotValue >= SECONDARY_THROTTLE_RANGE_MAX)
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <secondaryThrottleSensorErrorCheck+0x34>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2200      	movs	r2, #0
 800185e:	4293      	cmp	r3, r2
 8001860:	d905      	bls.n	800186e <secondaryThrottleSensorErrorCheck+0x26>
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <secondaryThrottleSensorErrorCheck+0x34>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800186a:	4293      	cmp	r3, r2
 800186c:	d301      	bcc.n	8001872 <secondaryThrottleSensorErrorCheck+0x2a>
	{
		return true;
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <secondaryThrottleSensorErrorCheck+0x2c>
	}
	else
	{
		return false;
 8001872:	2300      	movs	r3, #0
	}
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000130 	.word	0x20000130
 800187c:	2000019c 	.word	0x2000019c

08001880 <throttleSensorDeviationCheck>:

bool throttleSensorDeviationCheck()
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	if (errorSet[PRIM_THROTTLE_SENS_ERR] == true || errorSet[SECOND_THROTTLE_SENS_ERR] == true)
 8001884:	2300      	movs	r3, #0
 8001886:	4a3a      	ldr	r2, [pc, #232]	@ (8001970 <throttleSensorDeviationCheck+0xf0>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d004      	beq.n	8001898 <throttleSensorDeviationCheck+0x18>
 800188e:	2301      	movs	r3, #1
 8001890:	4a37      	ldr	r2, [pc, #220]	@ (8001970 <throttleSensorDeviationCheck+0xf0>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <throttleSensorDeviationCheck+0x1c>
	{
		return false;
 8001898:	2300      	movs	r3, #0
 800189a:	e066      	b.n	800196a <throttleSensorDeviationCheck+0xea>
	}
	else
	{
		primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 800189c:	4835      	ldr	r0, [pc, #212]	@ (8001974 <throttleSensorDeviationCheck+0xf4>)
 800189e:	f7ff ff8d 	bl	80017bc <getPrimaryThrottlePosition>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4a34      	ldr	r2, [pc, #208]	@ (8001978 <throttleSensorDeviationCheck+0xf8>)
 80018a6:	6013      	str	r3, [r2, #0]

		secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 80018a8:	4832      	ldr	r0, [pc, #200]	@ (8001974 <throttleSensorDeviationCheck+0xf4>)
 80018aa:	f7ff ff9c 	bl	80017e6 <getSecondaryThrottlePosition>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a32      	ldr	r2, [pc, #200]	@ (800197c <throttleSensorDeviationCheck+0xfc>)
 80018b2:	6013      	str	r3, [r2, #0]

		if (primaryPotValue == 0 || secondaryPotValue == 0)
 80018b4:	4b30      	ldr	r3, [pc, #192]	@ (8001978 <throttleSensorDeviationCheck+0xf8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <throttleSensorDeviationCheck+0x44>
 80018bc:	4b2f      	ldr	r3, [pc, #188]	@ (800197c <throttleSensorDeviationCheck+0xfc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d104      	bne.n	80018ce <throttleSensorDeviationCheck+0x4e>
		{
			percentageDeviation = 0;
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <throttleSensorDeviationCheck+0x100>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

			return false;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e04d      	b.n	800196a <throttleSensorDeviationCheck+0xea>
		}
		else
		{
			if (primaryPotValue > secondaryPotValue)
 80018ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <throttleSensorDeviationCheck+0xf8>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b2a      	ldr	r3, [pc, #168]	@ (800197c <throttleSensorDeviationCheck+0xfc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d91b      	bls.n	8001912 <throttleSensorDeviationCheck+0x92>
			{
				percentageDeviation = (((primaryPotValue - secondaryPotValue) / (float)primaryPotValue) * 100);
 80018da:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <throttleSensorDeviationCheck+0xf8>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b27      	ldr	r3, [pc, #156]	@ (800197c <throttleSensorDeviationCheck+0xfc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018ec:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <throttleSensorDeviationCheck+0xf8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018fc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001984 <throttleSensorDeviationCheck+0x104>
 8001900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001908:	ee17 2a90 	vmov	r2, s15
 800190c:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <throttleSensorDeviationCheck+0x100>)
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e024      	b.n	800195c <throttleSensorDeviationCheck+0xdc>
			}
			else if (secondaryPotValue > primaryPotValue)
 8001912:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <throttleSensorDeviationCheck+0xfc>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <throttleSensorDeviationCheck+0xf8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d91b      	bls.n	8001956 <throttleSensorDeviationCheck+0xd6>
			{
				percentageDeviation = (((secondaryPotValue - primaryPotValue) / (float)secondaryPotValue) * 100);
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <throttleSensorDeviationCheck+0xfc>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <throttleSensorDeviationCheck+0xf8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	ee07 3a90 	vmov	s15, r3
 800192c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <throttleSensorDeviationCheck+0xfc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800193c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001940:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001984 <throttleSensorDeviationCheck+0x104>
 8001944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194c:	ee17 2a90 	vmov	r2, s15
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <throttleSensorDeviationCheck+0x100>)
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e002      	b.n	800195c <throttleSensorDeviationCheck+0xdc>
			}
			else
			{
				percentageDeviation = 0;
 8001956:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <throttleSensorDeviationCheck+0x100>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
			}
		}

		if (percentageDeviation > THROTTLE_DEVIATION_THRESHOLD)
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <throttleSensorDeviationCheck+0x100>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b0a      	cmp	r3, #10
 8001962:	dd01      	ble.n	8001968 <throttleSensorDeviationCheck+0xe8>
		{
			return true;
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <throttleSensorDeviationCheck+0xea>
		}
		else
		{
			return false;
 8001968:	2300      	movs	r3, #0
		}
	}
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200001a0 	.word	0x200001a0
 8001974:	20000130 	.word	0x20000130
 8001978:	20000198 	.word	0x20000198
 800197c:	2000019c 	.word	0x2000019c
 8001980:	20000194 	.word	0x20000194
 8001984:	42c80000 	.word	0x42c80000

08001988 <torqueRequest>:

void torqueRequest(void)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b083      	sub	sp, #12
 800198c:	af02      	add	r7, sp, #8
	if ((errorSet[PRIMARY_BRK_SENS_ERROR] == true && errorSet[SECOND_THROTTLE_SENS_ERR] == true) || errorSet[THROTTLE_OFFSET_ERROR] == true)
 800198e:	2303      	movs	r3, #3
 8001990:	4a37      	ldr	r2, [pc, #220]	@ (8001a70 <torqueRequest+0xe8>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d104      	bne.n	80019a2 <torqueRequest+0x1a>
 8001998:	2301      	movs	r3, #1
 800199a:	4a35      	ldr	r2, [pc, #212]	@ (8001a70 <torqueRequest+0xe8>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d004      	beq.n	80019ac <torqueRequest+0x24>
 80019a2:	2302      	movs	r3, #2
 80019a4:	4a32      	ldr	r2, [pc, #200]	@ (8001a70 <torqueRequest+0xe8>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d104      	bne.n	80019b6 <torqueRequest+0x2e>
	{
		torqueRefLimit = 5000;
 80019ac:	4b31      	ldr	r3, [pc, #196]	@ (8001a74 <torqueRequest+0xec>)
 80019ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e051      	b.n	8001a5a <torqueRequest+0xd2>
	}
	else if (errorSet[PRIM_THROTTLE_SENS_ERR] == true)
 80019b6:	2300      	movs	r3, #0
 80019b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a70 <torqueRequest+0xe8>)
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d126      	bne.n	8001a0e <torqueRequest+0x86>
	{
		secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 80019c0:	482d      	ldr	r0, [pc, #180]	@ (8001a78 <torqueRequest+0xf0>)
 80019c2:	f7ff ff10 	bl	80017e6 <getSecondaryThrottlePosition>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a2c      	ldr	r2, [pc, #176]	@ (8001a7c <torqueRequest+0xf4>)
 80019ca:	6013      	str	r3, [r2, #0]

		torqueRefLimit = map(secondaryPotValue, SECONDARY_THROTTLE_POSITION_MIN, SECONDARY_THROTTLE_POSITION_MAX, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 80019cc:	4b2b      	ldr	r3, [pc, #172]	@ (8001a7c <torqueRequest+0xf4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	2300      	movs	r3, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80019da:	461c      	mov	r4, r3
 80019dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e0:	f242 531c 	movw	r3, #9500	@ 0x251c
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	4613      	mov	r3, r2
 80019e8:	4622      	mov	r2, r4
 80019ea:	f7ff fd5f 	bl	80014ac <map>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a20      	ldr	r2, [pc, #128]	@ (8001a74 <torqueRequest+0xec>)
 80019f2:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 80019f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <torqueRequest+0xec>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80019fc:	f242 521c 	movw	r2, #9500	@ 0x251c
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fd6f 	bl	80014e4 <constrain>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4a1a      	ldr	r2, [pc, #104]	@ (8001a74 <torqueRequest+0xec>)
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e025      	b.n	8001a5a <torqueRequest+0xd2>
	}
	else
	{
		primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 8001a0e:	481a      	ldr	r0, [pc, #104]	@ (8001a78 <torqueRequest+0xf0>)
 8001a10:	f7ff fed4 	bl	80017bc <getPrimaryThrottlePosition>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a1a      	ldr	r2, [pc, #104]	@ (8001a80 <torqueRequest+0xf8>)
 8001a18:	6013      	str	r3, [r2, #0]

		torqueRefLimit = map(primaryPotValue, PRIMARY_THROTTLE_POSITION_MIN, PRIMARY_THROTTLE_POSITION_MAX, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 8001a1a:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <torqueRequest+0xf8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	4619      	mov	r1, r3
 8001a24:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001a28:	461c      	mov	r4, r3
 8001a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2e:	f242 531c 	movw	r3, #9500	@ 0x251c
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	4622      	mov	r2, r4
 8001a38:	f7ff fd38 	bl	80014ac <map>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <torqueRequest+0xec>)
 8001a40:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 8001a42:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <torqueRequest+0xec>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001a4a:	f242 521c 	movw	r2, #9500	@ 0x251c
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fd48 	bl	80014e4 <constrain>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4a07      	ldr	r2, [pc, #28]	@ (8001a74 <torqueRequest+0xec>)
 8001a58:	6013      	str	r3, [r2, #0]
	}

	torqueControlMessage(&hcan1, SPEED_REF_LIMIT, &torqueRefLimit);
 8001a5a:	f649 1364 	movw	r3, #39268	@ 0x9964
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <torqueRequest+0xec>)
 8001a60:	4619      	mov	r1, r3
 8001a62:	4808      	ldr	r0, [pc, #32]	@ (8001a84 <torqueRequest+0xfc>)
 8001a64:	f7fe fe4e 	bl	8000704 <torqueControlMessage>
}
 8001a68:	bf00      	nop
 8001a6a:	3704      	adds	r7, #4
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd90      	pop	{r4, r7, pc}
 8001a70:	200001a0 	.word	0x200001a0
 8001a74:	20000010 	.word	0x20000010
 8001a78:	20000130 	.word	0x20000130
 8001a7c:	2000019c 	.word	0x2000019c
 8001a80:	20000198 	.word	0x20000198
 8001a84:	2000008c 	.word	0x2000008c

08001a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a98:	d101      	bne.n	8001a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a9a:	f000 fc51 	bl	8002340 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aaa:	b672      	cpsid	i
}
 8001aac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aae:	bf00      	nop
 8001ab0:	e7fd      	b.n	8001aae <Error_Handler+0x8>
	...

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <HAL_MspInit+0x44>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a0e      	ldr	r2, [pc, #56]	@ (8001af8 <HAL_MspInit+0x44>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <HAL_MspInit+0x44>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_MspInit+0x44>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	4a08      	ldr	r2, [pc, #32]	@ (8001af8 <HAL_MspInit+0x44>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_MspInit+0x44>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a15      	ldr	r2, [pc, #84]	@ (8001b70 <HAL_ADC_MspInit+0x74>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d123      	bne.n	8001b66 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <HAL_ADC_MspInit+0x78>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	4a14      	ldr	r2, [pc, #80]	@ (8001b74 <HAL_ADC_MspInit+0x78>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_ADC_MspInit+0x78>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <HAL_ADC_MspInit+0x78>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b74 <HAL_ADC_MspInit+0x78>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <HAL_ADC_MspInit+0x78>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b4e:	230f      	movs	r3, #15
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b52:	2303      	movs	r3, #3
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <HAL_ADC_MspInit+0x7c>)
 8001b62:	f001 ff9b 	bl	8003a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	@ 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40012000 	.word	0x40012000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000

08001b7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	@ 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a4e      	ldr	r2, [pc, #312]	@ (8001cd4 <HAL_CAN_MspInit+0x158>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d142      	bne.n	8001c24 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd8 <HAL_CAN_MspInit+0x15c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd8 <HAL_CAN_MspInit+0x15c>)
 8001ba6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd8 <HAL_CAN_MspInit+0x15c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10b      	bne.n	8001bc8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	4a49      	ldr	r2, [pc, #292]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001bb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bbc:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc8:	4b44      	ldr	r3, [pc, #272]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bcc:	4a43      	ldr	r2, [pc, #268]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd4:	4b41      	ldr	r3, [pc, #260]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001be0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bf2:	2309      	movs	r3, #9
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4838      	ldr	r0, [pc, #224]	@ (8001ce0 <HAL_CAN_MspInit+0x164>)
 8001bfe:	f001 ff4d 	bl	8003a9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 7, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2107      	movs	r1, #7
 8001c06:	2014      	movs	r0, #20
 8001c08:	f001 ff1e 	bl	8003a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c0c:	2014      	movs	r0, #20
 8001c0e:	f001 ff37 	bl	8003a80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 6, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2106      	movs	r1, #6
 8001c16:	2015      	movs	r0, #21
 8001c18:	f001 ff16 	bl	8003a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c1c:	2015      	movs	r0, #21
 8001c1e:	f001 ff2f 	bl	8003a80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001c22:	e052      	b.n	8001cca <HAL_CAN_MspInit+0x14e>
  else if(hcan->Instance==CAN2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2e      	ldr	r2, [pc, #184]	@ (8001ce4 <HAL_CAN_MspInit+0x168>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d14d      	bne.n	8001cca <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	4a2a      	ldr	r2, [pc, #168]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001c34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c3a:	4b28      	ldr	r3, [pc, #160]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c46:	4b24      	ldr	r3, [pc, #144]	@ (8001cd8 <HAL_CAN_MspInit+0x15c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4a22      	ldr	r2, [pc, #136]	@ (8001cd8 <HAL_CAN_MspInit+0x15c>)
 8001c4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c50:	4b21      	ldr	r3, [pc, #132]	@ (8001cd8 <HAL_CAN_MspInit+0x15c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d10b      	bne.n	8001c70 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c58:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001c5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	4a19      	ldr	r2, [pc, #100]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7c:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <HAL_CAN_MspInit+0x160>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c88:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001c9a:	2309      	movs	r3, #9
 8001c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4810      	ldr	r0, [pc, #64]	@ (8001ce8 <HAL_CAN_MspInit+0x16c>)
 8001ca6:	f001 fef9 	bl	8003a9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 1, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2101      	movs	r1, #1
 8001cae:	2040      	movs	r0, #64	@ 0x40
 8001cb0:	f001 feca 	bl	8003a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001cb4:	2040      	movs	r0, #64	@ 0x40
 8001cb6:	f001 fee3 	bl	8003a80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 2, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	2041      	movs	r0, #65	@ 0x41
 8001cc0:	f001 fec2 	bl	8003a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001cc4:	2041      	movs	r0, #65	@ 0x41
 8001cc6:	f001 fedb 	bl	8003a80 <HAL_NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3730      	adds	r7, #48	@ 0x30
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40006400 	.word	0x40006400
 8001cd8:	20000224 	.word	0x20000224
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40006800 	.word	0x40006800
 8001ce8:	40020400 	.word	0x40020400

08001cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <HAL_TIM_Base_MspInit+0x44>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d113      	bne.n	8001d26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_TIM_Base_MspInit+0x48>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a0c      	ldr	r2, [pc, #48]	@ (8001d34 <HAL_TIM_Base_MspInit+0x48>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_TIM_Base_MspInit+0x48>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	201b      	movs	r0, #27
 8001d1c:	f001 fe94 	bl	8003a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d20:	201b      	movs	r0, #27
 8001d22:	f001 fead 	bl	8003a80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40023800 	.word	0x40023800

08001d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08e      	sub	sp, #56	@ 0x38
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001d48:	4b34      	ldr	r3, [pc, #208]	@ (8001e1c <HAL_InitTick+0xe4>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	4a33      	ldr	r2, [pc, #204]	@ (8001e1c <HAL_InitTick+0xe4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d54:	4b31      	ldr	r3, [pc, #196]	@ (8001e1c <HAL_InitTick+0xe4>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d60:	f107 0210 	add.w	r2, r7, #16
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 fcf4 	bl	8004758 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d103      	bne.n	8001d82 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d7a:	f002 fcd9 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 8001d7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d80:	e004      	b.n	8001d8c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d82:	f002 fcd5 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 8001d86:	4603      	mov	r3, r0
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d8e:	4a24      	ldr	r2, [pc, #144]	@ (8001e20 <HAL_InitTick+0xe8>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	0c9b      	lsrs	r3, r3, #18
 8001d96:	3b01      	subs	r3, #1
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001d9a:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <HAL_InitTick+0xec>)
 8001d9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001da2:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <HAL_InitTick+0xec>)
 8001da4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001da8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001daa:	4a1e      	ldr	r2, [pc, #120]	@ (8001e24 <HAL_InitTick+0xec>)
 8001dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dae:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001db0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <HAL_InitTick+0xec>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <HAL_InitTick+0xec>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <HAL_InitTick+0xec>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001dc2:	4818      	ldr	r0, [pc, #96]	@ (8001e24 <HAL_InitTick+0xec>)
 8001dc4:	f002 fcfa 	bl	80047bc <HAL_TIM_Base_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001dce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d11b      	bne.n	8001e0e <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001dd6:	4813      	ldr	r0, [pc, #76]	@ (8001e24 <HAL_InitTick+0xec>)
 8001dd8:	f002 fd48 	bl	800486c <HAL_TIM_Base_Start_IT>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001de2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d111      	bne.n	8001e0e <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dea:	201c      	movs	r0, #28
 8001dec:	f001 fe48 	bl	8003a80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	d808      	bhi.n	8001e08 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001df6:	2200      	movs	r2, #0
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	201c      	movs	r0, #28
 8001dfc:	f001 fe24 	bl	8003a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e00:	4a09      	ldr	r2, [pc, #36]	@ (8001e28 <HAL_InitTick+0xf0>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e002      	b.n	8001e0e <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3738      	adds	r7, #56	@ 0x38
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	20000228 	.word	0x20000228
 8001e28:	20000018 	.word	0x20000018

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <NMI_Handler+0x4>

08001e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <MemManage_Handler+0x4>

08001e44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e68:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <CAN1_RX0_IRQHandler+0x10>)
 8001e6a:	f001 fb0f 	bl	800348c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000008c 	.word	0x2000008c

08001e78 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <CAN1_RX1_IRQHandler+0x10>)
 8001e7e:	f001 fb05 	bl	800348c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000008c 	.word	0x2000008c

08001e8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e90:	4802      	ldr	r0, [pc, #8]	@ (8001e9c <TIM1_CC_IRQHandler+0x10>)
 8001e92:	f002 ffdb 	bl	8004e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200000dc 	.word	0x200000dc

08001ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <TIM2_IRQHandler+0x10>)
 8001ea6:	f002 ffd1 	bl	8004e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000228 	.word	0x20000228

08001eb4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001eb8:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <CAN2_RX0_IRQHandler+0x10>)
 8001eba:	f001 fae7 	bl	800348c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200000b4 	.word	0x200000b4

08001ec8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <CAN2_RX1_IRQHandler+0x10>)
 8001ece:	f001 fadd 	bl	800348c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200000b4 	.word	0x200000b4

08001edc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <SystemInit+0x20>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee6:	4a05      	ldr	r2, [pc, #20]	@ (8001efc <SystemInit+0x20>)
 8001ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <Unpack_TS_ECU1_TX1_Temp>:
  return TS_ECU_SYNC_RX2_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU1_TX1_Temp(TS_ECU1_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	3b28      	subs	r3, #40	@ 0x28
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	3b28      	subs	r3, #40	@ 0x28
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	3302      	adds	r3, #2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	3b28      	subs	r3, #40	@ 0x28
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	3303      	adds	r3, #3
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	3304      	adds	r3, #4
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	08db      	lsrs	r3, r3, #3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3304      	adds	r3, #4
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	731a      	strb	r2, [r3, #12]
  return TS_ECU1_TX1_CANID;
 8001fb4:	f240 3311 	movw	r3, #785	@ 0x311
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <Unpack_TS_ECU2_TX1_Temp>:
  return TS_ECU1_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU2_TX1_Temp(TS_ECU2_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	3b28      	subs	r3, #40	@ 0x28
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	3b28      	subs	r3, #40	@ 0x28
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	3b28      	subs	r3, #40	@ 0x28
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3303      	adds	r3, #3
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3304      	adds	r3, #4
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	b2da      	uxtb	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3304      	adds	r3, #4
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3304      	adds	r3, #4
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	3304      	adds	r3, #4
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	08db      	lsrs	r3, r3, #3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	b2da      	uxtb	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3304      	adds	r3, #4
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	3304      	adds	r3, #4
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	731a      	strb	r2, [r3, #12]
  return TS_ECU2_TX1_CANID;
 8002078:	f240 3321 	movw	r3, #801	@ 0x321
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <Unpack_TS_ECU3_TX1_Temp>:
  return TS_ECU2_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU3_TX1_Temp(TS_ECU3_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	4613      	mov	r3, r2
 8002094:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	3b28      	subs	r3, #40	@ 0x28
 800209c:	b29b      	uxth	r3, r3
 800209e:	b21a      	sxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	3301      	adds	r3, #1
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	3b28      	subs	r3, #40	@ 0x28
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	3302      	adds	r3, #2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	3b28      	subs	r3, #40	@ 0x28
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b21a      	sxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	3303      	adds	r3, #3
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	3304      	adds	r3, #4
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	3304      	adds	r3, #4
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3304      	adds	r3, #4
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3304      	adds	r3, #4
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3304      	adds	r3, #4
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	b2da      	uxtb	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	3304      	adds	r3, #4
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	b2da      	uxtb	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	731a      	strb	r2, [r3, #12]
  return TS_ECU3_TX1_CANID;
 800213c:	f240 3331 	movw	r3, #817	@ 0x331
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <Unpack_TS_ECU4_TX1_Temp>:
  return TS_ECU3_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU4_TX1_Temp(TS_ECU4_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	4613      	mov	r3, r2
 8002158:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	3b28      	subs	r3, #40	@ 0x28
 8002160:	b29b      	uxth	r3, r3
 8002162:	b21a      	sxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	3301      	adds	r3, #1
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	3b28      	subs	r3, #40	@ 0x28
 8002170:	b29b      	uxth	r3, r3
 8002172:	b21a      	sxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3302      	adds	r3, #2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	3b28      	subs	r3, #40	@ 0x28
 8002180:	b29b      	uxth	r3, r3
 8002182:	b21a      	sxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3303      	adds	r3, #3
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	3304      	adds	r3, #4
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3304      	adds	r3, #4
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3304      	adds	r3, #4
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3304      	adds	r3, #4
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3304      	adds	r3, #4
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3304      	adds	r3, #4
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	731a      	strb	r2, [r3, #12]
  return TS_ECU4_TX1_CANID;
 8002200:	f240 3341 	movw	r3, #833	@ 0x341
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <Unpack_TS_ECU5_TX1_Temp>:
  return TS_ECU4_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU5_TX1_Temp(TS_ECU5_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	4613      	mov	r3, r2
 800221c:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	3b28      	subs	r3, #40	@ 0x28
 8002224:	b29b      	uxth	r3, r3
 8002226:	b21a      	sxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	3301      	adds	r3, #1
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	3b28      	subs	r3, #40	@ 0x28
 8002234:	b29b      	uxth	r3, r3
 8002236:	b21a      	sxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	3302      	adds	r3, #2
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	3b28      	subs	r3, #40	@ 0x28
 8002244:	b29b      	uxth	r3, r3
 8002246:	b21a      	sxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	3303      	adds	r3, #3
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3304      	adds	r3, #4
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	b2da      	uxtb	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3304      	adds	r3, #4
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3304      	adds	r3, #4
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	3304      	adds	r3, #4
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	b2da      	uxtb	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	3304      	adds	r3, #4
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3304      	adds	r3, #4
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	731a      	strb	r2, [r3, #12]
  return TS_ECU5_TX1_CANID;
 80022c4:	f240 3351 	movw	r3, #849	@ 0x351
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800230c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d8:	480d      	ldr	r0, [pc, #52]	@ (8002310 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022da:	490e      	ldr	r1, [pc, #56]	@ (8002314 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0b      	ldr	r2, [pc, #44]	@ (800231c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022f0:	4c0b      	ldr	r4, [pc, #44]	@ (8002320 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022fe:	f7ff fded 	bl	8001edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002302:	f006 f933 	bl	800856c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002306:	f7fe fc27 	bl	8000b58 <main>
  bx  lr    
 800230a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800230c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002314:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002318:	08008694 	.word	0x08008694
  ldr r2, =_sbss
 800231c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002320:	2000401c 	.word	0x2000401c

08002324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002324:	e7fe      	b.n	8002324 <ADC_IRQHandler>

08002326 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232a:	2003      	movs	r0, #3
 800232c:	f001 fb81 	bl	8003a32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002330:	200f      	movs	r0, #15
 8002332:	f7ff fd01 	bl	8001d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002336:	f7ff fbbd 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	2000001c 	.word	0x2000001c
 8002364:	20000274 	.word	0x20000274

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000274 	.word	0x20000274

08002380 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e031      	b.n	80023fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fbac 	bl	8001afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d116      	bne.n	80023ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_ADC_Init+0x84>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	f043 0202 	orr.w	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fb0a 	bl	80029e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	f023 0303 	bic.w	r3, r3, #3
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80023ea:	e001      	b.n	80023f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	ffffeefd 	.word	0xffffeefd

08002408 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_ADC_Start+0x1a>
 800241e:	2302      	movs	r3, #2
 8002420:	e0ad      	b.n	800257e <HAL_ADC_Start+0x176>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d018      	beq.n	800246a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002448:	4b50      	ldr	r3, [pc, #320]	@ (800258c <HAL_ADC_Start+0x184>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a50      	ldr	r2, [pc, #320]	@ (8002590 <HAL_ADC_Start+0x188>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0c9a      	lsrs	r2, r3, #18
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800245c:	e002      	b.n	8002464 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3b01      	subs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f9      	bne.n	800245e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d175      	bne.n	8002564 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800247c:	4b45      	ldr	r3, [pc, #276]	@ (8002594 <HAL_ADC_Start+0x18c>)
 800247e:	4013      	ands	r3, r2
 8002480:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800249e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024b2:	d106      	bne.n	80024c2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b8:	f023 0206 	bic.w	r2, r3, #6
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	645a      	str	r2, [r3, #68]	@ 0x44
 80024c0:	e002      	b.n	80024c8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80024da:	4b2f      	ldr	r3, [pc, #188]	@ (8002598 <HAL_ADC_Start+0x190>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10f      	bne.n	8002506 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d143      	bne.n	800257c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	e03a      	b.n	800257c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a24      	ldr	r2, [pc, #144]	@ (800259c <HAL_ADC_Start+0x194>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d10e      	bne.n	800252e <HAL_ADC_Start+0x126>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d107      	bne.n	800252e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800252c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800252e:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <HAL_ADC_Start+0x190>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	d120      	bne.n	800257c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a18      	ldr	r2, [pc, #96]	@ (80025a0 <HAL_ADC_Start+0x198>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d11b      	bne.n	800257c <HAL_ADC_Start+0x174>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d114      	bne.n	800257c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	e00b      	b.n	800257c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	f043 0210 	orr.w	r2, r3, #16
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000014 	.word	0x20000014
 8002590:	431bde83 	.word	0x431bde83
 8002594:	fffff8fe 	.word	0xfffff8fe
 8002598:	40012300 	.word	0x40012300
 800259c:	40012000 	.word	0x40012000
 80025a0:	40012200 	.word	0x40012200

080025a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Stop+0x16>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e01f      	b.n	80025fa <HAL_ADC_Stop+0x56>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d107      	bne.n	80025f0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025e4:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <HAL_ADC_Stop+0x64>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	ffffeefe 	.word	0xffffeefe

0800260c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002628:	d113      	bne.n	8002652 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002638:	d10b      	bne.n	8002652 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f043 0220 	orr.w	r2, r3, #32
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e063      	b.n	800271a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002652:	f7ff fe89 	bl	8002368 <HAL_GetTick>
 8002656:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002658:	e021      	b.n	800269e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d01d      	beq.n	800269e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <HAL_ADC_PollForConversion+0x6c>
 8002668:	f7ff fe7e 	bl	8002368 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d212      	bcs.n	800269e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b02      	cmp	r3, #2
 8002684:	d00b      	beq.n	800269e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f043 0204 	orr.w	r2, r3, #4
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e03d      	b.n	800271a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d1d6      	bne.n	800265a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0212 	mvn.w	r2, #18
 80026b4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d123      	bne.n	8002718 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d11f      	bne.n	8002718 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026de:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d006      	beq.n	80026f4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1c>
 8002754:	2302      	movs	r3, #2
 8002756:	e136      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x28a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b09      	cmp	r3, #9
 8002766:	d93a      	bls.n	80027de <HAL_ADC_ConfigChannel+0xa2>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002770:	d035      	beq.n	80027de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68d9      	ldr	r1, [r3, #12]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	3b1e      	subs	r3, #30
 8002788:	2207      	movs	r2, #7
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	400a      	ands	r2, r1
 8002796:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a8d      	ldr	r2, [pc, #564]	@ (80029d4 <HAL_ADC_ConfigChannel+0x298>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10a      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68d9      	ldr	r1, [r3, #12]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	061a      	lsls	r2, r3, #24
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027b6:	e035      	b.n	8002824 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68d9      	ldr	r1, [r3, #12]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4403      	add	r3, r0
 80027d0:	3b1e      	subs	r3, #30
 80027d2:	409a      	lsls	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027dc:	e022      	b.n	8002824 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6919      	ldr	r1, [r3, #16]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	2207      	movs	r2, #7
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43da      	mvns	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	400a      	ands	r2, r1
 8002800:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6919      	ldr	r1, [r3, #16]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	4618      	mov	r0, r3
 8002814:	4603      	mov	r3, r0
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4403      	add	r3, r0
 800281a:	409a      	lsls	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b06      	cmp	r3, #6
 800282a:	d824      	bhi.n	8002876 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	3b05      	subs	r3, #5
 800283e:	221f      	movs	r2, #31
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43da      	mvns	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	400a      	ands	r2, r1
 800284c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	4618      	mov	r0, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	3b05      	subs	r3, #5
 8002868:	fa00 f203 	lsl.w	r2, r0, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	635a      	str	r2, [r3, #52]	@ 0x34
 8002874:	e04c      	b.n	8002910 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d824      	bhi.n	80028c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3b23      	subs	r3, #35	@ 0x23
 8002890:	221f      	movs	r2, #31
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	400a      	ands	r2, r1
 800289e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4618      	mov	r0, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	3b23      	subs	r3, #35	@ 0x23
 80028ba:	fa00 f203 	lsl.w	r2, r0, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80028c6:	e023      	b.n	8002910 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	3b41      	subs	r3, #65	@ 0x41
 80028da:	221f      	movs	r2, #31
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43da      	mvns	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	400a      	ands	r2, r1
 80028e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	3b41      	subs	r3, #65	@ 0x41
 8002904:	fa00 f203 	lsl.w	r2, r0, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a30      	ldr	r2, [pc, #192]	@ (80029d8 <HAL_ADC_ConfigChannel+0x29c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d10a      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x1f4>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002922:	d105      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002924:	4b2d      	ldr	r3, [pc, #180]	@ (80029dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a2c      	ldr	r2, [pc, #176]	@ (80029dc <HAL_ADC_ConfigChannel+0x2a0>)
 800292a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800292e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a28      	ldr	r2, [pc, #160]	@ (80029d8 <HAL_ADC_ConfigChannel+0x29c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10f      	bne.n	800295a <HAL_ADC_ConfigChannel+0x21e>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b12      	cmp	r3, #18
 8002940:	d10b      	bne.n	800295a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002942:	4b26      	ldr	r3, [pc, #152]	@ (80029dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a25      	ldr	r2, [pc, #148]	@ (80029dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002948:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800294c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800294e:	4b23      	ldr	r3, [pc, #140]	@ (80029dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4a22      	ldr	r2, [pc, #136]	@ (80029dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002954:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002958:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1e      	ldr	r2, [pc, #120]	@ (80029d8 <HAL_ADC_ConfigChannel+0x29c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d12b      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x280>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1a      	ldr	r2, [pc, #104]	@ (80029d4 <HAL_ADC_ConfigChannel+0x298>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d003      	beq.n	8002976 <HAL_ADC_ConfigChannel+0x23a>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b11      	cmp	r3, #17
 8002974:	d122      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002976:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a18      	ldr	r2, [pc, #96]	@ (80029dc <HAL_ADC_ConfigChannel+0x2a0>)
 800297c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002980:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002982:	4b16      	ldr	r3, [pc, #88]	@ (80029dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4a15      	ldr	r2, [pc, #84]	@ (80029dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002988:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800298c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a10      	ldr	r2, [pc, #64]	@ (80029d4 <HAL_ADC_ConfigChannel+0x298>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d111      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <HAL_ADC_ConfigChannel+0x2a4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a11      	ldr	r2, [pc, #68]	@ (80029e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9a      	lsrs	r2, r3, #18
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029ae:	e002      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f9      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	10000012 	.word	0x10000012
 80029d8:	40012000 	.word	0x40012000
 80029dc:	40012300 	.word	0x40012300
 80029e0:	20000014 	.word	0x20000014
 80029e4:	431bde83 	.word	0x431bde83

080029e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029f0:	4b78      	ldr	r3, [pc, #480]	@ (8002bd4 <ADC_Init+0x1ec>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a77      	ldr	r2, [pc, #476]	@ (8002bd4 <ADC_Init+0x1ec>)
 80029f6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80029fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029fc:	4b75      	ldr	r3, [pc, #468]	@ (8002bd4 <ADC_Init+0x1ec>)
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4973      	ldr	r1, [pc, #460]	@ (8002bd4 <ADC_Init+0x1ec>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6899      	ldr	r1, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	4a58      	ldr	r2, [pc, #352]	@ (8002bd8 <ADC_Init+0x1f0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	e00f      	b.n	8002ae2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ae0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0202 	bic.w	r2, r2, #2
 8002af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	005a      	lsls	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01b      	beq.n	8002b48 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	035a      	lsls	r2, r3, #13
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	e007      	b.n	8002b58 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	051a      	lsls	r2, r3, #20
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b9a:	025a      	lsls	r2, r3, #9
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	029a      	lsls	r2, r3, #10
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40012300 	.word	0x40012300
 8002bd8:	0f000001 	.word	0x0f000001

08002bdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0ed      	b.n	8002dca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe ffbe 	bl	8001b7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c10:	f7ff fbaa 	bl	8002368 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c16:	e012      	b.n	8002c3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c18:	f7ff fba6 	bl	8002368 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b0a      	cmp	r3, #10
 8002c24:	d90b      	bls.n	8002c3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2205      	movs	r2, #5
 8002c36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0c5      	b.n	8002dca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0e5      	beq.n	8002c18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0202 	bic.w	r2, r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c5c:	f7ff fb84 	bl	8002368 <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c62:	e012      	b.n	8002c8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c64:	f7ff fb80 	bl	8002368 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b0a      	cmp	r3, #10
 8002c70:	d90b      	bls.n	8002c8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2205      	movs	r2, #5
 8002c82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e09f      	b.n	8002dca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e5      	bne.n	8002c64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7e1b      	ldrb	r3, [r3, #24]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d108      	bne.n	8002cb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e007      	b.n	8002cc2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	7e5b      	ldrb	r3, [r3, #25]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d108      	bne.n	8002cdc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e007      	b.n	8002cec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7e9b      	ldrb	r3, [r3, #26]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d108      	bne.n	8002d06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0220 	orr.w	r2, r2, #32
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e007      	b.n	8002d16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0220 	bic.w	r2, r2, #32
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	7edb      	ldrb	r3, [r3, #27]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d108      	bne.n	8002d30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0210 	bic.w	r2, r2, #16
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e007      	b.n	8002d40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0210 	orr.w	r2, r2, #16
 8002d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7f1b      	ldrb	r3, [r3, #28]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d108      	bne.n	8002d5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0208 	orr.w	r2, r2, #8
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e007      	b.n	8002d6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0208 	bic.w	r2, r2, #8
 8002d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7f5b      	ldrb	r3, [r3, #29]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d108      	bne.n	8002d84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0204 	orr.w	r2, r2, #4
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e007      	b.n	8002d94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0204 	bic.w	r2, r2, #4
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	ea42 0103 	orr.w	r1, r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	1e5a      	subs	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d003      	beq.n	8002dfa <HAL_CAN_ConfigFilter+0x26>
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	f040 80c7 	bne.w	8002f88 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a69      	ldr	r2, [pc, #420]	@ (8002fa4 <HAL_CAN_ConfigFilter+0x1d0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d001      	beq.n	8002e08 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002e04:	4b68      	ldr	r3, [pc, #416]	@ (8002fa8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002e06:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	4a63      	ldr	r2, [pc, #396]	@ (8002fa8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d111      	bne.n	8002e44 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e26:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	401a      	ands	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d123      	bne.n	8002eb6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	401a      	ands	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3248      	adds	r2, #72	@ 0x48
 8002e96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002eaa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002eac:	6979      	ldr	r1, [r7, #20]
 8002eae:	3348      	adds	r3, #72	@ 0x48
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d122      	bne.n	8002f04 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ede:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3248      	adds	r2, #72	@ 0x48
 8002ee4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ef8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002efa:	6979      	ldr	r1, [r7, #20]
 8002efc:	3348      	adds	r3, #72	@ 0x48
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d109      	bne.n	8002f20 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	401a      	ands	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002f1e:	e007      	b.n	8002f30 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002f4a:	e007      	b.n	8002f5c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002f7a:	f023 0201 	bic.w	r2, r3, #1
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e006      	b.n	8002f96 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40003400 	.word	0x40003400
 8002fa8:	40006400 	.word	0x40006400

08002fac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d12e      	bne.n	800301e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fd8:	f7ff f9c6 	bl	8002368 <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fde:	e012      	b.n	8003006 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fe0:	f7ff f9c2 	bl	8002368 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b0a      	cmp	r3, #10
 8002fec:	d90b      	bls.n	8003006 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2205      	movs	r2, #5
 8002ffe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e012      	b.n	800302c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e5      	bne.n	8002fe0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e006      	b.n	800302c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	@ 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003048:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003052:	7ffb      	ldrb	r3, [r7, #31]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d003      	beq.n	8003060 <HAL_CAN_AddTxMessage+0x2c>
 8003058:	7ffb      	ldrb	r3, [r7, #31]
 800305a:	2b02      	cmp	r3, #2
 800305c:	f040 80ad 	bne.w	80031ba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003070:	2b00      	cmp	r3, #0
 8003072:	d105      	bne.n	8003080 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8095 	beq.w	80031aa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	0e1b      	lsrs	r3, r3, #24
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800308a:	2201      	movs	r2, #1
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	409a      	lsls	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10d      	bne.n	80030b8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	6809      	ldr	r1, [r1, #0]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3318      	adds	r3, #24
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	440b      	add	r3, r1
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e00f      	b.n	80030d8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030c2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030c8:	68f9      	ldr	r1, [r7, #12]
 80030ca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80030cc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	3318      	adds	r3, #24
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	440b      	add	r3, r1
 80030d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	3318      	adds	r3, #24
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	440b      	add	r3, r1
 80030e8:	3304      	adds	r3, #4
 80030ea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	7d1b      	ldrb	r3, [r3, #20]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d111      	bne.n	8003118 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3318      	adds	r3, #24
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	4413      	add	r3, r2
 8003100:	3304      	adds	r3, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	6811      	ldr	r1, [r2, #0]
 8003108:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3318      	adds	r3, #24
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	440b      	add	r3, r1
 8003114:	3304      	adds	r3, #4
 8003116:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3307      	adds	r3, #7
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	061a      	lsls	r2, r3, #24
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3306      	adds	r3, #6
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	041b      	lsls	r3, r3, #16
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3305      	adds	r3, #5
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	4313      	orrs	r3, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	3204      	adds	r2, #4
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	4610      	mov	r0, r2
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	6811      	ldr	r1, [r2, #0]
 8003140:	ea43 0200 	orr.w	r2, r3, r0
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	440b      	add	r3, r1
 800314a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800314e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3303      	adds	r3, #3
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	061a      	lsls	r2, r3, #24
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3302      	adds	r3, #2
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	041b      	lsls	r3, r3, #16
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3301      	adds	r3, #1
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	4313      	orrs	r3, r2
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	4610      	mov	r0, r2
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	6811      	ldr	r1, [r2, #0]
 8003176:	ea43 0200 	orr.w	r2, r3, r0
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	440b      	add	r3, r1
 8003180:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003184:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	3318      	adds	r3, #24
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	4413      	add	r3, r2
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	6811      	ldr	r1, [r2, #0]
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3318      	adds	r3, #24
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	440b      	add	r3, r1
 80031a4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e00e      	b.n	80031c8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e006      	b.n	80031c8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3724      	adds	r7, #36	@ 0x24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80031ea:	7afb      	ldrb	r3, [r7, #11]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d002      	beq.n	80031f6 <HAL_CAN_IsTxMessagePending+0x22>
 80031f0:	7afb      	ldrb	r3, [r7, #11]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d10b      	bne.n	800320e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	069b      	lsls	r3, r3, #26
 8003200:	401a      	ands	r2, r3
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	069b      	lsls	r3, r3, #26
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800320a:	2301      	movs	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800320e:	68fb      	ldr	r3, [r7, #12]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003230:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003232:	7dfb      	ldrb	r3, [r7, #23]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d003      	beq.n	8003240 <HAL_CAN_GetRxMessage+0x24>
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b02      	cmp	r3, #2
 800323c:	f040 80f3 	bne.w	8003426 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10e      	bne.n	8003264 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d116      	bne.n	8003282 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0e7      	b.n	8003434 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0d8      	b.n	8003434 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	331b      	adds	r3, #27
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	4413      	add	r3, r2
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0204 	and.w	r2, r3, #4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10c      	bne.n	80032ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	331b      	adds	r3, #27
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0d5b      	lsrs	r3, r3, #21
 80032b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e00b      	b.n	80032d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	331b      	adds	r3, #27
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	08db      	lsrs	r3, r3, #3
 80032ca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	331b      	adds	r3, #27
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	4413      	add	r3, r2
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0202 	and.w	r2, r3, #2
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	331b      	adds	r3, #27
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	4413      	add	r3, r2
 80032f4:	3304      	adds	r3, #4
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 020f 	and.w	r2, r3, #15
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	331b      	adds	r3, #27
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	4413      	add	r3, r2
 800330c:	3304      	adds	r3, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	b2da      	uxtb	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	331b      	adds	r3, #27
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	4413      	add	r3, r2
 8003324:	3304      	adds	r3, #4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	b29a      	uxth	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	4413      	add	r3, r2
 800333a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	4413      	add	r3, r2
 8003350:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0a1a      	lsrs	r2, r3, #8
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	3301      	adds	r3, #1
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	4413      	add	r3, r2
 800336a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0c1a      	lsrs	r2, r3, #16
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	3302      	adds	r3, #2
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	4413      	add	r3, r2
 8003384:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0e1a      	lsrs	r2, r3, #24
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	3303      	adds	r3, #3
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	4413      	add	r3, r2
 800339e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	3304      	adds	r3, #4
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0a1a      	lsrs	r2, r3, #8
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	3305      	adds	r3, #5
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0c1a      	lsrs	r2, r3, #16
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	3306      	adds	r3, #6
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e1a      	lsrs	r2, r3, #24
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	3307      	adds	r3, #7
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d108      	bne.n	8003412 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0220 	orr.w	r2, r2, #32
 800340e:	60da      	str	r2, [r3, #12]
 8003410:	e007      	b.n	8003422 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0220 	orr.w	r2, r2, #32
 8003420:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e006      	b.n	8003434 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
  }
}
 8003434:	4618      	mov	r0, r3
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003450:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d002      	beq.n	800345e <HAL_CAN_ActivateNotification+0x1e>
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d109      	bne.n	8003472 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6959      	ldr	r1, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e006      	b.n	8003480 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
  }
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	@ 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d07c      	beq.n	80035cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d023      	beq.n	8003524 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2201      	movs	r2, #1
 80034e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f983 	bl	80037fa <HAL_CAN_TxMailbox0CompleteCallback>
 80034f4:	e016      	b.n	8003524 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003506:	627b      	str	r3, [r7, #36]	@ 0x24
 8003508:	e00c      	b.n	8003524 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003516:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
 800351c:	e002      	b.n	8003524 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f989 	bl	8003836 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d024      	beq.n	8003578 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003536:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f963 	bl	800380e <HAL_CAN_TxMailbox1CompleteCallback>
 8003548:	e016      	b.n	8003578 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800355a:	627b      	str	r3, [r7, #36]	@ 0x24
 800355c:	e00c      	b.n	8003578 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003570:	e002      	b.n	8003578 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f969 	bl	800384a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d024      	beq.n	80035cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800358a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f943 	bl	8003822 <HAL_CAN_TxMailbox2CompleteCallback>
 800359c:	e016      	b.n	80035cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b0:	e00c      	b.n	80035cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d004      	beq.n	80035c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c4:	e002      	b.n	80035cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f949 	bl	800385e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2210      	movs	r2, #16
 80035ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2208      	movs	r2, #8
 800360a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f930 	bl	8003872 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fa4a 	bl	8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00c      	beq.n	8003654 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2210      	movs	r2, #16
 8003652:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d006      	beq.n	8003676 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2208      	movs	r2, #8
 800366e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f908 	bl	8003886 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d009      	beq.n	8003694 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fd fa58 	bl	8000b44 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2210      	movs	r2, #16
 80036ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f8f2 	bl	800389a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2208      	movs	r2, #8
 80036d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8eb 	bl	80038ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d07b      	beq.n	80037da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d072      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	f043 0302 	orr.w	r3, r3, #2
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	f043 0304 	orr.w	r3, r3, #4
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003746:	2b00      	cmp	r3, #0
 8003748:	d043      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003750:	2b00      	cmp	r3, #0
 8003752:	d03e      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800375a:	2b60      	cmp	r3, #96	@ 0x60
 800375c:	d02b      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x32a>
 800375e:	2b60      	cmp	r3, #96	@ 0x60
 8003760:	d82e      	bhi.n	80037c0 <HAL_CAN_IRQHandler+0x334>
 8003762:	2b50      	cmp	r3, #80	@ 0x50
 8003764:	d022      	beq.n	80037ac <HAL_CAN_IRQHandler+0x320>
 8003766:	2b50      	cmp	r3, #80	@ 0x50
 8003768:	d82a      	bhi.n	80037c0 <HAL_CAN_IRQHandler+0x334>
 800376a:	2b40      	cmp	r3, #64	@ 0x40
 800376c:	d019      	beq.n	80037a2 <HAL_CAN_IRQHandler+0x316>
 800376e:	2b40      	cmp	r3, #64	@ 0x40
 8003770:	d826      	bhi.n	80037c0 <HAL_CAN_IRQHandler+0x334>
 8003772:	2b30      	cmp	r3, #48	@ 0x30
 8003774:	d010      	beq.n	8003798 <HAL_CAN_IRQHandler+0x30c>
 8003776:	2b30      	cmp	r3, #48	@ 0x30
 8003778:	d822      	bhi.n	80037c0 <HAL_CAN_IRQHandler+0x334>
 800377a:	2b10      	cmp	r3, #16
 800377c:	d002      	beq.n	8003784 <HAL_CAN_IRQHandler+0x2f8>
 800377e:	2b20      	cmp	r3, #32
 8003780:	d005      	beq.n	800378e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003782:	e01d      	b.n	80037c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	f043 0308 	orr.w	r3, r3, #8
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800378c:	e019      	b.n	80037c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	f043 0310 	orr.w	r3, r3, #16
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003796:	e014      	b.n	80037c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	f043 0320 	orr.w	r3, r3, #32
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80037a0:	e00f      	b.n	80037c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80037aa:	e00a      	b.n	80037c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80037b4:	e005      	b.n	80037c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80037be:	e000      	b.n	80037c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80037c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699a      	ldr	r2, [r3, #24]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80037d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2204      	movs	r2, #4
 80037d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f868 	bl	80038c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80037f2:	bf00      	nop
 80037f4:	3728      	adds	r7, #40	@ 0x28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <__NVIC_SetPriorityGrouping>:
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <__NVIC_SetPriorityGrouping+0x40>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038f4:	4013      	ands	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003900:	4b06      	ldr	r3, [pc, #24]	@ (800391c <__NVIC_SetPriorityGrouping+0x44>)
 8003902:	4313      	orrs	r3, r2
 8003904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003906:	4a04      	ldr	r2, [pc, #16]	@ (8003918 <__NVIC_SetPriorityGrouping+0x40>)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	60d3      	str	r3, [r2, #12]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000ed00 	.word	0xe000ed00
 800391c:	05fa0000 	.word	0x05fa0000

08003920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003924:	4b04      	ldr	r3, [pc, #16]	@ (8003938 <__NVIC_GetPriorityGrouping+0x18>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	0a1b      	lsrs	r3, r3, #8
 800392a:	f003 0307 	and.w	r3, r3, #7
}
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	2b00      	cmp	r3, #0
 800394c:	db0b      	blt.n	8003966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	f003 021f 	and.w	r2, r3, #31
 8003954:	4907      	ldr	r1, [pc, #28]	@ (8003974 <__NVIC_EnableIRQ+0x38>)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	2001      	movs	r0, #1
 800395e:	fa00 f202 	lsl.w	r2, r0, r2
 8003962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	e000e100 	.word	0xe000e100

08003978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	6039      	str	r1, [r7, #0]
 8003982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003988:	2b00      	cmp	r3, #0
 800398a:	db0a      	blt.n	80039a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	b2da      	uxtb	r2, r3
 8003990:	490c      	ldr	r1, [pc, #48]	@ (80039c4 <__NVIC_SetPriority+0x4c>)
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	0112      	lsls	r2, r2, #4
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	440b      	add	r3, r1
 800399c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a0:	e00a      	b.n	80039b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	4908      	ldr	r1, [pc, #32]	@ (80039c8 <__NVIC_SetPriority+0x50>)
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	3b04      	subs	r3, #4
 80039b0:	0112      	lsls	r2, r2, #4
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	440b      	add	r3, r1
 80039b6:	761a      	strb	r2, [r3, #24]
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000e100 	.word	0xe000e100
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b089      	sub	sp, #36	@ 0x24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f1c3 0307 	rsb	r3, r3, #7
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	bf28      	it	cs
 80039ea:	2304      	movcs	r3, #4
 80039ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3304      	adds	r3, #4
 80039f2:	2b06      	cmp	r3, #6
 80039f4:	d902      	bls.n	80039fc <NVIC_EncodePriority+0x30>
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3b03      	subs	r3, #3
 80039fa:	e000      	b.n	80039fe <NVIC_EncodePriority+0x32>
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a00:	f04f 32ff 	mov.w	r2, #4294967295
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43da      	mvns	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	401a      	ands	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a14:	f04f 31ff 	mov.w	r1, #4294967295
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1e:	43d9      	mvns	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a24:	4313      	orrs	r3, r2
         );
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3724      	adds	r7, #36	@ 0x24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff4c 	bl	80038d8 <__NVIC_SetPriorityGrouping>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a5a:	f7ff ff61 	bl	8003920 <__NVIC_GetPriorityGrouping>
 8003a5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	6978      	ldr	r0, [r7, #20]
 8003a66:	f7ff ffb1 	bl	80039cc <NVIC_EncodePriority>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ff80 	bl	8003978 <__NVIC_SetPriority>
}
 8003a78:	bf00      	nop
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff ff54 	bl	800393c <__NVIC_EnableIRQ>
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	@ 0x24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	e175      	b.n	8003da8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003abc:	2201      	movs	r2, #1
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	f040 8164 	bne.w	8003da2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d005      	beq.n	8003af2 <HAL_GPIO_Init+0x56>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d130      	bne.n	8003b54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	2203      	movs	r2, #3
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b28:	2201      	movs	r2, #1
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 0201 	and.w	r2, r3, #1
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d017      	beq.n	8003b90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d123      	bne.n	8003be4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	08da      	lsrs	r2, r3, #3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3208      	adds	r2, #8
 8003ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	220f      	movs	r2, #15
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	08da      	lsrs	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3208      	adds	r2, #8
 8003bde:	69b9      	ldr	r1, [r7, #24]
 8003be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	2203      	movs	r2, #3
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0203 	and.w	r2, r3, #3
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80be 	beq.w	8003da2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c26:	4b66      	ldr	r3, [pc, #408]	@ (8003dc0 <HAL_GPIO_Init+0x324>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	4a65      	ldr	r2, [pc, #404]	@ (8003dc0 <HAL_GPIO_Init+0x324>)
 8003c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c32:	4b63      	ldr	r3, [pc, #396]	@ (8003dc0 <HAL_GPIO_Init+0x324>)
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c3e:	4a61      	ldr	r2, [pc, #388]	@ (8003dc4 <HAL_GPIO_Init+0x328>)
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	089b      	lsrs	r3, r3, #2
 8003c44:	3302      	adds	r3, #2
 8003c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	220f      	movs	r2, #15
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a58      	ldr	r2, [pc, #352]	@ (8003dc8 <HAL_GPIO_Init+0x32c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d037      	beq.n	8003cda <HAL_GPIO_Init+0x23e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a57      	ldr	r2, [pc, #348]	@ (8003dcc <HAL_GPIO_Init+0x330>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d031      	beq.n	8003cd6 <HAL_GPIO_Init+0x23a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a56      	ldr	r2, [pc, #344]	@ (8003dd0 <HAL_GPIO_Init+0x334>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d02b      	beq.n	8003cd2 <HAL_GPIO_Init+0x236>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a55      	ldr	r2, [pc, #340]	@ (8003dd4 <HAL_GPIO_Init+0x338>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d025      	beq.n	8003cce <HAL_GPIO_Init+0x232>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a54      	ldr	r2, [pc, #336]	@ (8003dd8 <HAL_GPIO_Init+0x33c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01f      	beq.n	8003cca <HAL_GPIO_Init+0x22e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a53      	ldr	r2, [pc, #332]	@ (8003ddc <HAL_GPIO_Init+0x340>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d019      	beq.n	8003cc6 <HAL_GPIO_Init+0x22a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a52      	ldr	r2, [pc, #328]	@ (8003de0 <HAL_GPIO_Init+0x344>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_GPIO_Init+0x226>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a51      	ldr	r2, [pc, #324]	@ (8003de4 <HAL_GPIO_Init+0x348>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00d      	beq.n	8003cbe <HAL_GPIO_Init+0x222>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a50      	ldr	r2, [pc, #320]	@ (8003de8 <HAL_GPIO_Init+0x34c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <HAL_GPIO_Init+0x21e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4f      	ldr	r2, [pc, #316]	@ (8003dec <HAL_GPIO_Init+0x350>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d101      	bne.n	8003cb6 <HAL_GPIO_Init+0x21a>
 8003cb2:	2309      	movs	r3, #9
 8003cb4:	e012      	b.n	8003cdc <HAL_GPIO_Init+0x240>
 8003cb6:	230a      	movs	r3, #10
 8003cb8:	e010      	b.n	8003cdc <HAL_GPIO_Init+0x240>
 8003cba:	2308      	movs	r3, #8
 8003cbc:	e00e      	b.n	8003cdc <HAL_GPIO_Init+0x240>
 8003cbe:	2307      	movs	r3, #7
 8003cc0:	e00c      	b.n	8003cdc <HAL_GPIO_Init+0x240>
 8003cc2:	2306      	movs	r3, #6
 8003cc4:	e00a      	b.n	8003cdc <HAL_GPIO_Init+0x240>
 8003cc6:	2305      	movs	r3, #5
 8003cc8:	e008      	b.n	8003cdc <HAL_GPIO_Init+0x240>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	e006      	b.n	8003cdc <HAL_GPIO_Init+0x240>
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e004      	b.n	8003cdc <HAL_GPIO_Init+0x240>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_Init+0x240>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_GPIO_Init+0x240>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	f002 0203 	and.w	r2, r2, #3
 8003ce2:	0092      	lsls	r2, r2, #2
 8003ce4:	4093      	lsls	r3, r2
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003cec:	4935      	ldr	r1, [pc, #212]	@ (8003dc4 <HAL_GPIO_Init+0x328>)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8003df0 <HAL_GPIO_Init+0x354>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d1e:	4a34      	ldr	r2, [pc, #208]	@ (8003df0 <HAL_GPIO_Init+0x354>)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d24:	4b32      	ldr	r3, [pc, #200]	@ (8003df0 <HAL_GPIO_Init+0x354>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d48:	4a29      	ldr	r2, [pc, #164]	@ (8003df0 <HAL_GPIO_Init+0x354>)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d4e:	4b28      	ldr	r3, [pc, #160]	@ (8003df0 <HAL_GPIO_Init+0x354>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d72:	4a1f      	ldr	r2, [pc, #124]	@ (8003df0 <HAL_GPIO_Init+0x354>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d78:	4b1d      	ldr	r3, [pc, #116]	@ (8003df0 <HAL_GPIO_Init+0x354>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d9c:	4a14      	ldr	r2, [pc, #80]	@ (8003df0 <HAL_GPIO_Init+0x354>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3301      	adds	r3, #1
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	f67f ae86 	bls.w	8003abc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	3724      	adds	r7, #36	@ 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40013800 	.word	0x40013800
 8003dc8:	40020000 	.word	0x40020000
 8003dcc:	40020400 	.word	0x40020400
 8003dd0:	40020800 	.word	0x40020800
 8003dd4:	40020c00 	.word	0x40020c00
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40021400 	.word	0x40021400
 8003de0:	40021800 	.word	0x40021800
 8003de4:	40021c00 	.word	0x40021c00
 8003de8:	40022000 	.word	0x40022000
 8003dec:	40022400 	.word	0x40022400
 8003df0:	40013c00 	.word	0x40013c00

08003df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	887b      	ldrh	r3, [r7, #2]
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
 8003e10:	e001      	b.n	8003e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
 8003e30:	4613      	mov	r3, r2
 8003e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e34:	787b      	ldrb	r3, [r7, #1]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e40:	e003      	b.n	8003e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e42:	887b      	ldrh	r3, [r7, #2]
 8003e44:	041a      	lsls	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	619a      	str	r2, [r3, #24]
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e60:	2300      	movs	r3, #0
 8003e62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e29b      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8087 	beq.w	8003f8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e7c:	4b96      	ldr	r3, [pc, #600]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d00c      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e88:	4b93      	ldr	r3, [pc, #588]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d112      	bne.n	8003eba <HAL_RCC_OscConfig+0x62>
 8003e94:	4b90      	ldr	r3, [pc, #576]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ea0:	d10b      	bne.n	8003eba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea2:	4b8d      	ldr	r3, [pc, #564]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d06c      	beq.n	8003f88 <HAL_RCC_OscConfig+0x130>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d168      	bne.n	8003f88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e275      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x7a>
 8003ec4:	4b84      	ldr	r3, [pc, #528]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a83      	ldr	r2, [pc, #524]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e02e      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x9c>
 8003eda:	4b7f      	ldr	r3, [pc, #508]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7e      	ldr	r2, [pc, #504]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b7c      	ldr	r3, [pc, #496]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7b      	ldr	r2, [pc, #492]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003eec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e01d      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0xc0>
 8003efe:	4b76      	ldr	r3, [pc, #472]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a75      	ldr	r2, [pc, #468]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b73      	ldr	r3, [pc, #460]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a72      	ldr	r2, [pc, #456]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003f18:	4b6f      	ldr	r3, [pc, #444]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	4b6c      	ldr	r3, [pc, #432]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6b      	ldr	r2, [pc, #428]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fe fa16 	bl	8002368 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fe fa12 	bl	8002368 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	@ 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e229      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b61      	ldr	r3, [pc, #388]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0xe8>
 8003f5e:	e014      	b.n	8003f8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe fa02 	bl	8002368 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f68:	f7fe f9fe 	bl	8002368 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	@ 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e215      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7a:	4b57      	ldr	r3, [pc, #348]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x110>
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d069      	beq.n	800406a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f96:	4b50      	ldr	r3, [pc, #320]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa2:	4b4d      	ldr	r3, [pc, #308]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d11c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x190>
 8003fae:	4b4a      	ldr	r3, [pc, #296]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d116      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fba:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x17a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d001      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e1e9      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd2:	4b41      	ldr	r3, [pc, #260]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	493d      	ldr	r1, [pc, #244]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe6:	e040      	b.n	800406a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d023      	beq.n	8004038 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff0:	4b39      	ldr	r3, [pc, #228]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a38      	ldr	r2, [pc, #224]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe f9b4 	bl	8002368 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004004:	f7fe f9b0 	bl	8002368 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e1c7      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004016:	4b30      	ldr	r3, [pc, #192]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4b2d      	ldr	r3, [pc, #180]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4929      	ldr	r1, [pc, #164]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
 8004036:	e018      	b.n	800406a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004038:	4b27      	ldr	r3, [pc, #156]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a26      	ldr	r2, [pc, #152]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fe f990 	bl	8002368 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404c:	f7fe f98c 	bl	8002368 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1a3      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405e:	4b1e      	ldr	r3, [pc, #120]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d038      	beq.n	80040e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d019      	beq.n	80040b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407e:	4b16      	ldr	r3, [pc, #88]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004082:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408a:	f7fe f96d 	bl	8002368 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004092:	f7fe f969 	bl	8002368 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e180      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a4:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 80040a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x23a>
 80040b0:	e01a      	b.n	80040e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b2:	4b09      	ldr	r3, [pc, #36]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 80040b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b6:	4a08      	ldr	r2, [pc, #32]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fe f953 	bl	8002368 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fe f94f 	bl	8002368 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d903      	bls.n	80040dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e166      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
 80040d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040dc:	4b92      	ldr	r3, [pc, #584]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80040de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1ee      	bne.n	80040c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a4 	beq.w	800423e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b8c      	ldr	r3, [pc, #560]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b89      	ldr	r3, [pc, #548]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	4a88      	ldr	r2, [pc, #544]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410c:	6413      	str	r3, [r2, #64]	@ 0x40
 800410e:	4b86      	ldr	r3, [pc, #536]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800411e:	4b83      	ldr	r3, [pc, #524]	@ (800432c <HAL_RCC_OscConfig+0x4d4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800412a:	4b80      	ldr	r3, [pc, #512]	@ (800432c <HAL_RCC_OscConfig+0x4d4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7f      	ldr	r2, [pc, #508]	@ (800432c <HAL_RCC_OscConfig+0x4d4>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fe f917 	bl	8002368 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fe f913 	bl	8002368 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	@ 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e12a      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004150:	4b76      	ldr	r3, [pc, #472]	@ (800432c <HAL_RCC_OscConfig+0x4d4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x31a>
 8004164:	4b70      	ldr	r3, [pc, #448]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004168:	4a6f      	ldr	r2, [pc, #444]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004170:	e02d      	b.n	80041ce <HAL_RCC_OscConfig+0x376>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x33c>
 800417a:	4b6b      	ldr	r3, [pc, #428]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417e:	4a6a      	ldr	r2, [pc, #424]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6713      	str	r3, [r2, #112]	@ 0x70
 8004186:	4b68      	ldr	r3, [pc, #416]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418a:	4a67      	ldr	r2, [pc, #412]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6713      	str	r3, [r2, #112]	@ 0x70
 8004192:	e01c      	b.n	80041ce <HAL_RCC_OscConfig+0x376>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b05      	cmp	r3, #5
 800419a:	d10c      	bne.n	80041b6 <HAL_RCC_OscConfig+0x35e>
 800419c:	4b62      	ldr	r3, [pc, #392]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a0:	4a61      	ldr	r2, [pc, #388]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a8:	4b5f      	ldr	r3, [pc, #380]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80041aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ac:	4a5e      	ldr	r2, [pc, #376]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b4:	e00b      	b.n	80041ce <HAL_RCC_OscConfig+0x376>
 80041b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c2:	4b59      	ldr	r3, [pc, #356]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c6:	4a58      	ldr	r2, [pc, #352]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d015      	beq.n	8004202 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d6:	f7fe f8c7 	bl	8002368 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fe f8c3 	bl	8002368 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0d8      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ee      	beq.n	80041de <HAL_RCC_OscConfig+0x386>
 8004200:	e014      	b.n	800422c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004202:	f7fe f8b1 	bl	8002368 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fe f8ad 	bl	8002368 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e0c2      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004220:	4b41      	ldr	r3, [pc, #260]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ee      	bne.n	800420a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004232:	4b3d      	ldr	r3, [pc, #244]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	4a3c      	ldr	r2, [pc, #240]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80ae 	beq.w	80043a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004248:	4b37      	ldr	r3, [pc, #220]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d06d      	beq.n	8004330 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d14b      	bne.n	80042f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b32      	ldr	r3, [pc, #200]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a31      	ldr	r2, [pc, #196]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe f87e 	bl	8002368 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fe f87a 	bl	8002368 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e091      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	4b29      	ldr	r3, [pc, #164]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	019b      	lsls	r3, r3, #6
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	3b01      	subs	r3, #1
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b8:	071b      	lsls	r3, r3, #28
 80042ba:	491b      	ldr	r1, [pc, #108]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c0:	4b19      	ldr	r3, [pc, #100]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a18      	ldr	r2, [pc, #96]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80042c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fe f84c 	bl	8002368 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d4:	f7fe f848 	bl	8002368 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e05f      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e6:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x47c>
 80042f2:	e057      	b.n	80043a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 80042fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe f832 	bl	8002368 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004308:	f7fe f82e 	bl	8002368 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e045      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	4b03      	ldr	r3, [pc, #12]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x4b0>
 8004326:	e03d      	b.n	80043a4 <HAL_RCC_OscConfig+0x54c>
 8004328:	40023800 	.word	0x40023800
 800432c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004330:	4b1f      	ldr	r3, [pc, #124]	@ (80043b0 <HAL_RCC_OscConfig+0x558>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d030      	beq.n	80043a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d129      	bne.n	80043a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004356:	429a      	cmp	r2, r3
 8004358:	d122      	bne.n	80043a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004360:	4013      	ands	r3, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004366:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004368:	4293      	cmp	r3, r2
 800436a:	d119      	bne.n	80043a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	3b01      	subs	r3, #1
 800437a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d10f      	bne.n	80043a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800438c:	429a      	cmp	r2, r3
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800

080043b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0d0      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d910      	bls.n	80043fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b67      	ldr	r3, [pc, #412]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 020f 	bic.w	r2, r3, #15
 80043e2:	4965      	ldr	r1, [pc, #404]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b63      	ldr	r3, [pc, #396]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0b8      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004414:	4b59      	ldr	r3, [pc, #356]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a58      	ldr	r2, [pc, #352]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 800441a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800441e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800442c:	4b53      	ldr	r3, [pc, #332]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4a52      	ldr	r2, [pc, #328]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004432:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004436:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	4b50      	ldr	r3, [pc, #320]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	494d      	ldr	r1, [pc, #308]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d040      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	4b47      	ldr	r3, [pc, #284]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d115      	bne.n	8004496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e07f      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004476:	4b41      	ldr	r3, [pc, #260]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e073      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004486:	4b3d      	ldr	r3, [pc, #244]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e06b      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004496:	4b39      	ldr	r3, [pc, #228]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4936      	ldr	r1, [pc, #216]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a8:	f7fd ff5e 	bl	8002368 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b0:	f7fd ff5a 	bl	8002368 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e053      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	4b2d      	ldr	r3, [pc, #180]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 020c 	and.w	r2, r3, #12
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1eb      	bne.n	80044b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044d8:	4b27      	ldr	r3, [pc, #156]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d210      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b24      	ldr	r3, [pc, #144]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 020f 	bic.w	r2, r3, #15
 80044ee:	4922      	ldr	r1, [pc, #136]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b20      	ldr	r3, [pc, #128]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e032      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004514:	4b19      	ldr	r3, [pc, #100]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4916      	ldr	r1, [pc, #88]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004532:	4b12      	ldr	r3, [pc, #72]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	490e      	ldr	r1, [pc, #56]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004546:	f000 f821 	bl	800458c <HAL_RCC_GetSysClockFreq>
 800454a:	4602      	mov	r2, r0
 800454c:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	490a      	ldr	r1, [pc, #40]	@ (8004580 <HAL_RCC_ClockConfig+0x1cc>)
 8004558:	5ccb      	ldrb	r3, [r1, r3]
 800455a:	fa22 f303 	lsr.w	r3, r2, r3
 800455e:	4a09      	ldr	r2, [pc, #36]	@ (8004584 <HAL_RCC_ClockConfig+0x1d0>)
 8004560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004562:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <HAL_RCC_ClockConfig+0x1d4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd fbe6 	bl	8001d38 <HAL_InitTick>

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023c00 	.word	0x40023c00
 800457c:	40023800 	.word	0x40023800
 8004580:	0800866c 	.word	0x0800866c
 8004584:	20000014 	.word	0x20000014
 8004588:	20000018 	.word	0x20000018

0800458c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b090      	sub	sp, #64	@ 0x40
 8004592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	637b      	str	r3, [r7, #52]	@ 0x34
 8004598:	2300      	movs	r3, #0
 800459a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800459c:	2300      	movs	r3, #0
 800459e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045a4:	4b59      	ldr	r3, [pc, #356]	@ (800470c <HAL_RCC_GetSysClockFreq+0x180>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d00d      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x40>
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	f200 80a1 	bhi.w	80046f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d003      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045be:	e09b      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c0:	4b53      	ldr	r3, [pc, #332]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x184>)
 80045c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045c4:	e09b      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045c6:	4b53      	ldr	r3, [pc, #332]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x188>)
 80045c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045ca:	e098      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045cc:	4b4f      	ldr	r3, [pc, #316]	@ (800470c <HAL_RCC_GetSysClockFreq+0x180>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045d6:	4b4d      	ldr	r3, [pc, #308]	@ (800470c <HAL_RCC_GetSysClockFreq+0x180>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d028      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e2:	4b4a      	ldr	r3, [pc, #296]	@ (800470c <HAL_RCC_GetSysClockFreq+0x180>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	2200      	movs	r2, #0
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045f4:	2100      	movs	r1, #0
 80045f6:	4b47      	ldr	r3, [pc, #284]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x188>)
 80045f8:	fb03 f201 	mul.w	r2, r3, r1
 80045fc:	2300      	movs	r3, #0
 80045fe:	fb00 f303 	mul.w	r3, r0, r3
 8004602:	4413      	add	r3, r2
 8004604:	4a43      	ldr	r2, [pc, #268]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x188>)
 8004606:	fba0 1202 	umull	r1, r2, r0, r2
 800460a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800460c:	460a      	mov	r2, r1
 800460e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004612:	4413      	add	r3, r2
 8004614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004618:	2200      	movs	r2, #0
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	61fa      	str	r2, [r7, #28]
 800461e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004622:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004626:	f7fb fe0b 	bl	8000240 <__aeabi_uldivmod>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4613      	mov	r3, r2
 8004630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004632:	e053      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004634:	4b35      	ldr	r3, [pc, #212]	@ (800470c <HAL_RCC_GetSysClockFreq+0x180>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	099b      	lsrs	r3, r3, #6
 800463a:	2200      	movs	r2, #0
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	617a      	str	r2, [r7, #20]
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004646:	f04f 0b00 	mov.w	fp, #0
 800464a:	4652      	mov	r2, sl
 800464c:	465b      	mov	r3, fp
 800464e:	f04f 0000 	mov.w	r0, #0
 8004652:	f04f 0100 	mov.w	r1, #0
 8004656:	0159      	lsls	r1, r3, #5
 8004658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800465c:	0150      	lsls	r0, r2, #5
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	ebb2 080a 	subs.w	r8, r2, sl
 8004666:	eb63 090b 	sbc.w	r9, r3, fp
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004676:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800467a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800467e:	ebb2 0408 	subs.w	r4, r2, r8
 8004682:	eb63 0509 	sbc.w	r5, r3, r9
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	00eb      	lsls	r3, r5, #3
 8004690:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004694:	00e2      	lsls	r2, r4, #3
 8004696:	4614      	mov	r4, r2
 8004698:	461d      	mov	r5, r3
 800469a:	eb14 030a 	adds.w	r3, r4, sl
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	eb45 030b 	adc.w	r3, r5, fp
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046b2:	4629      	mov	r1, r5
 80046b4:	028b      	lsls	r3, r1, #10
 80046b6:	4621      	mov	r1, r4
 80046b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046bc:	4621      	mov	r1, r4
 80046be:	028a      	lsls	r2, r1, #10
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c6:	2200      	movs	r2, #0
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	60fa      	str	r2, [r7, #12]
 80046cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d0:	f7fb fdb6 	bl	8000240 <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4613      	mov	r3, r2
 80046da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_RCC_GetSysClockFreq+0x180>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	3301      	adds	r3, #1
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80046ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046f6:	e002      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046f8:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x184>)
 80046fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004700:	4618      	mov	r0, r3
 8004702:	3740      	adds	r7, #64	@ 0x40
 8004704:	46bd      	mov	sp, r7
 8004706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800
 8004710:	00f42400 	.word	0x00f42400
 8004714:	017d7840 	.word	0x017d7840

08004718 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800471c:	4b03      	ldr	r3, [pc, #12]	@ (800472c <HAL_RCC_GetHCLKFreq+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000014 	.word	0x20000014

08004730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004734:	f7ff fff0 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	0a9b      	lsrs	r3, r3, #10
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4903      	ldr	r1, [pc, #12]	@ (8004754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800
 8004754:	0800867c 	.word	0x0800867c

08004758 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	220f      	movs	r2, #15
 8004766:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004768:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <HAL_RCC_GetClockConfig+0x5c>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0203 	and.w	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004780:	4b0c      	ldr	r3, [pc, #48]	@ (80047b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800478c:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <HAL_RCC_GetClockConfig+0x5c>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	08db      	lsrs	r3, r3, #3
 8004792:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800479a:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <HAL_RCC_GetClockConfig+0x60>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 020f 	and.w	r2, r3, #15
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	601a      	str	r2, [r3, #0]
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40023800 	.word	0x40023800
 80047b8:	40023c00 	.word	0x40023c00

080047bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e049      	b.n	8004862 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd fa82 	bl	8001cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f000 fda8 	bl	8005350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	d001      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e054      	b.n	800492e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a26      	ldr	r2, [pc, #152]	@ (800493c <HAL_TIM_Base_Start_IT+0xd0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d022      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ae:	d01d      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a22      	ldr	r2, [pc, #136]	@ (8004940 <HAL_TIM_Base_Start_IT+0xd4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d018      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a21      	ldr	r2, [pc, #132]	@ (8004944 <HAL_TIM_Base_Start_IT+0xd8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d013      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004948 <HAL_TIM_Base_Start_IT+0xdc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00e      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1e      	ldr	r2, [pc, #120]	@ (800494c <HAL_TIM_Base_Start_IT+0xe0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d009      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004950 <HAL_TIM_Base_Start_IT+0xe4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <HAL_TIM_Base_Start_IT+0xe8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d115      	bne.n	8004918 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	4b19      	ldr	r3, [pc, #100]	@ (8004958 <HAL_TIM_Base_Start_IT+0xec>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d015      	beq.n	800492a <HAL_TIM_Base_Start_IT+0xbe>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004904:	d011      	beq.n	800492a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0201 	orr.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004916:	e008      	b.n	800492a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e000      	b.n	800492c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40010000 	.word	0x40010000
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40010400 	.word	0x40010400
 8004950:	40014000 	.word	0x40014000
 8004954:	40001800 	.word	0x40001800
 8004958:	00010007 	.word	0x00010007

0800495c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e049      	b.n	8004a02 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f841 	bl	8004a0a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 fcd8 	bl	8005350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <HAL_TIM_OC_Start_IT+0x28>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	e03c      	b.n	8004ac2 <HAL_TIM_OC_Start_IT+0xa2>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d109      	bne.n	8004a62 <HAL_TIM_OC_Start_IT+0x42>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	bf14      	ite	ne
 8004a5a:	2301      	movne	r3, #1
 8004a5c:	2300      	moveq	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	e02f      	b.n	8004ac2 <HAL_TIM_OC_Start_IT+0xa2>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d109      	bne.n	8004a7c <HAL_TIM_OC_Start_IT+0x5c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	bf14      	ite	ne
 8004a74:	2301      	movne	r3, #1
 8004a76:	2300      	moveq	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	e022      	b.n	8004ac2 <HAL_TIM_OC_Start_IT+0xa2>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d109      	bne.n	8004a96 <HAL_TIM_OC_Start_IT+0x76>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	bf14      	ite	ne
 8004a8e:	2301      	movne	r3, #1
 8004a90:	2300      	moveq	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	e015      	b.n	8004ac2 <HAL_TIM_OC_Start_IT+0xa2>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d109      	bne.n	8004ab0 <HAL_TIM_OC_Start_IT+0x90>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	bf14      	ite	ne
 8004aa8:	2301      	movne	r3, #1
 8004aaa:	2300      	moveq	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	e008      	b.n	8004ac2 <HAL_TIM_OC_Start_IT+0xa2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	bf14      	ite	ne
 8004abc:	2301      	movne	r3, #1
 8004abe:	2300      	moveq	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e0dd      	b.n	8004c86 <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_OC_Start_IT+0xba>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ad8:	e023      	b.n	8004b22 <HAL_TIM_OC_Start_IT+0x102>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_OC_Start_IT+0xca>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ae8:	e01b      	b.n	8004b22 <HAL_TIM_OC_Start_IT+0x102>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_OC_Start_IT+0xda>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004af8:	e013      	b.n	8004b22 <HAL_TIM_OC_Start_IT+0x102>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_OC_Start_IT+0xea>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b08:	e00b      	b.n	8004b22 <HAL_TIM_OC_Start_IT+0x102>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_OC_Start_IT+0xfa>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b18:	e003      	b.n	8004b22 <HAL_TIM_OC_Start_IT+0x102>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b0c      	cmp	r3, #12
 8004b26:	d841      	bhi.n	8004bac <HAL_TIM_OC_Start_IT+0x18c>
 8004b28:	a201      	add	r2, pc, #4	@ (adr r2, 8004b30 <HAL_TIM_OC_Start_IT+0x110>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b65 	.word	0x08004b65
 8004b34:	08004bad 	.word	0x08004bad
 8004b38:	08004bad 	.word	0x08004bad
 8004b3c:	08004bad 	.word	0x08004bad
 8004b40:	08004b77 	.word	0x08004b77
 8004b44:	08004bad 	.word	0x08004bad
 8004b48:	08004bad 	.word	0x08004bad
 8004b4c:	08004bad 	.word	0x08004bad
 8004b50:	08004b89 	.word	0x08004b89
 8004b54:	08004bad 	.word	0x08004bad
 8004b58:	08004bad 	.word	0x08004bad
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	08004b9b 	.word	0x08004b9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0202 	orr.w	r2, r2, #2
 8004b72:	60da      	str	r2, [r3, #12]
      break;
 8004b74:	e01d      	b.n	8004bb2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0204 	orr.w	r2, r2, #4
 8004b84:	60da      	str	r2, [r3, #12]
      break;
 8004b86:	e014      	b.n	8004bb2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0208 	orr.w	r2, r2, #8
 8004b96:	60da      	str	r2, [r3, #12]
      break;
 8004b98:	e00b      	b.n	8004bb2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0210 	orr.w	r2, r2, #16
 8004ba8:	60da      	str	r2, [r3, #12]
      break;
 8004baa:	e002      	b.n	8004bb2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d165      	bne.n	8004c84 <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	6839      	ldr	r1, [r7, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 ff5d 	bl	8005a80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a31      	ldr	r2, [pc, #196]	@ (8004c90 <HAL_TIM_OC_Start_IT+0x270>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <HAL_TIM_OC_Start_IT+0x1ba>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8004c94 <HAL_TIM_OC_Start_IT+0x274>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d101      	bne.n	8004bde <HAL_TIM_OC_Start_IT+0x1be>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_TIM_OC_Start_IT+0x1c0>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bf2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a25      	ldr	r2, [pc, #148]	@ (8004c90 <HAL_TIM_OC_Start_IT+0x270>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d022      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x224>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c06:	d01d      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x224>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a22      	ldr	r2, [pc, #136]	@ (8004c98 <HAL_TIM_OC_Start_IT+0x278>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d018      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x224>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a21      	ldr	r2, [pc, #132]	@ (8004c9c <HAL_TIM_OC_Start_IT+0x27c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x224>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca0 <HAL_TIM_OC_Start_IT+0x280>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00e      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x224>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c94 <HAL_TIM_OC_Start_IT+0x274>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d009      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x224>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca4 <HAL_TIM_OC_Start_IT+0x284>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d004      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x224>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca8 <HAL_TIM_OC_Start_IT+0x288>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d115      	bne.n	8004c70 <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	4b18      	ldr	r3, [pc, #96]	@ (8004cac <HAL_TIM_OC_Start_IT+0x28c>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b06      	cmp	r3, #6
 8004c54:	d015      	beq.n	8004c82 <HAL_TIM_OC_Start_IT+0x262>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c5c:	d011      	beq.n	8004c82 <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6e:	e008      	b.n	8004c82 <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e000      	b.n	8004c84 <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c82:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40001800 	.word	0x40001800
 8004cac:	00010007 	.word	0x00010007

08004cb0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	d841      	bhi.n	8004d48 <HAL_TIM_OC_Stop_IT+0x98>
 8004cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ccc <HAL_TIM_OC_Stop_IT+0x1c>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004d01 	.word	0x08004d01
 8004cd0:	08004d49 	.word	0x08004d49
 8004cd4:	08004d49 	.word	0x08004d49
 8004cd8:	08004d49 	.word	0x08004d49
 8004cdc:	08004d13 	.word	0x08004d13
 8004ce0:	08004d49 	.word	0x08004d49
 8004ce4:	08004d49 	.word	0x08004d49
 8004ce8:	08004d49 	.word	0x08004d49
 8004cec:	08004d25 	.word	0x08004d25
 8004cf0:	08004d49 	.word	0x08004d49
 8004cf4:	08004d49 	.word	0x08004d49
 8004cf8:	08004d49 	.word	0x08004d49
 8004cfc:	08004d37 	.word	0x08004d37
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0202 	bic.w	r2, r2, #2
 8004d0e:	60da      	str	r2, [r3, #12]
      break;
 8004d10:	e01d      	b.n	8004d4e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0204 	bic.w	r2, r2, #4
 8004d20:	60da      	str	r2, [r3, #12]
      break;
 8004d22:	e014      	b.n	8004d4e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0208 	bic.w	r2, r2, #8
 8004d32:	60da      	str	r2, [r3, #12]
      break;
 8004d34:	e00b      	b.n	8004d4e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0210 	bic.w	r2, r2, #16
 8004d44:	60da      	str	r2, [r3, #12]
      break;
 8004d46:	e002      	b.n	8004d4e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d171      	bne.n	8004e38 <HAL_TIM_OC_Stop_IT+0x188>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	6839      	ldr	r1, [r7, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fe8f 	bl	8005a80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a37      	ldr	r2, [pc, #220]	@ (8004e44 <HAL_TIM_OC_Stop_IT+0x194>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <HAL_TIM_OC_Stop_IT+0xc6>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a35      	ldr	r2, [pc, #212]	@ (8004e48 <HAL_TIM_OC_Stop_IT+0x198>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_OC_Stop_IT+0xca>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <HAL_TIM_OC_Stop_IT+0xcc>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d017      	beq.n	8004db0 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a1a      	ldr	r2, [r3, #32]
 8004d86:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10f      	bne.n	8004db0 <HAL_TIM_OC_Stop_IT+0x100>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_OC_Stop_IT+0x100>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6a1a      	ldr	r2, [r3, #32]
 8004db6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10f      	bne.n	8004de0 <HAL_TIM_OC_Stop_IT+0x130>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_OC_Stop_IT+0x130>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <HAL_TIM_OC_Stop_IT+0x140>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dee:	e023      	b.n	8004e38 <HAL_TIM_OC_Stop_IT+0x188>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d104      	bne.n	8004e00 <HAL_TIM_OC_Stop_IT+0x150>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dfe:	e01b      	b.n	8004e38 <HAL_TIM_OC_Stop_IT+0x188>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d104      	bne.n	8004e10 <HAL_TIM_OC_Stop_IT+0x160>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e0e:	e013      	b.n	8004e38 <HAL_TIM_OC_Stop_IT+0x188>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b0c      	cmp	r3, #12
 8004e14:	d104      	bne.n	8004e20 <HAL_TIM_OC_Stop_IT+0x170>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e1e:	e00b      	b.n	8004e38 <HAL_TIM_OC_Stop_IT+0x188>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d104      	bne.n	8004e30 <HAL_TIM_OC_Stop_IT+0x180>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e2e:	e003      	b.n	8004e38 <HAL_TIM_OC_Stop_IT+0x188>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40010000 	.word	0x40010000
 8004e48:	40010400 	.word	0x40010400

08004e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d122      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d11b      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0202 	mvn.w	r2, #2
 8004e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa40 	bl	8005314 <HAL_TIM_IC_CaptureCallback>
 8004e94:	e005      	b.n	8004ea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fb fdfa 	bl	8000a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fa43 	bl	8005328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d122      	bne.n	8004efc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d11b      	bne.n	8004efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0204 	mvn.w	r2, #4
 8004ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fa16 	bl	8005314 <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e005      	b.n	8004ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fb fdd0 	bl	8000a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fa19 	bl	8005328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d122      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d11b      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0208 	mvn.w	r2, #8
 8004f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2204      	movs	r2, #4
 8004f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f9ec 	bl	8005314 <HAL_TIM_IC_CaptureCallback>
 8004f3c:	e005      	b.n	8004f4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fb fda6 	bl	8000a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f9ef 	bl	8005328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2b10      	cmp	r3, #16
 8004f5c:	d122      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d11b      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0210 	mvn.w	r2, #16
 8004f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2208      	movs	r2, #8
 8004f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f9c2 	bl	8005314 <HAL_TIM_IC_CaptureCallback>
 8004f90:	e005      	b.n	8004f9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fb fd7c 	bl	8000a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f9c5 	bl	8005328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d10e      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d107      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0201 	mvn.w	r2, #1
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc fd5c 	bl	8001a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fda:	2b80      	cmp	r3, #128	@ 0x80
 8004fdc:	d10e      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe8:	2b80      	cmp	r3, #128	@ 0x80
 8004fea:	d107      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fe7e 	bl	8005cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800500a:	d10e      	bne.n	800502a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005016:	2b80      	cmp	r3, #128	@ 0x80
 8005018:	d107      	bne.n	800502a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fe71 	bl	8005d0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005034:	2b40      	cmp	r3, #64	@ 0x40
 8005036:	d10e      	bne.n	8005056 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005042:	2b40      	cmp	r3, #64	@ 0x40
 8005044:	d107      	bne.n	8005056 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800504e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f973 	bl	800533c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b20      	cmp	r3, #32
 8005062:	d10e      	bne.n	8005082 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b20      	cmp	r3, #32
 8005070:	d107      	bne.n	8005082 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f06f 0220 	mvn.w	r2, #32
 800507a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fe31 	bl	8005ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005082:	bf00      	nop
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_TIM_OC_ConfigChannel+0x1e>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e066      	b.n	8005178 <HAL_TIM_OC_ConfigChannel+0xec>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b14      	cmp	r3, #20
 80050b6:	d857      	bhi.n	8005168 <HAL_TIM_OC_ConfigChannel+0xdc>
 80050b8:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	08005115 	.word	0x08005115
 80050c4:	08005169 	.word	0x08005169
 80050c8:	08005169 	.word	0x08005169
 80050cc:	08005169 	.word	0x08005169
 80050d0:	08005123 	.word	0x08005123
 80050d4:	08005169 	.word	0x08005169
 80050d8:	08005169 	.word	0x08005169
 80050dc:	08005169 	.word	0x08005169
 80050e0:	08005131 	.word	0x08005131
 80050e4:	08005169 	.word	0x08005169
 80050e8:	08005169 	.word	0x08005169
 80050ec:	08005169 	.word	0x08005169
 80050f0:	0800513f 	.word	0x0800513f
 80050f4:	08005169 	.word	0x08005169
 80050f8:	08005169 	.word	0x08005169
 80050fc:	08005169 	.word	0x08005169
 8005100:	0800514d 	.word	0x0800514d
 8005104:	08005169 	.word	0x08005169
 8005108:	08005169 	.word	0x08005169
 800510c:	08005169 	.word	0x08005169
 8005110:	0800515b 	.word	0x0800515b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f9b8 	bl	8005490 <TIM_OC1_SetConfig>
      break;
 8005120:	e025      	b.n	800516e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fa23 	bl	8005574 <TIM_OC2_SetConfig>
      break;
 800512e:	e01e      	b.n	800516e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fa94 	bl	8005664 <TIM_OC3_SetConfig>
      break;
 800513c:	e017      	b.n	800516e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fb03 	bl	8005750 <TIM_OC4_SetConfig>
      break;
 800514a:	e010      	b.n	800516e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fb54 	bl	8005800 <TIM_OC5_SetConfig>
      break;
 8005158:	e009      	b.n	800516e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fb9f 	bl	80058a4 <TIM_OC6_SetConfig>
      break;
 8005166:	e002      	b.n	800516e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	75fb      	strb	r3, [r7, #23]
      break;
 800516c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_TIM_ConfigClockSource+0x1c>
 8005198:	2302      	movs	r3, #2
 800519a:	e0b4      	b.n	8005306 <HAL_TIM_ConfigClockSource+0x186>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	4b56      	ldr	r3, [pc, #344]	@ (8005310 <HAL_TIM_ConfigClockSource+0x190>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051d4:	d03e      	beq.n	8005254 <HAL_TIM_ConfigClockSource+0xd4>
 80051d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051da:	f200 8087 	bhi.w	80052ec <HAL_TIM_ConfigClockSource+0x16c>
 80051de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e2:	f000 8086 	beq.w	80052f2 <HAL_TIM_ConfigClockSource+0x172>
 80051e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ea:	d87f      	bhi.n	80052ec <HAL_TIM_ConfigClockSource+0x16c>
 80051ec:	2b70      	cmp	r3, #112	@ 0x70
 80051ee:	d01a      	beq.n	8005226 <HAL_TIM_ConfigClockSource+0xa6>
 80051f0:	2b70      	cmp	r3, #112	@ 0x70
 80051f2:	d87b      	bhi.n	80052ec <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b60      	cmp	r3, #96	@ 0x60
 80051f6:	d050      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x11a>
 80051f8:	2b60      	cmp	r3, #96	@ 0x60
 80051fa:	d877      	bhi.n	80052ec <HAL_TIM_ConfigClockSource+0x16c>
 80051fc:	2b50      	cmp	r3, #80	@ 0x50
 80051fe:	d03c      	beq.n	800527a <HAL_TIM_ConfigClockSource+0xfa>
 8005200:	2b50      	cmp	r3, #80	@ 0x50
 8005202:	d873      	bhi.n	80052ec <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b40      	cmp	r3, #64	@ 0x40
 8005206:	d058      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x13a>
 8005208:	2b40      	cmp	r3, #64	@ 0x40
 800520a:	d86f      	bhi.n	80052ec <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b30      	cmp	r3, #48	@ 0x30
 800520e:	d064      	beq.n	80052da <HAL_TIM_ConfigClockSource+0x15a>
 8005210:	2b30      	cmp	r3, #48	@ 0x30
 8005212:	d86b      	bhi.n	80052ec <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b20      	cmp	r3, #32
 8005216:	d060      	beq.n	80052da <HAL_TIM_ConfigClockSource+0x15a>
 8005218:	2b20      	cmp	r3, #32
 800521a:	d867      	bhi.n	80052ec <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d05c      	beq.n	80052da <HAL_TIM_ConfigClockSource+0x15a>
 8005220:	2b10      	cmp	r3, #16
 8005222:	d05a      	beq.n	80052da <HAL_TIM_ConfigClockSource+0x15a>
 8005224:	e062      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005236:	f000 fc03 	bl	8005a40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005248:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	609a      	str	r2, [r3, #8]
      break;
 8005252:	e04f      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005264:	f000 fbec 	bl	8005a40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005276:	609a      	str	r2, [r3, #8]
      break;
 8005278:	e03c      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005286:	461a      	mov	r2, r3
 8005288:	f000 fb60 	bl	800594c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2150      	movs	r1, #80	@ 0x50
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fbb9 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 8005298:	e02c      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052a6:	461a      	mov	r2, r3
 80052a8:	f000 fb7f 	bl	80059aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2160      	movs	r1, #96	@ 0x60
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fba9 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 80052b8:	e01c      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c6:	461a      	mov	r2, r3
 80052c8:	f000 fb40 	bl	800594c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2140      	movs	r1, #64	@ 0x40
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fb99 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 80052d8:	e00c      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4619      	mov	r1, r3
 80052e4:	4610      	mov	r0, r2
 80052e6:	f000 fb90 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 80052ea:	e003      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
      break;
 80052f0:	e000      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	fffeff88 	.word	0xfffeff88

08005314 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a40      	ldr	r2, [pc, #256]	@ (8005464 <TIM_Base_SetConfig+0x114>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d013      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536e:	d00f      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3d      	ldr	r2, [pc, #244]	@ (8005468 <TIM_Base_SetConfig+0x118>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00b      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a3c      	ldr	r2, [pc, #240]	@ (800546c <TIM_Base_SetConfig+0x11c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d007      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3b      	ldr	r2, [pc, #236]	@ (8005470 <TIM_Base_SetConfig+0x120>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a3a      	ldr	r2, [pc, #232]	@ (8005474 <TIM_Base_SetConfig+0x124>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d108      	bne.n	80053a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005464 <TIM_Base_SetConfig+0x114>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d02b      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b0:	d027      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005468 <TIM_Base_SetConfig+0x118>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d023      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2b      	ldr	r2, [pc, #172]	@ (800546c <TIM_Base_SetConfig+0x11c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01f      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005470 <TIM_Base_SetConfig+0x120>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01b      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a29      	ldr	r2, [pc, #164]	@ (8005474 <TIM_Base_SetConfig+0x124>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d017      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a28      	ldr	r2, [pc, #160]	@ (8005478 <TIM_Base_SetConfig+0x128>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a27      	ldr	r2, [pc, #156]	@ (800547c <TIM_Base_SetConfig+0x12c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a26      	ldr	r2, [pc, #152]	@ (8005480 <TIM_Base_SetConfig+0x130>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a25      	ldr	r2, [pc, #148]	@ (8005484 <TIM_Base_SetConfig+0x134>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a24      	ldr	r2, [pc, #144]	@ (8005488 <TIM_Base_SetConfig+0x138>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a23      	ldr	r2, [pc, #140]	@ (800548c <TIM_Base_SetConfig+0x13c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a0a      	ldr	r2, [pc, #40]	@ (8005464 <TIM_Base_SetConfig+0x114>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_Base_SetConfig+0xf8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a0c      	ldr	r2, [pc, #48]	@ (8005474 <TIM_Base_SetConfig+0x124>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d103      	bne.n	8005450 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	615a      	str	r2, [r3, #20]
}
 8005456:	bf00      	nop
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40010000 	.word	0x40010000
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40010400 	.word	0x40010400
 8005478:	40014000 	.word	0x40014000
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800
 8005484:	40001800 	.word	0x40001800
 8005488:	40001c00 	.word	0x40001c00
 800548c:	40002000 	.word	0x40002000

08005490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0201 	bic.w	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005568 <TIM_OC1_SetConfig+0xd8>)
 80054bc:	4013      	ands	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f023 0302 	bic.w	r3, r3, #2
 80054d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a21      	ldr	r2, [pc, #132]	@ (800556c <TIM_OC1_SetConfig+0xdc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC1_SetConfig+0x64>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a20      	ldr	r2, [pc, #128]	@ (8005570 <TIM_OC1_SetConfig+0xe0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d10c      	bne.n	800550e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f023 0308 	bic.w	r3, r3, #8
 80054fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f023 0304 	bic.w	r3, r3, #4
 800550c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a16      	ldr	r2, [pc, #88]	@ (800556c <TIM_OC1_SetConfig+0xdc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_OC1_SetConfig+0x8e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a15      	ldr	r2, [pc, #84]	@ (8005570 <TIM_OC1_SetConfig+0xe0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d111      	bne.n	8005542 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800552c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	621a      	str	r2, [r3, #32]
}
 800555c:	bf00      	nop
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	fffeff8f 	.word	0xfffeff8f
 800556c:	40010000 	.word	0x40010000
 8005570:	40010400 	.word	0x40010400

08005574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0210 	bic.w	r2, r3, #16
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4b2e      	ldr	r3, [pc, #184]	@ (8005658 <TIM_OC2_SetConfig+0xe4>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0320 	bic.w	r3, r3, #32
 80055be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a23      	ldr	r2, [pc, #140]	@ (800565c <TIM_OC2_SetConfig+0xe8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_OC2_SetConfig+0x68>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a22      	ldr	r2, [pc, #136]	@ (8005660 <TIM_OC2_SetConfig+0xec>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d10d      	bne.n	80055f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a18      	ldr	r2, [pc, #96]	@ (800565c <TIM_OC2_SetConfig+0xe8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC2_SetConfig+0x94>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a17      	ldr	r2, [pc, #92]	@ (8005660 <TIM_OC2_SetConfig+0xec>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d113      	bne.n	8005630 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800560e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	feff8fff 	.word	0xfeff8fff
 800565c:	40010000 	.word	0x40010000
 8005660:	40010400 	.word	0x40010400

08005664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4b2d      	ldr	r3, [pc, #180]	@ (8005744 <TIM_OC3_SetConfig+0xe0>)
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0303 	bic.w	r3, r3, #3
 800569a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a22      	ldr	r2, [pc, #136]	@ (8005748 <TIM_OC3_SetConfig+0xe4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <TIM_OC3_SetConfig+0x66>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a21      	ldr	r2, [pc, #132]	@ (800574c <TIM_OC3_SetConfig+0xe8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d10d      	bne.n	80056e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a17      	ldr	r2, [pc, #92]	@ (8005748 <TIM_OC3_SetConfig+0xe4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_OC3_SetConfig+0x92>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a16      	ldr	r2, [pc, #88]	@ (800574c <TIM_OC3_SetConfig+0xe8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d113      	bne.n	800571e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	621a      	str	r2, [r3, #32]
}
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	fffeff8f 	.word	0xfffeff8f
 8005748:	40010000 	.word	0x40010000
 800574c:	40010400 	.word	0x40010400

08005750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4b1e      	ldr	r3, [pc, #120]	@ (80057f4 <TIM_OC4_SetConfig+0xa4>)
 800577c:	4013      	ands	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800579a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a13      	ldr	r2, [pc, #76]	@ (80057f8 <TIM_OC4_SetConfig+0xa8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC4_SetConfig+0x68>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a12      	ldr	r2, [pc, #72]	@ (80057fc <TIM_OC4_SetConfig+0xac>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d109      	bne.n	80057cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	019b      	lsls	r3, r3, #6
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	feff8fff 	.word	0xfeff8fff
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40010400 	.word	0x40010400

08005800 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4b1b      	ldr	r3, [pc, #108]	@ (8005898 <TIM_OC5_SetConfig+0x98>)
 800582c:	4013      	ands	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005840:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	041b      	lsls	r3, r3, #16
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a12      	ldr	r2, [pc, #72]	@ (800589c <TIM_OC5_SetConfig+0x9c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d003      	beq.n	800585e <TIM_OC5_SetConfig+0x5e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a11      	ldr	r2, [pc, #68]	@ (80058a0 <TIM_OC5_SetConfig+0xa0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d109      	bne.n	8005872 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005864:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	621a      	str	r2, [r3, #32]
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	fffeff8f 	.word	0xfffeff8f
 800589c:	40010000 	.word	0x40010000
 80058a0:	40010400 	.word	0x40010400

080058a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005940 <TIM_OC6_SetConfig+0x9c>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	051b      	lsls	r3, r3, #20
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a13      	ldr	r2, [pc, #76]	@ (8005944 <TIM_OC6_SetConfig+0xa0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC6_SetConfig+0x60>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a12      	ldr	r2, [pc, #72]	@ (8005948 <TIM_OC6_SetConfig+0xa4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d109      	bne.n	8005918 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800590a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	029b      	lsls	r3, r3, #10
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	feff8fff 	.word	0xfeff8fff
 8005944:	40010000 	.word	0x40010000
 8005948:	40010400 	.word	0x40010400

0800594c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f023 0201 	bic.w	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f023 030a 	bic.w	r3, r3, #10
 8005988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	621a      	str	r2, [r3, #32]
}
 800599e:	bf00      	nop
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b087      	sub	sp, #28
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f023 0210 	bic.w	r2, r3, #16
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	031b      	lsls	r3, r3, #12
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f043 0307 	orr.w	r3, r3, #7
 8005a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	609a      	str	r2, [r3, #8]
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	021a      	lsls	r2, r3, #8
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	609a      	str	r2, [r3, #8]
}
 8005a74:	bf00      	nop
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f003 031f 	and.w	r3, r3, #31
 8005a92:	2201      	movs	r2, #1
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a1a      	ldr	r2, [r3, #32]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	401a      	ands	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a1a      	ldr	r2, [r3, #32]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
	...

08005acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e06d      	b.n	8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a30      	ldr	r2, [pc, #192]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a2f      	ldr	r2, [pc, #188]	@ (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d108      	bne.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a20      	ldr	r2, [pc, #128]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d022      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b56:	d01d      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1a      	ldr	r2, [pc, #104]	@ (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a15      	ldr	r2, [pc, #84]	@ (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d009      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a16      	ldr	r2, [pc, #88]	@ (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a15      	ldr	r2, [pc, #84]	@ (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10c      	bne.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	40000c00 	.word	0x40000c00
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40001800 	.word	0x40001800

08005be8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e065      	b.n	8005cd0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	041b      	lsls	r3, r3, #16
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ce0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d115      	bne.n	8005cbe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	051b      	lsls	r3, r3, #20
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40010400 	.word	0x40010400

08005ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f103 0208 	add.w	r2, r3, #8
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f04f 32ff 	mov.w	r2, #4294967295
 8005d38:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f103 0208 	add.w	r2, r3, #8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f103 0208 	add.w	r2, r3, #8
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d103      	bne.n	8005d9a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e00c      	b.n	8005db4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e002      	b.n	8005da8 <vListInsert+0x2e>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d2f6      	bcs.n	8005da2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	601a      	str	r2, [r3, #0]
}
 8005de0:	bf00      	nop
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6892      	ldr	r2, [r2, #8]
 8005e02:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6852      	ldr	r2, [r2, #4]
 8005e0c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d103      	bne.n	8005e20 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	1e5a      	subs	r2, r3, #1
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10d      	bne.n	8005e74 <xQueueGenericReset+0x34>
        __asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5c:	b672      	cpsid	i
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	b662      	cpsie	i
 8005e6c:	60fb      	str	r3, [r7, #12]
    }
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	e7fd      	b.n	8005e70 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d05d      	beq.n	8005f36 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d059      	beq.n	8005f36 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d000      	beq.n	8005e96 <xQueueGenericReset+0x56>
 8005e94:	2101      	movs	r1, #1
 8005e96:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d14c      	bne.n	8005f36 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8005e9c:	f002 f850 	bl	8007f40 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea8:	6939      	ldr	r1, [r7, #16]
 8005eaa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	441a      	add	r2, r3
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	6939      	ldr	r1, [r7, #16]
 8005ed0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ed2:	fb01 f303 	mul.w	r3, r1, r3
 8005ed6:	441a      	add	r2, r3
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	22ff      	movs	r2, #255	@ 0xff
 8005ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	22ff      	movs	r2, #255	@ 0xff
 8005ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d114      	bne.n	8005f1c <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01a      	beq.n	8005f30 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	3310      	adds	r3, #16
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 f91c 	bl	800713c <xTaskRemoveFromEventList>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d012      	beq.n	8005f30 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005f0a:	4b17      	ldr	r3, [pc, #92]	@ (8005f68 <xQueueGenericReset+0x128>)
 8005f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	e009      	b.n	8005f30 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	3310      	adds	r3, #16
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fefd 	bl	8005d20 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	3324      	adds	r3, #36	@ 0x24
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fef8 	bl	8005d20 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005f30:	f002 f83c 	bl	8007fac <vPortExitCritical>
 8005f34:	e001      	b.n	8005f3a <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10d      	bne.n	8005f5c <xQueueGenericReset+0x11c>
        __asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f44:	b672      	cpsid	i
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	b662      	cpsie	i
 8005f54:	60bb      	str	r3, [r7, #8]
    }
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	e7fd      	b.n	8005f58 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005f5c:	697b      	ldr	r3, [r7, #20]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	@ 0x28
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d02e      	beq.n	8005fe2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005f84:	2100      	movs	r1, #0
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d000      	beq.n	8005f94 <xQueueGenericCreate+0x28>
 8005f92:	2101      	movs	r1, #1
 8005f94:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d123      	bne.n	8005fe2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005fa2:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8005fa6:	d81c      	bhi.n	8005fe2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	fb02 f303 	mul.w	r3, r2, r3
 8005fb0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	3348      	adds	r3, #72	@ 0x48
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f002 f8f8 	bl	80081ac <pvPortMalloc>
 8005fbc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01f      	beq.n	8006004 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	3348      	adds	r3, #72	@ 0x48
 8005fcc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fce:	79fa      	ldrb	r2, [r7, #7]
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f817 	bl	800600e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005fe0:	e010      	b.n	8006004 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10d      	bne.n	8006004 <xQueueGenericCreate+0x98>
        __asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	b672      	cpsid	i
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	b662      	cpsie	i
 8005ffc:	613b      	str	r3, [r7, #16]
    }
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
 8006002:	e7fd      	b.n	8006000 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006004:	69fb      	ldr	r3, [r7, #28]
    }
 8006006:	4618      	mov	r0, r3
 8006008:	3720      	adds	r7, #32
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
 800601a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e002      	b.n	8006030 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800603c:	2101      	movs	r1, #1
 800603e:	69b8      	ldr	r0, [r7, #24]
 8006040:	f7ff fefe 	bl	8005e40 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b092      	sub	sp, #72	@ 0x48
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 800605e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10d      	bne.n	8006080 <xQueueGenericSendFromISR+0x34>
        __asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006068:	b672      	cpsid	i
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	b662      	cpsie	i
 8006078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 800607a:	bf00      	nop
 800607c:	bf00      	nop
 800607e:	e7fd      	b.n	800607c <xQueueGenericSendFromISR+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <xQueueGenericSendFromISR+0x42>
 8006086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <xQueueGenericSendFromISR+0x46>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <xQueueGenericSendFromISR+0x48>
 8006092:	2300      	movs	r3, #0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10d      	bne.n	80060b4 <xQueueGenericSendFromISR+0x68>
        __asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609c:	b672      	cpsid	i
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	b662      	cpsie	i
 80060ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	e7fd      	b.n	80060b0 <xQueueGenericSendFromISR+0x64>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d103      	bne.n	80060c2 <xQueueGenericSendFromISR+0x76>
 80060ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <xQueueGenericSendFromISR+0x7a>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <xQueueGenericSendFromISR+0x7c>
 80060c6:	2300      	movs	r3, #0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10d      	bne.n	80060e8 <xQueueGenericSendFromISR+0x9c>
        __asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	b672      	cpsid	i
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	b662      	cpsie	i
 80060e0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80060e2:	bf00      	nop
 80060e4:	bf00      	nop
 80060e6:	e7fd      	b.n	80060e4 <xQueueGenericSendFromISR+0x98>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060e8:	f002 f81a 	bl	8008120 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80060ec:	f3ef 8211 	mrs	r2, BASEPRI
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	b672      	cpsid	i
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	b662      	cpsie	i
 8006104:	623a      	str	r2, [r7, #32]
 8006106:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006108:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800610a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800610c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800610e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006114:	429a      	cmp	r2, r3
 8006116:	d302      	bcc.n	800611e <xQueueGenericSendFromISR+0xd2>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d149      	bne.n	80061b2 <xQueueGenericSendFromISR+0x166>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800611e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006120:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006124:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612c:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006134:	f000 f932 	bl	800639c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006138:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d112      	bne.n	8006168 <xQueueGenericSendFromISR+0x11c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	2b00      	cmp	r3, #0
 8006148:	d030      	beq.n	80061ac <xQueueGenericSendFromISR+0x160>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800614a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800614c:	3324      	adds	r3, #36	@ 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fff4 	bl	800713c <xTaskRemoveFromEventList>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d028      	beq.n	80061ac <xQueueGenericSendFromISR+0x160>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d025      	beq.n	80061ac <xQueueGenericSendFromISR+0x160>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	e021      	b.n	80061ac <xQueueGenericSendFromISR+0x160>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8006168:	f000 fdf4 	bl	8006d54 <uxTaskGetNumberOfTasks>
 800616c:	6338      	str	r0, [r7, #48]	@ 0x30
 800616e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8006172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006174:	429a      	cmp	r2, r3
 8006176:	d919      	bls.n	80061ac <xQueueGenericSendFromISR+0x160>
 8006178:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800617c:	2b7f      	cmp	r3, #127	@ 0x7f
 800617e:	d10d      	bne.n	800619c <xQueueGenericSendFromISR+0x150>
        __asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	b672      	cpsid	i
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	b662      	cpsie	i
 8006194:	61bb      	str	r3, [r7, #24]
    }
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <xQueueGenericSendFromISR+0x14c>
 800619c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80061a0:	3301      	adds	r3, #1
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	b25a      	sxtb	r2, r3
 80061a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80061ac:	2301      	movs	r3, #1
 80061ae:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 80061b0:	e001      	b.n	80061b6 <xQueueGenericSendFromISR+0x16a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061b8:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80061c0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80061c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3748      	adds	r7, #72	@ 0x48
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08c      	sub	sp, #48	@ 0x30
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80061d8:	2300      	movs	r3, #0
 80061da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80061e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10d      	bne.n	8006202 <xQueueReceive+0x36>
        __asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ea:	b672      	cpsid	i
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	b662      	cpsie	i
 80061fa:	623b      	str	r3, [r7, #32]
    }
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	e7fd      	b.n	80061fe <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d103      	bne.n	8006210 <xQueueReceive+0x44>
 8006208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <xQueueReceive+0x48>
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <xQueueReceive+0x4a>
 8006214:	2300      	movs	r3, #0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <xQueueReceive+0x6a>
        __asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	b672      	cpsid	i
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	b662      	cpsie	i
 800622e:	61fb      	str	r3, [r7, #28]
    }
 8006230:	bf00      	nop
 8006232:	bf00      	nop
 8006234:	e7fd      	b.n	8006232 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006236:	f001 f99d 	bl	8007574 <xTaskGetSchedulerState>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d102      	bne.n	8006246 <xQueueReceive+0x7a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <xQueueReceive+0x7e>
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <xQueueReceive+0x80>
 800624a:	2300      	movs	r3, #0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10d      	bne.n	800626c <xQueueReceive+0xa0>
        __asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	b672      	cpsid	i
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	b662      	cpsie	i
 8006264:	61bb      	str	r3, [r7, #24]
    }
 8006266:	bf00      	nop
 8006268:	bf00      	nop
 800626a:	e7fd      	b.n	8006268 <xQueueReceive+0x9c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800626c:	f001 fe68 	bl	8007f40 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01f      	beq.n	80062bc <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006280:	f000 f8f6 	bl	8006470 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	1e5a      	subs	r2, r3, #1
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800628c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00f      	beq.n	80062b4 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006296:	3310      	adds	r3, #16
 8006298:	4618      	mov	r0, r3
 800629a:	f000 ff4f 	bl	800713c <xTaskRemoveFromEventList>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d007      	beq.n	80062b4 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80062a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006398 <xQueueReceive+0x1cc>)
 80062a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80062b4:	f001 fe7a 	bl	8007fac <vPortExitCritical>
                return pdPASS;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e069      	b.n	8006390 <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80062c2:	f001 fe73 	bl	8007fac <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e062      	b.n	8006390 <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 80062ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80062d0:	f107 0310 	add.w	r3, r7, #16
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 f80b 	bl	80072f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80062da:	2301      	movs	r3, #1
 80062dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80062de:	f001 fe65 	bl	8007fac <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80062e2:	f000 fc1b 	bl	8006b1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80062e6:	f001 fe2b 	bl	8007f40 <vPortEnterCritical>
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062f0:	b25b      	sxtb	r3, r3
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d103      	bne.n	8006300 <xQueueReceive+0x134>
 80062f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006306:	b25b      	sxtb	r3, r3
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d103      	bne.n	8006316 <xQueueReceive+0x14a>
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006316:	f001 fe49 	bl	8007fac <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800631a:	1d3a      	adds	r2, r7, #4
 800631c:	f107 0310 	add.w	r3, r7, #16
 8006320:	4611      	mov	r1, r2
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fffa 	bl	800731c <xTaskCheckForTimeOut>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d123      	bne.n	8006376 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800632e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006330:	f000 f916 	bl	8006560 <prvIsQueueEmpty>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d017      	beq.n	800636a <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800633a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633c:	3324      	adds	r3, #36	@ 0x24
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4611      	mov	r1, r2
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fe8a 	bl	800705c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006348:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800634a:	f000 f8b7 	bl	80064bc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800634e:	f000 fbf3 	bl	8006b38 <xTaskResumeAll>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d189      	bne.n	800626c <xQueueReceive+0xa0>
                {
                    portYIELD_WITHIN_API();
 8006358:	4b0f      	ldr	r3, [pc, #60]	@ (8006398 <xQueueReceive+0x1cc>)
 800635a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	e780      	b.n	800626c <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800636a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800636c:	f000 f8a6 	bl	80064bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006370:	f000 fbe2 	bl	8006b38 <xTaskResumeAll>
 8006374:	e77a      	b.n	800626c <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006378:	f000 f8a0 	bl	80064bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800637c:	f000 fbdc 	bl	8006b38 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006382:	f000 f8ed 	bl	8006560 <prvIsQueueEmpty>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	f43f af6f 	beq.w	800626c <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800638e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006390:	4618      	mov	r0, r3
 8006392:	3730      	adds	r7, #48	@ 0x30
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10d      	bne.n	80063d6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d14d      	bne.n	800645e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 f8f2 	bl	80075b0 <xTaskPriorityDisinherit>
 80063cc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	609a      	str	r2, [r3, #8]
 80063d4:	e043      	b.n	800645e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d119      	bne.n	8006410 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6858      	ldr	r0, [r3, #4]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e4:	461a      	mov	r2, r3
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	f002 f8e4 	bl	80085b4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f4:	441a      	add	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	429a      	cmp	r2, r3
 8006404:	d32b      	bcc.n	800645e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	605a      	str	r2, [r3, #4]
 800640e:	e026      	b.n	800645e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68d8      	ldr	r0, [r3, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006418:	461a      	mov	r2, r3
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	f002 f8ca 	bl	80085b4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006428:	425b      	negs	r3, r3
 800642a:	441a      	add	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d207      	bcs.n	800644c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006444:	425b      	negs	r3, r3
 8006446:	441a      	add	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d105      	bne.n	800645e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	3b01      	subs	r3, #1
 800645c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8006466:	697b      	ldr	r3, [r7, #20]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d018      	beq.n	80064b4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648a:	441a      	add	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	d303      	bcc.n	80064a4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68d9      	ldr	r1, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ac:	461a      	mov	r2, r3
 80064ae:	6838      	ldr	r0, [r7, #0]
 80064b0:	f002 f880 	bl	80085b4 <memcpy>
    }
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80064c4:	f001 fd3c 	bl	8007f40 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064ce:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80064d0:	e011      	b.n	80064f6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d012      	beq.n	8006500 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3324      	adds	r3, #36	@ 0x24
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fe2c 	bl	800713c <xTaskRemoveFromEventList>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80064ea:	f000 ff83 	bl	80073f4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80064f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	dce9      	bgt.n	80064d2 <prvUnlockQueue+0x16>
 80064fe:	e000      	b.n	8006502 <prvUnlockQueue+0x46>
                    break;
 8006500:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	22ff      	movs	r2, #255	@ 0xff
 8006506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800650a:	f001 fd4f 	bl	8007fac <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800650e:	f001 fd17 	bl	8007f40 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006518:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800651a:	e011      	b.n	8006540 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d012      	beq.n	800654a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3310      	adds	r3, #16
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fe07 	bl	800713c <xTaskRemoveFromEventList>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006534:	f000 ff5e 	bl	80073f4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006538:	7bbb      	ldrb	r3, [r7, #14]
 800653a:	3b01      	subs	r3, #1
 800653c:	b2db      	uxtb	r3, r3
 800653e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006544:	2b00      	cmp	r3, #0
 8006546:	dce9      	bgt.n	800651c <prvUnlockQueue+0x60>
 8006548:	e000      	b.n	800654c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800654a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	22ff      	movs	r2, #255	@ 0xff
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8006554:	f001 fd2a 	bl	8007fac <vPortExitCritical>
}
 8006558:	bf00      	nop
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006568:	f001 fcea 	bl	8007f40 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006574:	2301      	movs	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e001      	b.n	800657e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800657e:	f001 fd15 	bl	8007fac <vPortExitCritical>

    return xReturn;
 8006582:	68fb      	ldr	r3, [r7, #12]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10d      	bne.n	80065bc <vQueueAddToRegistry+0x30>
        __asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a4:	b672      	cpsid	i
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	b662      	cpsie	i
 80065b4:	60fb      	str	r3, [r7, #12]
    }
 80065b6:	bf00      	nop
 80065b8:	bf00      	nop
 80065ba:	e7fd      	b.n	80065b8 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d024      	beq.n	800660c <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	e01e      	b.n	8006606 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80065c8:	4a18      	ldr	r2, [pc, #96]	@ (800662c <vQueueAddToRegistry+0xa0>)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	4413      	add	r3, r2
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d105      	bne.n	80065e4 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	4a13      	ldr	r2, [pc, #76]	@ (800662c <vQueueAddToRegistry+0xa0>)
 80065de:	4413      	add	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
                    break;
 80065e2:	e013      	b.n	800660c <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <vQueueAddToRegistry+0x74>
 80065ea:	4a10      	ldr	r2, [pc, #64]	@ (800662c <vQueueAddToRegistry+0xa0>)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	4a0c      	ldr	r2, [pc, #48]	@ (800662c <vQueueAddToRegistry+0xa0>)
 80065fc:	4413      	add	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	3301      	adds	r3, #1
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b07      	cmp	r3, #7
 800660a:	d9dd      	bls.n	80065c8 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d005      	beq.n	800661e <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	20000278 	.word	0x20000278

08006630 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006640:	f001 fc7e 	bl	8007f40 <vPortEnterCritical>
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800664a:	b25b      	sxtb	r3, r3
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d103      	bne.n	800665a <vQueueWaitForMessageRestricted+0x2a>
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006660:	b25b      	sxtb	r3, r3
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d103      	bne.n	8006670 <vQueueWaitForMessageRestricted+0x40>
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006670:	f001 fc9c 	bl	8007fac <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	3324      	adds	r3, #36	@ 0x24
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fd11 	bl	80070ac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800668a:	6978      	ldr	r0, [r7, #20]
 800668c:	f7ff ff16 	bl	80064bc <prvUnlockQueue>
    }
 8006690:	bf00      	nop
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	@ 0x30
 800669c:	af04      	add	r7, sp, #16
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	4613      	mov	r3, r2
 80066a6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 fd7d 	bl	80081ac <pvPortMalloc>
 80066b2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d013      	beq.n	80066e2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066ba:	2054      	movs	r0, #84	@ 0x54
 80066bc:	f001 fd76 	bl	80081ac <pvPortMalloc>
 80066c0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80066c8:	2254      	movs	r2, #84	@ 0x54
 80066ca:	2100      	movs	r1, #0
 80066cc:	69f8      	ldr	r0, [r7, #28]
 80066ce:	f001 ff45 	bl	800855c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80066d8:	e005      	b.n	80066e6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80066da:	6978      	ldr	r0, [r7, #20]
 80066dc:	f001 fe26 	bl	800832c <vPortFree>
 80066e0:	e001      	b.n	80066e6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d013      	beq.n	8006714 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066ec:	88fa      	ldrh	r2, [r7, #6]
 80066ee:	2300      	movs	r3, #0
 80066f0:	9303      	str	r3, [sp, #12]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	9302      	str	r3, [sp, #8]
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f80e 	bl	8006724 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006708:	69f8      	ldr	r0, [r7, #28]
 800670a:	f000 f897 	bl	800683c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800670e:	2301      	movs	r3, #1
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	e002      	b.n	800671a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006714:	f04f 33ff 	mov.w	r3, #4294967295
 8006718:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800671a:	69bb      	ldr	r3, [r7, #24]
    }
 800671c:	4618      	mov	r0, r3
 800671e:	3720      	adds	r7, #32
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800673c:	440b      	add	r3, r1
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00d      	beq.n	8006772 <prvInitialiseNewTask+0x4e>
        __asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675a:	b672      	cpsid	i
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	b662      	cpsie	i
 800676a:	617b      	str	r3, [r7, #20]
    }
 800676c:	bf00      	nop
 800676e:	bf00      	nop
 8006770:	e7fd      	b.n	800676e <prvInitialiseNewTask+0x4a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01e      	beq.n	80067b6 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006778:	2300      	movs	r3, #0
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	e012      	b.n	80067a4 <prvInitialiseNewTask+0x80>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	4413      	add	r3, r2
 8006784:	7819      	ldrb	r1, [r3, #0]
 8006786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	3334      	adds	r3, #52	@ 0x34
 800678e:	460a      	mov	r2, r1
 8006790:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d006      	beq.n	80067ac <prvInitialiseNewTask+0x88>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	3301      	adds	r3, #1
 80067a2:	61fb      	str	r3, [r7, #28]
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	2b0f      	cmp	r3, #15
 80067a8:	d9e9      	bls.n	800677e <prvInitialiseNewTask+0x5a>
 80067aa:	e000      	b.n	80067ae <prvInitialiseNewTask+0x8a>
            {
                break;
 80067ac:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80067b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d90d      	bls.n	80067d8 <prvInitialiseNewTask+0xb4>
        __asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c0:	b672      	cpsid	i
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	b662      	cpsie	i
 80067d0:	613b      	str	r3, [r7, #16]
    }
 80067d2:	bf00      	nop
 80067d4:	bf00      	nop
 80067d6:	e7fd      	b.n	80067d4 <prvInitialiseNewTask+0xb0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d901      	bls.n	80067e2 <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067de:	2304      	movs	r3, #4
 80067e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80067e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80067e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f0:	3304      	adds	r3, #4
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fab4 	bl	8005d60 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	3318      	adds	r3, #24
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff faaf 	bl	8005d60 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006806:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	f1c3 0205 	rsb	r2, r3, #5
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006816:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	69b8      	ldr	r0, [r7, #24]
 800681e:	f001 fa81 	bl	8007d24 <pxPortInitialiseStack>
 8006822:	4602      	mov	r2, r0
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800682e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006832:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006834:	bf00      	nop
 8006836:	3720      	adds	r7, #32
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006844:	f001 fb7c 	bl	8007f40 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006848:	4b3e      	ldr	r3, [pc, #248]	@ (8006944 <prvAddNewTaskToReadyList+0x108>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3301      	adds	r3, #1
 800684e:	4a3d      	ldr	r2, [pc, #244]	@ (8006944 <prvAddNewTaskToReadyList+0x108>)
 8006850:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006852:	4b3d      	ldr	r3, [pc, #244]	@ (8006948 <prvAddNewTaskToReadyList+0x10c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800685a:	4a3b      	ldr	r2, [pc, #236]	@ (8006948 <prvAddNewTaskToReadyList+0x10c>)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006860:	4b38      	ldr	r3, [pc, #224]	@ (8006944 <prvAddNewTaskToReadyList+0x108>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d110      	bne.n	800688a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006868:	f000 fdea 	bl	8007440 <prvInitialiseTaskLists>
 800686c:	e00d      	b.n	800688a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800686e:	4b37      	ldr	r3, [pc, #220]	@ (800694c <prvAddNewTaskToReadyList+0x110>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006876:	4b34      	ldr	r3, [pc, #208]	@ (8006948 <prvAddNewTaskToReadyList+0x10c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006880:	429a      	cmp	r2, r3
 8006882:	d802      	bhi.n	800688a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006884:	4a30      	ldr	r2, [pc, #192]	@ (8006948 <prvAddNewTaskToReadyList+0x10c>)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800688a:	4b31      	ldr	r3, [pc, #196]	@ (8006950 <prvAddNewTaskToReadyList+0x114>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3301      	adds	r3, #1
 8006890:	4a2f      	ldr	r2, [pc, #188]	@ (8006950 <prvAddNewTaskToReadyList+0x114>)
 8006892:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	2201      	movs	r2, #1
 800689a:	409a      	lsls	r2, r3
 800689c:	4b2d      	ldr	r3, [pc, #180]	@ (8006954 <prvAddNewTaskToReadyList+0x118>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006954 <prvAddNewTaskToReadyList+0x118>)
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068aa:	492b      	ldr	r1, [pc, #172]	@ (8006958 <prvAddNewTaskToReadyList+0x11c>)
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	3304      	adds	r3, #4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	609a      	str	r2, [r3, #8]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60da      	str	r2, [r3, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	3204      	adds	r2, #4
 80068d2:	605a      	str	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	1d1a      	adds	r2, r3, #4
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	609a      	str	r2, [r3, #8]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006958 <prvAddNewTaskToReadyList+0x11c>)
 80068ea:	441a      	add	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	615a      	str	r2, [r3, #20]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f4:	4918      	ldr	r1, [pc, #96]	@ (8006958 <prvAddNewTaskToReadyList+0x11c>)
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	1c59      	adds	r1, r3, #1
 8006904:	4814      	ldr	r0, [pc, #80]	@ (8006958 <prvAddNewTaskToReadyList+0x11c>)
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4403      	add	r3, r0
 8006910:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006912:	f001 fb4b 	bl	8007fac <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006916:	4b0d      	ldr	r3, [pc, #52]	@ (800694c <prvAddNewTaskToReadyList+0x110>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00e      	beq.n	800693c <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800691e:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <prvAddNewTaskToReadyList+0x10c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006928:	429a      	cmp	r2, r3
 800692a:	d207      	bcs.n	800693c <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800692c:	4b0b      	ldr	r3, [pc, #44]	@ (800695c <prvAddNewTaskToReadyList+0x120>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800693c:	bf00      	nop
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20000390 	.word	0x20000390
 8006948:	200002b8 	.word	0x200002b8
 800694c:	2000039c 	.word	0x2000039c
 8006950:	200003ac 	.word	0x200003ac
 8006954:	20000398 	.word	0x20000398
 8006958:	200002bc 	.word	0x200002bc
 800695c:	e000ed04 	.word	0xe000ed04

08006960 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	@ 0x28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800696a:	2300      	movs	r3, #0
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10d      	bne.n	8006990 <xTaskDelayUntil+0x30>
        __asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006978:	b672      	cpsid	i
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	b662      	cpsie	i
 8006988:	617b      	str	r3, [r7, #20]
    }
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	e7fd      	b.n	800698c <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10d      	bne.n	80069b2 <xTaskDelayUntil+0x52>
        __asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699a:	b672      	cpsid	i
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	b662      	cpsie	i
 80069aa:	613b      	str	r3, [r7, #16]
    }
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	e7fd      	b.n	80069ae <xTaskDelayUntil+0x4e>
        configASSERT( uxSchedulerSuspended == 0 );
 80069b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006a64 <xTaskDelayUntil+0x104>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00d      	beq.n	80069d6 <xTaskDelayUntil+0x76>
        __asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069be:	b672      	cpsid	i
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	b662      	cpsie	i
 80069ce:	60fb      	str	r3, [r7, #12]
    }
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	e7fd      	b.n	80069d2 <xTaskDelayUntil+0x72>

        vTaskSuspendAll();
 80069d6:	f000 f8a1 	bl	8006b1c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80069da:	4b23      	ldr	r3, [pc, #140]	@ (8006a68 <xTaskDelayUntil+0x108>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	4413      	add	r3, r2
 80069e8:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6a3a      	ldr	r2, [r7, #32]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d20b      	bcs.n	8006a0c <xTaskDelayUntil+0xac>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d211      	bcs.n	8006a22 <xTaskDelayUntil+0xc2>
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d90d      	bls.n	8006a22 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 8006a06:	2301      	movs	r3, #1
 8006a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a0a:	e00a      	b.n	8006a22 <xTaskDelayUntil+0xc2>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d303      	bcc.n	8006a1e <xTaskDelayUntil+0xbe>
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d901      	bls.n	8006a22 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d006      	beq.n	8006a3c <xTaskDelayUntil+0xdc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2100      	movs	r1, #0
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fe64 	bl	8007704 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8006a3c:	f000 f87c 	bl	8006b38 <xTaskResumeAll>
 8006a40:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d107      	bne.n	8006a58 <xTaskDelayUntil+0xf8>
        {
            portYIELD_WITHIN_API();
 8006a48:	4b08      	ldr	r3, [pc, #32]	@ (8006a6c <xTaskDelayUntil+0x10c>)
 8006a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3728      	adds	r7, #40	@ 0x28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	200003b8 	.word	0x200003b8
 8006a68:	20000394 	.word	0x20000394
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8006a76:	4b22      	ldr	r3, [pc, #136]	@ (8006b00 <vTaskStartScheduler+0x90>)
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2280      	movs	r2, #128	@ 0x80
 8006a82:	4920      	ldr	r1, [pc, #128]	@ (8006b04 <vTaskStartScheduler+0x94>)
 8006a84:	4820      	ldr	r0, [pc, #128]	@ (8006b08 <vTaskStartScheduler+0x98>)
 8006a86:	f7ff fe07 	bl	8006698 <xTaskCreate>
 8006a8a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d102      	bne.n	8006a98 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8006a92:	f000 feb7 	bl	8007804 <xTimerCreateTimerTask>
 8006a96:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d118      	bne.n	8006ad0 <vTaskStartScheduler+0x60>
        __asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	b672      	cpsid	i
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	b662      	cpsie	i
 8006ab2:	60bb      	str	r3, [r7, #8]
    }
 8006ab4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006ab6:	4b15      	ldr	r3, [pc, #84]	@ (8006b0c <vTaskStartScheduler+0x9c>)
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006abe:	4b14      	ldr	r3, [pc, #80]	@ (8006b10 <vTaskStartScheduler+0xa0>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ac4:	4b13      	ldr	r3, [pc, #76]	@ (8006b14 <vTaskStartScheduler+0xa4>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006aca:	f001 f9bb 	bl	8007e44 <xPortStartScheduler>
 8006ace:	e011      	b.n	8006af4 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d10d      	bne.n	8006af4 <vTaskStartScheduler+0x84>
        __asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	b672      	cpsid	i
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	b662      	cpsie	i
 8006aec:	607b      	str	r3, [r7, #4]
    }
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <vTaskStartScheduler+0x80>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006af4:	4b08      	ldr	r3, [pc, #32]	@ (8006b18 <vTaskStartScheduler+0xa8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	200003b4 	.word	0x200003b4
 8006b04:	08008654 	.word	0x08008654
 8006b08:	0800740d 	.word	0x0800740d
 8006b0c:	200003b0 	.word	0x200003b0
 8006b10:	2000039c 	.word	0x2000039c
 8006b14:	20000394 	.word	0x20000394
 8006b18:	20000020 	.word	0x20000020

08006b1c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006b20:	4b04      	ldr	r3, [pc, #16]	@ (8006b34 <vTaskSuspendAll+0x18>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	4a03      	ldr	r2, [pc, #12]	@ (8006b34 <vTaskSuspendAll+0x18>)
 8006b28:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006b2a:	bf00      	nop
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	200003b8 	.word	0x200003b8

08006b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006b46:	4b72      	ldr	r3, [pc, #456]	@ (8006d10 <xTaskResumeAll+0x1d8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10d      	bne.n	8006b6a <xTaskResumeAll+0x32>
        __asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	b672      	cpsid	i
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	b662      	cpsie	i
 8006b62:	607b      	str	r3, [r7, #4]
    }
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006b6a:	f001 f9e9 	bl	8007f40 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006b6e:	4b68      	ldr	r3, [pc, #416]	@ (8006d10 <xTaskResumeAll+0x1d8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	4a66      	ldr	r2, [pc, #408]	@ (8006d10 <xTaskResumeAll+0x1d8>)
 8006b76:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b78:	4b65      	ldr	r3, [pc, #404]	@ (8006d10 <xTaskResumeAll+0x1d8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f040 80c0 	bne.w	8006d02 <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b82:	4b64      	ldr	r3, [pc, #400]	@ (8006d14 <xTaskResumeAll+0x1dc>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 80bb 	beq.w	8006d02 <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b8c:	e08a      	b.n	8006ca4 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8e:	4b62      	ldr	r3, [pc, #392]	@ (8006d18 <xTaskResumeAll+0x1e0>)
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	6a12      	ldr	r2, [r2, #32]
 8006ba4:	609a      	str	r2, [r3, #8]
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	69d2      	ldr	r2, [r2, #28]
 8006bae:	605a      	str	r2, [r3, #4]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	3318      	adds	r3, #24
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d103      	bne.n	8006bc4 <xTaskResumeAll+0x8c>
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	6a1a      	ldr	r2, [r3, #32]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	605a      	str	r2, [r3, #4]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	1e5a      	subs	r2, r3, #1
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	68d2      	ldr	r2, [r2, #12]
 8006be2:	609a      	str	r2, [r3, #8]
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	69fa      	ldr	r2, [r7, #28]
 8006bea:	6892      	ldr	r2, [r2, #8]
 8006bec:	605a      	str	r2, [r3, #4]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d103      	bne.n	8006c02 <xTaskResumeAll+0xca>
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	605a      	str	r2, [r3, #4]
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	2200      	movs	r2, #0
 8006c06:	615a      	str	r2, [r3, #20]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	1e5a      	subs	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c16:	2201      	movs	r2, #1
 8006c18:	409a      	lsls	r2, r3
 8006c1a:	4b40      	ldr	r3, [pc, #256]	@ (8006d1c <xTaskResumeAll+0x1e4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	4a3e      	ldr	r2, [pc, #248]	@ (8006d1c <xTaskResumeAll+0x1e4>)
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c28:	493d      	ldr	r1, [pc, #244]	@ (8006d20 <xTaskResumeAll+0x1e8>)
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	440b      	add	r3, r1
 8006c34:	3304      	adds	r3, #4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	609a      	str	r2, [r3, #8]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	60da      	str	r2, [r3, #12]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	3204      	adds	r2, #4
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	1d1a      	adds	r2, r3, #4
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	609a      	str	r2, [r3, #8]
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4a2e      	ldr	r2, [pc, #184]	@ (8006d20 <xTaskResumeAll+0x1e8>)
 8006c68:	441a      	add	r2, r3
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	615a      	str	r2, [r3, #20]
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c72:	492b      	ldr	r1, [pc, #172]	@ (8006d20 <xTaskResumeAll+0x1e8>)
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	1c59      	adds	r1, r3, #1
 8006c82:	4827      	ldr	r0, [pc, #156]	@ (8006d20 <xTaskResumeAll+0x1e8>)
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4403      	add	r3, r0
 8006c8e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c94:	4b23      	ldr	r3, [pc, #140]	@ (8006d24 <xTaskResumeAll+0x1ec>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d302      	bcc.n	8006ca4 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8006c9e:	4b22      	ldr	r3, [pc, #136]	@ (8006d28 <xTaskResumeAll+0x1f0>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8006d18 <xTaskResumeAll+0x1e0>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f47f af70 	bne.w	8006b8e <xTaskResumeAll+0x56>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006cb4:	f000 fc42 	bl	800753c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8006d2c <xTaskResumeAll+0x1f4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d010      	beq.n	8006ce6 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006cc4:	f000 f852 	bl	8006d6c <xTaskIncrementTick>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8006cce:	4b16      	ldr	r3, [pc, #88]	@ (8006d28 <xTaskResumeAll+0x1f0>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1f1      	bne.n	8006cc4 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 8006ce0:	4b12      	ldr	r3, [pc, #72]	@ (8006d2c <xTaskResumeAll+0x1f4>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006ce6:	4b10      	ldr	r3, [pc, #64]	@ (8006d28 <xTaskResumeAll+0x1f0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d30 <xTaskResumeAll+0x1f8>)
 8006cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006d02:	f001 f953 	bl	8007fac <vPortExitCritical>

    return xAlreadyYielded;
 8006d06:	69bb      	ldr	r3, [r7, #24]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3720      	adds	r7, #32
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	200003b8 	.word	0x200003b8
 8006d14:	20000390 	.word	0x20000390
 8006d18:	20000350 	.word	0x20000350
 8006d1c:	20000398 	.word	0x20000398
 8006d20:	200002bc 	.word	0x200002bc
 8006d24:	200002b8 	.word	0x200002b8
 8006d28:	200003a4 	.word	0x200003a4
 8006d2c:	200003a0 	.word	0x200003a0
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006d3a:	4b05      	ldr	r3, [pc, #20]	@ (8006d50 <xTaskGetTickCount+0x1c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006d40:	687b      	ldr	r3, [r7, #4]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	20000394 	.word	0x20000394

08006d54 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8006d58:	4b03      	ldr	r3, [pc, #12]	@ (8006d68 <uxTaskGetNumberOfTasks+0x14>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	20000390 	.word	0x20000390

08006d6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	@ 0x28
 8006d70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006d72:	2300      	movs	r3, #0
 8006d74:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d76:	4b7f      	ldr	r3, [pc, #508]	@ (8006f74 <xTaskIncrementTick+0x208>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f040 80ef 	bne.w	8006f5e <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d80:	4b7d      	ldr	r3, [pc, #500]	@ (8006f78 <xTaskIncrementTick+0x20c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006d88:	4a7b      	ldr	r2, [pc, #492]	@ (8006f78 <xTaskIncrementTick+0x20c>)
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d123      	bne.n	8006ddc <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8006d94:	4b79      	ldr	r3, [pc, #484]	@ (8006f7c <xTaskIncrementTick+0x210>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00d      	beq.n	8006dba <xTaskIncrementTick+0x4e>
        __asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da2:	b672      	cpsid	i
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	b662      	cpsie	i
 8006db2:	607b      	str	r3, [r7, #4]
    }
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	e7fd      	b.n	8006db6 <xTaskIncrementTick+0x4a>
 8006dba:	4b70      	ldr	r3, [pc, #448]	@ (8006f7c <xTaskIncrementTick+0x210>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	61fb      	str	r3, [r7, #28]
 8006dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8006f80 <xTaskIncrementTick+0x214>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6d      	ldr	r2, [pc, #436]	@ (8006f7c <xTaskIncrementTick+0x210>)
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	4a6d      	ldr	r2, [pc, #436]	@ (8006f80 <xTaskIncrementTick+0x214>)
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	4b6d      	ldr	r3, [pc, #436]	@ (8006f84 <xTaskIncrementTick+0x218>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8006f84 <xTaskIncrementTick+0x218>)
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	f000 fbb0 	bl	800753c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8006f88 <xTaskIncrementTick+0x21c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6a3a      	ldr	r2, [r7, #32]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	f0c0 80a6 	bcc.w	8006f34 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006de8:	4b64      	ldr	r3, [pc, #400]	@ (8006f7c <xTaskIncrementTick+0x210>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d104      	bne.n	8006dfc <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006df2:	4b65      	ldr	r3, [pc, #404]	@ (8006f88 <xTaskIncrementTick+0x21c>)
 8006df4:	f04f 32ff 	mov.w	r2, #4294967295
 8006df8:	601a      	str	r2, [r3, #0]
                    break;
 8006dfa:	e09b      	b.n	8006f34 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dfc:	4b5f      	ldr	r3, [pc, #380]	@ (8006f7c <xTaskIncrementTick+0x210>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006e0c:	6a3a      	ldr	r2, [r7, #32]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d203      	bcs.n	8006e1c <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006e14:	4a5c      	ldr	r2, [pc, #368]	@ (8006f88 <xTaskIncrementTick+0x21c>)
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006e1a:	e08b      	b.n	8006f34 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	613b      	str	r3, [r7, #16]
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	68d2      	ldr	r2, [r2, #12]
 8006e2a:	609a      	str	r2, [r3, #8]
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	6892      	ldr	r2, [r2, #8]
 8006e34:	605a      	str	r2, [r3, #4]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d103      	bne.n	8006e4a <xTaskIncrementTick+0xde>
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	605a      	str	r2, [r3, #4]
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	615a      	str	r2, [r3, #20]
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	1e5a      	subs	r2, r3, #1
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01e      	beq.n	8006ea0 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	6a12      	ldr	r2, [r2, #32]
 8006e70:	609a      	str	r2, [r3, #8]
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	69d2      	ldr	r2, [r2, #28]
 8006e7a:	605a      	str	r2, [r3, #4]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	3318      	adds	r3, #24
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d103      	bne.n	8006e90 <xTaskIncrementTick+0x124>
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	6a1a      	ldr	r2, [r3, #32]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	605a      	str	r2, [r3, #4]
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2200      	movs	r2, #0
 8006e94:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	1e5a      	subs	r2, r3, #1
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	409a      	lsls	r2, r3
 8006ea8:	4b38      	ldr	r3, [pc, #224]	@ (8006f8c <xTaskIncrementTick+0x220>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	4a37      	ldr	r2, [pc, #220]	@ (8006f8c <xTaskIncrementTick+0x220>)
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb6:	4936      	ldr	r1, [pc, #216]	@ (8006f90 <xTaskIncrementTick+0x224>)
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	609a      	str	r2, [r3, #8]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	60da      	str	r2, [r3, #12]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	3204      	adds	r2, #4
 8006ede:	605a      	str	r2, [r3, #4]
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	1d1a      	adds	r2, r3, #4
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	609a      	str	r2, [r3, #8]
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4a26      	ldr	r2, [pc, #152]	@ (8006f90 <xTaskIncrementTick+0x224>)
 8006ef6:	441a      	add	r2, r3
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	615a      	str	r2, [r3, #20]
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f00:	4923      	ldr	r1, [pc, #140]	@ (8006f90 <xTaskIncrementTick+0x224>)
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	1c59      	adds	r1, r3, #1
 8006f10:	481f      	ldr	r0, [pc, #124]	@ (8006f90 <xTaskIncrementTick+0x224>)
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4403      	add	r3, r0
 8006f1c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f22:	4b1c      	ldr	r3, [pc, #112]	@ (8006f94 <xTaskIncrementTick+0x228>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	f67f af5d 	bls.w	8006de8 <xTaskIncrementTick+0x7c>
                        {
                            xSwitchRequired = pdTRUE;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f32:	e759      	b.n	8006de8 <xTaskIncrementTick+0x7c>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f34:	4b17      	ldr	r3, [pc, #92]	@ (8006f94 <xTaskIncrementTick+0x228>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3a:	4915      	ldr	r1, [pc, #84]	@ (8006f90 <xTaskIncrementTick+0x224>)
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d901      	bls.n	8006f50 <xTaskIncrementTick+0x1e4>
            {
                xSwitchRequired = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006f50:	4b11      	ldr	r3, [pc, #68]	@ (8006f98 <xTaskIncrementTick+0x22c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <xTaskIncrementTick+0x1fc>
            {
                xSwitchRequired = pdTRUE;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f5c:	e004      	b.n	8006f68 <xTaskIncrementTick+0x1fc>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f9c <xTaskIncrementTick+0x230>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	4a0d      	ldr	r2, [pc, #52]	@ (8006f9c <xTaskIncrementTick+0x230>)
 8006f66:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3728      	adds	r7, #40	@ 0x28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	200003b8 	.word	0x200003b8
 8006f78:	20000394 	.word	0x20000394
 8006f7c:	20000348 	.word	0x20000348
 8006f80:	2000034c 	.word	0x2000034c
 8006f84:	200003a8 	.word	0x200003a8
 8006f88:	200003b0 	.word	0x200003b0
 8006f8c:	20000398 	.word	0x20000398
 8006f90:	200002bc 	.word	0x200002bc
 8006f94:	200002b8 	.word	0x200002b8
 8006f98:	200003a4 	.word	0x200003a4
 8006f9c:	200003a0 	.word	0x200003a0

08006fa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fa6:	4b28      	ldr	r3, [pc, #160]	@ (8007048 <vTaskSwitchContext+0xa8>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006fae:	4b27      	ldr	r3, [pc, #156]	@ (800704c <vTaskSwitchContext+0xac>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006fb4:	e042      	b.n	800703c <vTaskSwitchContext+0x9c>
        xYieldPending = pdFALSE;
 8006fb6:	4b25      	ldr	r3, [pc, #148]	@ (800704c <vTaskSwitchContext+0xac>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fbc:	4b24      	ldr	r3, [pc, #144]	@ (8007050 <vTaskSwitchContext+0xb0>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	fab3 f383 	clz	r3, r3
 8006fc8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006fca:	7afb      	ldrb	r3, [r7, #11]
 8006fcc:	f1c3 031f 	rsb	r3, r3, #31
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	4920      	ldr	r1, [pc, #128]	@ (8007054 <vTaskSwitchContext+0xb4>)
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10d      	bne.n	8007002 <vTaskSwitchContext+0x62>
        __asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fea:	b672      	cpsid	i
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	b662      	cpsie	i
 8006ffa:	607b      	str	r3, [r7, #4]
    }
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	e7fd      	b.n	8006ffe <vTaskSwitchContext+0x5e>
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4613      	mov	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4a11      	ldr	r2, [pc, #68]	@ (8007054 <vTaskSwitchContext+0xb4>)
 800700e:	4413      	add	r3, r2
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	605a      	str	r2, [r3, #4]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	3308      	adds	r3, #8
 8007024:	429a      	cmp	r2, r3
 8007026:	d104      	bne.n	8007032 <vTaskSwitchContext+0x92>
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	605a      	str	r2, [r3, #4]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	4a07      	ldr	r2, [pc, #28]	@ (8007058 <vTaskSwitchContext+0xb8>)
 800703a:	6013      	str	r3, [r2, #0]
}
 800703c:	bf00      	nop
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	200003b8 	.word	0x200003b8
 800704c:	200003a4 	.word	0x200003a4
 8007050:	20000398 	.word	0x20000398
 8007054:	200002bc 	.word	0x200002bc
 8007058:	200002b8 	.word	0x200002b8

0800705c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10d      	bne.n	8007088 <vTaskPlaceOnEventList+0x2c>
        __asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007070:	b672      	cpsid	i
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	b662      	cpsie	i
 8007080:	60fb      	str	r3, [r7, #12]
    }
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	e7fd      	b.n	8007084 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007088:	4b07      	ldr	r3, [pc, #28]	@ (80070a8 <vTaskPlaceOnEventList+0x4c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3318      	adds	r3, #24
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7fe fe72 	bl	8005d7a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007096:	2101      	movs	r1, #1
 8007098:	6838      	ldr	r0, [r7, #0]
 800709a:	f000 fb33 	bl	8007704 <prvAddCurrentTaskToDelayedList>
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200002b8 	.word	0x200002b8

080070ac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10d      	bne.n	80070da <vTaskPlaceOnEventListRestricted+0x2e>
        __asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c2:	b672      	cpsid	i
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	b662      	cpsie	i
 80070d2:	613b      	str	r3, [r7, #16]
    }
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	e7fd      	b.n	80070d6 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	4b15      	ldr	r3, [pc, #84]	@ (8007138 <vTaskPlaceOnEventListRestricted+0x8c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	61da      	str	r2, [r3, #28]
 80070e8:	4b13      	ldr	r3, [pc, #76]	@ (8007138 <vTaskPlaceOnEventListRestricted+0x8c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	6892      	ldr	r2, [r2, #8]
 80070f0:	621a      	str	r2, [r3, #32]
 80070f2:	4b11      	ldr	r3, [pc, #68]	@ (8007138 <vTaskPlaceOnEventListRestricted+0x8c>)
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	3218      	adds	r2, #24
 80070fc:	605a      	str	r2, [r3, #4]
 80070fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007138 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f103 0218 	add.w	r2, r3, #24
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	609a      	str	r2, [r3, #8]
 800710a:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <vTaskPlaceOnEventListRestricted+0x8c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	629a      	str	r2, [r3, #40]	@ 0x28
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8007122:	f04f 33ff 	mov.w	r3, #4294967295
 8007126:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	68b8      	ldr	r0, [r7, #8]
 800712c:	f000 faea 	bl	8007704 <prvAddCurrentTaskToDelayedList>
    }
 8007130:	bf00      	nop
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	200002b8 	.word	0x200002b8

0800713c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800713c:	b480      	push	{r7}
 800713e:	b08b      	sub	sp, #44	@ 0x2c
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10d      	bne.n	800716e <xTaskRemoveFromEventList+0x32>
        __asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007156:	b672      	cpsid	i
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	b662      	cpsie	i
 8007166:	60fb      	str	r3, [r7, #12]
    }
 8007168:	bf00      	nop
 800716a:	bf00      	nop
 800716c:	e7fd      	b.n	800716a <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	6a3a      	ldr	r2, [r7, #32]
 800717a:	6a12      	ldr	r2, [r2, #32]
 800717c:	609a      	str	r2, [r3, #8]
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	6a3a      	ldr	r2, [r7, #32]
 8007184:	69d2      	ldr	r2, [r2, #28]
 8007186:	605a      	str	r2, [r3, #4]
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	3318      	adds	r3, #24
 8007190:	429a      	cmp	r2, r3
 8007192:	d103      	bne.n	800719c <xTaskRemoveFromEventList+0x60>
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	6a1a      	ldr	r2, [r3, #32]
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	605a      	str	r2, [r3, #4]
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2200      	movs	r2, #0
 80071a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	1e5a      	subs	r2, r3, #1
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ac:	4b4a      	ldr	r3, [pc, #296]	@ (80072d8 <xTaskRemoveFromEventList+0x19c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d15e      	bne.n	8007272 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	6a3a      	ldr	r2, [r7, #32]
 80071c0:	68d2      	ldr	r2, [r2, #12]
 80071c2:	609a      	str	r2, [r3, #8]
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	6a3a      	ldr	r2, [r7, #32]
 80071ca:	6892      	ldr	r2, [r2, #8]
 80071cc:	605a      	str	r2, [r3, #4]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	3304      	adds	r3, #4
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d103      	bne.n	80071e2 <xTaskRemoveFromEventList+0xa6>
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	605a      	str	r2, [r3, #4]
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	2200      	movs	r2, #0
 80071e6:	615a      	str	r2, [r3, #20]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	1e5a      	subs	r2, r3, #1
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f6:	2201      	movs	r2, #1
 80071f8:	409a      	lsls	r2, r3
 80071fa:	4b38      	ldr	r3, [pc, #224]	@ (80072dc <xTaskRemoveFromEventList+0x1a0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4313      	orrs	r3, r2
 8007200:	4a36      	ldr	r2, [pc, #216]	@ (80072dc <xTaskRemoveFromEventList+0x1a0>)
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007208:	4935      	ldr	r1, [pc, #212]	@ (80072e0 <xTaskRemoveFromEventList+0x1a4>)
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	440b      	add	r3, r1
 8007214:	3304      	adds	r3, #4
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	609a      	str	r2, [r3, #8]
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	60da      	str	r2, [r3, #12]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	6a3a      	ldr	r2, [r7, #32]
 800722e:	3204      	adds	r2, #4
 8007230:	605a      	str	r2, [r3, #4]
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	1d1a      	adds	r2, r3, #4
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	609a      	str	r2, [r3, #8]
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4a26      	ldr	r2, [pc, #152]	@ (80072e0 <xTaskRemoveFromEventList+0x1a4>)
 8007248:	441a      	add	r2, r3
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	615a      	str	r2, [r3, #20]
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007252:	4923      	ldr	r1, [pc, #140]	@ (80072e0 <xTaskRemoveFromEventList+0x1a4>)
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	440b      	add	r3, r1
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	1c59      	adds	r1, r3, #1
 8007262:	481f      	ldr	r0, [pc, #124]	@ (80072e0 <xTaskRemoveFromEventList+0x1a4>)
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4403      	add	r3, r0
 800726e:	6019      	str	r1, [r3, #0]
 8007270:	e01b      	b.n	80072aa <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007272:	4b1c      	ldr	r3, [pc, #112]	@ (80072e4 <xTaskRemoveFromEventList+0x1a8>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	61da      	str	r2, [r3, #28]
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	689a      	ldr	r2, [r3, #8]
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	621a      	str	r2, [r3, #32]
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	6a3a      	ldr	r2, [r7, #32]
 800728c:	3218      	adds	r2, #24
 800728e:	605a      	str	r2, [r3, #4]
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	f103 0218 	add.w	r2, r3, #24
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	609a      	str	r2, [r3, #8]
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	4a11      	ldr	r2, [pc, #68]	@ (80072e4 <xTaskRemoveFromEventList+0x1a8>)
 800729e:	629a      	str	r2, [r3, #40]	@ 0x28
 80072a0:	4b10      	ldr	r3, [pc, #64]	@ (80072e4 <xTaskRemoveFromEventList+0x1a8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	4a0f      	ldr	r2, [pc, #60]	@ (80072e4 <xTaskRemoveFromEventList+0x1a8>)
 80072a8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ae:	4b0e      	ldr	r3, [pc, #56]	@ (80072e8 <xTaskRemoveFromEventList+0x1ac>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d905      	bls.n	80072c4 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80072b8:	2301      	movs	r3, #1
 80072ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80072bc:	4b0b      	ldr	r3, [pc, #44]	@ (80072ec <xTaskRemoveFromEventList+0x1b0>)
 80072be:	2201      	movs	r2, #1
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	e001      	b.n	80072c8 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 80072c4:	2300      	movs	r3, #0
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80072c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	372c      	adds	r7, #44	@ 0x2c
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	200003b8 	.word	0x200003b8
 80072dc:	20000398 	.word	0x20000398
 80072e0:	200002bc 	.word	0x200002bc
 80072e4:	20000350 	.word	0x20000350
 80072e8:	200002b8 	.word	0x200002b8
 80072ec:	200003a4 	.word	0x200003a4

080072f0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072f8:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <vTaskInternalSetTimeOutState+0x24>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007300:	4b05      	ldr	r3, [pc, #20]	@ (8007318 <vTaskInternalSetTimeOutState+0x28>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	605a      	str	r2, [r3, #4]
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	200003a8 	.word	0x200003a8
 8007318:	20000394 	.word	0x20000394

0800731c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b088      	sub	sp, #32
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10d      	bne.n	8007348 <xTaskCheckForTimeOut+0x2c>
        __asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007330:	b672      	cpsid	i
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	b662      	cpsie	i
 8007340:	613b      	str	r3, [r7, #16]
    }
 8007342:	bf00      	nop
 8007344:	bf00      	nop
 8007346:	e7fd      	b.n	8007344 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10d      	bne.n	800736a <xTaskCheckForTimeOut+0x4e>
        __asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007352:	b672      	cpsid	i
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	b662      	cpsie	i
 8007362:	60fb      	str	r3, [r7, #12]
    }
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	e7fd      	b.n	8007366 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 800736a:	f000 fde9 	bl	8007f40 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800736e:	4b1f      	ldr	r3, [pc, #124]	@ (80073ec <xTaskCheckForTimeOut+0xd0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007386:	d102      	bne.n	800738e <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007388:	2300      	movs	r3, #0
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	e026      	b.n	80073dc <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b17      	ldr	r3, [pc, #92]	@ (80073f0 <xTaskCheckForTimeOut+0xd4>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	d00a      	beq.n	80073b0 <xTaskCheckForTimeOut+0x94>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d305      	bcc.n	80073b0 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e015      	b.n	80073dc <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d20b      	bcs.n	80073d2 <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	1ad2      	subs	r2, r2, r3
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7ff ff92 	bl	80072f0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	61fb      	str	r3, [r7, #28]
 80073d0:	e004      	b.n	80073dc <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80073dc:	f000 fde6 	bl	8007fac <vPortExitCritical>

    return xReturn;
 80073e0:	69fb      	ldr	r3, [r7, #28]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3720      	adds	r7, #32
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000394 	.word	0x20000394
 80073f0:	200003a8 	.word	0x200003a8

080073f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80073f8:	4b03      	ldr	r3, [pc, #12]	@ (8007408 <vTaskMissedYield+0x14>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	601a      	str	r2, [r3, #0]
}
 80073fe:	bf00      	nop
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	200003a4 	.word	0x200003a4

0800740c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007414:	f000 f854 	bl	80074c0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007418:	4b07      	ldr	r3, [pc, #28]	@ (8007438 <prvIdleTask+0x2c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d907      	bls.n	8007430 <prvIdleTask+0x24>
            {
                taskYIELD();
 8007420:	4b06      	ldr	r3, [pc, #24]	@ (800743c <prvIdleTask+0x30>)
 8007422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8007430:	f7f9 ff64 	bl	80012fc <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8007434:	e7ee      	b.n	8007414 <prvIdleTask+0x8>
 8007436:	bf00      	nop
 8007438:	200002bc 	.word	0x200002bc
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007446:	2300      	movs	r3, #0
 8007448:	607b      	str	r3, [r7, #4]
 800744a:	e00c      	b.n	8007466 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4a12      	ldr	r2, [pc, #72]	@ (80074a0 <prvInitialiseTaskLists+0x60>)
 8007458:	4413      	add	r3, r2
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fc60 	bl	8005d20 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3301      	adds	r3, #1
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b04      	cmp	r3, #4
 800746a:	d9ef      	bls.n	800744c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800746c:	480d      	ldr	r0, [pc, #52]	@ (80074a4 <prvInitialiseTaskLists+0x64>)
 800746e:	f7fe fc57 	bl	8005d20 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007472:	480d      	ldr	r0, [pc, #52]	@ (80074a8 <prvInitialiseTaskLists+0x68>)
 8007474:	f7fe fc54 	bl	8005d20 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007478:	480c      	ldr	r0, [pc, #48]	@ (80074ac <prvInitialiseTaskLists+0x6c>)
 800747a:	f7fe fc51 	bl	8005d20 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800747e:	480c      	ldr	r0, [pc, #48]	@ (80074b0 <prvInitialiseTaskLists+0x70>)
 8007480:	f7fe fc4e 	bl	8005d20 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8007484:	480b      	ldr	r0, [pc, #44]	@ (80074b4 <prvInitialiseTaskLists+0x74>)
 8007486:	f7fe fc4b 	bl	8005d20 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800748a:	4b0b      	ldr	r3, [pc, #44]	@ (80074b8 <prvInitialiseTaskLists+0x78>)
 800748c:	4a05      	ldr	r2, [pc, #20]	@ (80074a4 <prvInitialiseTaskLists+0x64>)
 800748e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007490:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <prvInitialiseTaskLists+0x7c>)
 8007492:	4a05      	ldr	r2, [pc, #20]	@ (80074a8 <prvInitialiseTaskLists+0x68>)
 8007494:	601a      	str	r2, [r3, #0]
}
 8007496:	bf00      	nop
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	200002bc 	.word	0x200002bc
 80074a4:	20000320 	.word	0x20000320
 80074a8:	20000334 	.word	0x20000334
 80074ac:	20000350 	.word	0x20000350
 80074b0:	20000364 	.word	0x20000364
 80074b4:	2000037c 	.word	0x2000037c
 80074b8:	20000348 	.word	0x20000348
 80074bc:	2000034c 	.word	0x2000034c

080074c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074c6:	e019      	b.n	80074fc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80074c8:	f000 fd3a 	bl	8007f40 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074cc:	4b10      	ldr	r3, [pc, #64]	@ (8007510 <prvCheckTasksWaitingTermination+0x50>)
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe fc87 	bl	8005dec <uxListRemove>
                --uxCurrentNumberOfTasks;
 80074de:	4b0d      	ldr	r3, [pc, #52]	@ (8007514 <prvCheckTasksWaitingTermination+0x54>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	4a0b      	ldr	r2, [pc, #44]	@ (8007514 <prvCheckTasksWaitingTermination+0x54>)
 80074e6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80074e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007518 <prvCheckTasksWaitingTermination+0x58>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007518 <prvCheckTasksWaitingTermination+0x58>)
 80074f0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80074f2:	f000 fd5b 	bl	8007fac <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f810 	bl	800751c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074fc:	4b06      	ldr	r3, [pc, #24]	@ (8007518 <prvCheckTasksWaitingTermination+0x58>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e1      	bne.n	80074c8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000364 	.word	0x20000364
 8007514:	20000390 	.word	0x20000390
 8007518:	20000378 	.word	0x20000378

0800751c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007528:	4618      	mov	r0, r3
 800752a:	f000 feff 	bl	800832c <vPortFree>
            vPortFree( pxTCB );
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fefc 	bl	800832c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007540:	4b0a      	ldr	r3, [pc, #40]	@ (800756c <prvResetNextTaskUnblockTime+0x30>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d104      	bne.n	8007554 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800754a:	4b09      	ldr	r3, [pc, #36]	@ (8007570 <prvResetNextTaskUnblockTime+0x34>)
 800754c:	f04f 32ff 	mov.w	r2, #4294967295
 8007550:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007552:	e005      	b.n	8007560 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007554:	4b05      	ldr	r3, [pc, #20]	@ (800756c <prvResetNextTaskUnblockTime+0x30>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a04      	ldr	r2, [pc, #16]	@ (8007570 <prvResetNextTaskUnblockTime+0x34>)
 800755e:	6013      	str	r3, [r2, #0]
}
 8007560:	bf00      	nop
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	20000348 	.word	0x20000348
 8007570:	200003b0 	.word	0x200003b0

08007574 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800757a:	4b0b      	ldr	r3, [pc, #44]	@ (80075a8 <xTaskGetSchedulerState+0x34>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d102      	bne.n	8007588 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007582:	2301      	movs	r3, #1
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	e008      	b.n	800759a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007588:	4b08      	ldr	r3, [pc, #32]	@ (80075ac <xTaskGetSchedulerState+0x38>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d102      	bne.n	8007596 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007590:	2302      	movs	r3, #2
 8007592:	607b      	str	r3, [r7, #4]
 8007594:	e001      	b.n	800759a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007596:	2300      	movs	r3, #0
 8007598:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800759a:	687b      	ldr	r3, [r7, #4]
    }
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	2000039c 	.word	0x2000039c
 80075ac:	200003b8 	.word	0x200003b8

080075b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80075bc:	2300      	movs	r3, #0
 80075be:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8092 	beq.w	80076ec <xTaskPriorityDisinherit+0x13c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80075c8:	4b4b      	ldr	r3, [pc, #300]	@ (80076f8 <xTaskPriorityDisinherit+0x148>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d00d      	beq.n	80075ee <xTaskPriorityDisinherit+0x3e>
        __asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d6:	b672      	cpsid	i
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	b662      	cpsie	i
 80075e6:	613b      	str	r3, [r7, #16]
    }
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10d      	bne.n	8007612 <xTaskPriorityDisinherit+0x62>
        __asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fa:	b672      	cpsid	i
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	b662      	cpsie	i
 800760a:	60fb      	str	r3, [r7, #12]
    }
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	e7fd      	b.n	800760e <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007616:	1e5a      	subs	r2, r3, #1
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007624:	429a      	cmp	r2, r3
 8007626:	d061      	beq.n	80076ec <xTaskPriorityDisinherit+0x13c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800762c:	2b00      	cmp	r3, #0
 800762e:	d15d      	bne.n	80076ec <xTaskPriorityDisinherit+0x13c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	3304      	adds	r3, #4
 8007634:	4618      	mov	r0, r3
 8007636:	f7fe fbd9 	bl	8005dec <uxListRemove>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007644:	2201      	movs	r2, #1
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	43da      	mvns	r2, r3
 800764c:	4b2b      	ldr	r3, [pc, #172]	@ (80076fc <xTaskPriorityDisinherit+0x14c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4013      	ands	r3, r2
 8007652:	4a2a      	ldr	r2, [pc, #168]	@ (80076fc <xTaskPriorityDisinherit+0x14c>)
 8007654:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007662:	f1c3 0205 	rsb	r2, r3, #5
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766e:	2201      	movs	r2, #1
 8007670:	409a      	lsls	r2, r3
 8007672:	4b22      	ldr	r3, [pc, #136]	@ (80076fc <xTaskPriorityDisinherit+0x14c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4313      	orrs	r3, r2
 8007678:	4a20      	ldr	r2, [pc, #128]	@ (80076fc <xTaskPriorityDisinherit+0x14c>)
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007680:	491f      	ldr	r1, [pc, #124]	@ (8007700 <xTaskPriorityDisinherit+0x150>)
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	440b      	add	r3, r1
 800768c:	3304      	adds	r3, #4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	617b      	str	r3, [r7, #20]
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	609a      	str	r2, [r3, #8]
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	60da      	str	r2, [r3, #12]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	3204      	adds	r2, #4
 80076a8:	605a      	str	r2, [r3, #4]
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	1d1a      	adds	r2, r3, #4
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	609a      	str	r2, [r3, #8]
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4a10      	ldr	r2, [pc, #64]	@ (8007700 <xTaskPriorityDisinherit+0x150>)
 80076c0:	441a      	add	r2, r3
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	615a      	str	r2, [r3, #20]
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ca:	490d      	ldr	r1, [pc, #52]	@ (8007700 <xTaskPriorityDisinherit+0x150>)
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	440b      	add	r3, r1
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	1c59      	adds	r1, r3, #1
 80076da:	4809      	ldr	r0, [pc, #36]	@ (8007700 <xTaskPriorityDisinherit+0x150>)
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4403      	add	r3, r0
 80076e6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80076ec:	69fb      	ldr	r3, [r7, #28]
    }
 80076ee:	4618      	mov	r0, r3
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	200002b8 	.word	0x200002b8
 80076fc:	20000398 	.word	0x20000398
 8007700:	200002bc 	.word	0x200002bc

08007704 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800770e:	4b36      	ldr	r3, [pc, #216]	@ (80077e8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007714:	4b35      	ldr	r3, [pc, #212]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3304      	adds	r3, #4
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe fb66 	bl	8005dec <uxListRemove>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10b      	bne.n	800773e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007726:	4b31      	ldr	r3, [pc, #196]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772c:	2201      	movs	r2, #1
 800772e:	fa02 f303 	lsl.w	r3, r2, r3
 8007732:	43da      	mvns	r2, r3
 8007734:	4b2e      	ldr	r3, [pc, #184]	@ (80077f0 <prvAddCurrentTaskToDelayedList+0xec>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4013      	ands	r3, r2
 800773a:	4a2d      	ldr	r2, [pc, #180]	@ (80077f0 <prvAddCurrentTaskToDelayedList+0xec>)
 800773c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d124      	bne.n	8007790 <prvAddCurrentTaskToDelayedList+0x8c>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d021      	beq.n	8007790 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800774c:	4b29      	ldr	r3, [pc, #164]	@ (80077f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	613b      	str	r3, [r7, #16]
 8007752:	4b26      	ldr	r3, [pc, #152]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	609a      	str	r2, [r3, #8]
 800775a:	4b24      	ldr	r3, [pc, #144]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	6892      	ldr	r2, [r2, #8]
 8007762:	60da      	str	r2, [r3, #12]
 8007764:	4b21      	ldr	r3, [pc, #132]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	3204      	adds	r2, #4
 800776e:	605a      	str	r2, [r3, #4]
 8007770:	4b1e      	ldr	r3, [pc, #120]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	1d1a      	adds	r2, r3, #4
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	609a      	str	r2, [r3, #8]
 800777a:	4b1c      	ldr	r3, [pc, #112]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1d      	ldr	r2, [pc, #116]	@ (80077f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007780:	615a      	str	r2, [r3, #20]
 8007782:	4b1c      	ldr	r3, [pc, #112]	@ (80077f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3301      	adds	r3, #1
 8007788:	4a1a      	ldr	r2, [pc, #104]	@ (80077f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800778e:	e026      	b.n	80077de <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007798:	4b14      	ldr	r3, [pc, #80]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d209      	bcs.n	80077bc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077a8:	4b13      	ldr	r3, [pc, #76]	@ (80077f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	4b0f      	ldr	r3, [pc, #60]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3304      	adds	r3, #4
 80077b2:	4619      	mov	r1, r3
 80077b4:	4610      	mov	r0, r2
 80077b6:	f7fe fae0 	bl	8005d7a <vListInsert>
}
 80077ba:	e010      	b.n	80077de <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077bc:	4b0f      	ldr	r3, [pc, #60]	@ (80077fc <prvAddCurrentTaskToDelayedList+0xf8>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	4b0a      	ldr	r3, [pc, #40]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3304      	adds	r3, #4
 80077c6:	4619      	mov	r1, r3
 80077c8:	4610      	mov	r0, r2
 80077ca:	f7fe fad6 	bl	8005d7a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80077ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007800 <prvAddCurrentTaskToDelayedList+0xfc>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d202      	bcs.n	80077de <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80077d8:	4a09      	ldr	r2, [pc, #36]	@ (8007800 <prvAddCurrentTaskToDelayedList+0xfc>)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6013      	str	r3, [r2, #0]
}
 80077de:	bf00      	nop
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000394 	.word	0x20000394
 80077ec:	200002b8 	.word	0x200002b8
 80077f0:	20000398 	.word	0x20000398
 80077f4:	2000037c 	.word	0x2000037c
 80077f8:	2000034c 	.word	0x2000034c
 80077fc:	20000348 	.word	0x20000348
 8007800:	200003b0 	.word	0x200003b0

08007804 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800780a:	2300      	movs	r3, #0
 800780c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800780e:	f000 fa53 	bl	8007cb8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007812:	4b13      	ldr	r3, [pc, #76]	@ (8007860 <xTimerCreateTimerTask+0x5c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00b      	beq.n	8007832 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800781a:	4b12      	ldr	r3, [pc, #72]	@ (8007864 <xTimerCreateTimerTask+0x60>)
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	2302      	movs	r3, #2
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	2300      	movs	r3, #0
 8007824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007828:	490f      	ldr	r1, [pc, #60]	@ (8007868 <xTimerCreateTimerTask+0x64>)
 800782a:	4810      	ldr	r0, [pc, #64]	@ (800786c <xTimerCreateTimerTask+0x68>)
 800782c:	f7fe ff34 	bl	8006698 <xTaskCreate>
 8007830:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10d      	bne.n	8007854 <xTimerCreateTimerTask+0x50>
        __asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783c:	b672      	cpsid	i
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	b662      	cpsie	i
 800784c:	603b      	str	r3, [r7, #0]
    }
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <xTimerCreateTimerTask+0x4c>
        return xReturn;
 8007854:	687b      	ldr	r3, [r7, #4]
    }
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	200003ec 	.word	0x200003ec
 8007864:	200003f0 	.word	0x200003f0
 8007868:	0800865c 	.word	0x0800865c
 800786c:	08007915 	.word	0x08007915

08007870 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800787c:	e008      	b.n	8007890 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	4413      	add	r3, r2
 8007886:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	699a      	ldr	r2, [r3, #24]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	18d1      	adds	r1, r2, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 f8df 	bl	8007a60 <prvInsertTimerInActiveList>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1ea      	bne.n	800787e <prvReloadTimer+0xe>
        }
    }
 80078a8:	bf00      	nop
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078be:	4b14      	ldr	r3, [pc, #80]	@ (8007910 <prvProcessExpiredTimer+0x5c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3304      	adds	r3, #4
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe fa8d 	bl	8005dec <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d005      	beq.n	80078ec <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7ff ffc3 	bl	8007870 <prvReloadTimer>
 80078ea:	e008      	b.n	80078fe <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078f2:	f023 0301 	bic.w	r3, r3, #1
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	4798      	blx	r3
    }
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	200003e4 	.word	0x200003e4

08007914 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800791c:	f107 0308 	add.w	r3, r7, #8
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f859 	bl	80079d8 <prvGetNextExpireTime>
 8007926:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4619      	mov	r1, r3
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f805 	bl	800793c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007932:	f000 f8d7 	bl	8007ae4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007936:	bf00      	nop
 8007938:	e7f0      	b.n	800791c <prvTimerTask+0x8>
	...

0800793c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007946:	f7ff f8e9 	bl	8006b1c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800794a:	f107 0308 	add.w	r3, r7, #8
 800794e:	4618      	mov	r0, r3
 8007950:	f000 f866 	bl	8007a20 <prvSampleTimeNow>
 8007954:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d130      	bne.n	80079be <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <prvProcessTimerOrBlockTask+0x3c>
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	429a      	cmp	r2, r3
 8007968:	d806      	bhi.n	8007978 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800796a:	f7ff f8e5 	bl	8006b38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff ff9f 	bl	80078b4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007976:	e024      	b.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800797e:	4b13      	ldr	r3, [pc, #76]	@ (80079cc <prvProcessTimerOrBlockTask+0x90>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <prvProcessTimerOrBlockTask+0x50>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <prvProcessTimerOrBlockTask+0x52>
 800798c:	2300      	movs	r3, #0
 800798e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007990:	4b0f      	ldr	r3, [pc, #60]	@ (80079d0 <prvProcessTimerOrBlockTask+0x94>)
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	4619      	mov	r1, r3
 800799e:	f7fe fe47 	bl	8006630 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80079a2:	f7ff f8c9 	bl	8006b38 <xTaskResumeAll>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80079ac:	4b09      	ldr	r3, [pc, #36]	@ (80079d4 <prvProcessTimerOrBlockTask+0x98>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	f3bf 8f6f 	isb	sy
    }
 80079bc:	e001      	b.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80079be:	f7ff f8bb 	bl	8006b38 <xTaskResumeAll>
    }
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200003e8 	.word	0x200003e8
 80079d0:	200003ec 	.word	0x200003ec
 80079d4:	e000ed04 	.word	0xe000ed04

080079d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079e0:	4b0e      	ldr	r3, [pc, #56]	@ (8007a1c <prvGetNextExpireTime+0x44>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <prvGetNextExpireTime+0x16>
 80079ea:	2201      	movs	r2, #1
 80079ec:	e000      	b.n	80079f0 <prvGetNextExpireTime+0x18>
 80079ee:	2200      	movs	r2, #0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d105      	bne.n	8007a08 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079fc:	4b07      	ldr	r3, [pc, #28]	@ (8007a1c <prvGetNextExpireTime+0x44>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	e001      	b.n	8007a0c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
    }
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	200003e4 	.word	0x200003e4

08007a20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007a28:	f7ff f984 	bl	8006d34 <xTaskGetTickCount>
 8007a2c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a5c <prvSampleTimeNow+0x3c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d205      	bcs.n	8007a44 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007a38:	f000 f918 	bl	8007c6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	e002      	b.n	8007a4a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007a4a:	4a04      	ldr	r2, [pc, #16]	@ (8007a5c <prvSampleTimeNow+0x3c>)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007a50:	68fb      	ldr	r3, [r7, #12]
    }
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	200003f4 	.word	0x200003f4

08007a60 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d812      	bhi.n	8007aac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d302      	bcc.n	8007a9a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007a94:	2301      	movs	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	e01b      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a9a:	4b10      	ldr	r3, [pc, #64]	@ (8007adc <prvInsertTimerInActiveList+0x7c>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f7fe f968 	bl	8005d7a <vListInsert>
 8007aaa:	e012      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d206      	bcs.n	8007ac2 <prvInsertTimerInActiveList+0x62>
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d302      	bcc.n	8007ac2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e007      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ac2:	4b07      	ldr	r3, [pc, #28]	@ (8007ae0 <prvInsertTimerInActiveList+0x80>)
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7fe f954 	bl	8005d7a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007ad2:	697b      	ldr	r3, [r7, #20]
    }
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	200003e8 	.word	0x200003e8
 8007ae0:	200003e4 	.word	0x200003e4

08007ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aea:	e0ab      	b.n	8007c44 <prvProcessReceivedCommands+0x160>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f2c0 80a8 	blt.w	8007c44 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d004      	beq.n	8007b0a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe f971 	bl	8005dec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b0a:	1d3b      	adds	r3, r7, #4
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff ff87 	bl	8007a20 <prvSampleTimeNow>
 8007b12:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	f200 8090 	bhi.w	8007c3e <prvProcessReceivedCommands+0x15a>
 8007b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <prvProcessReceivedCommands+0x40>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b49 	.word	0x08007b49
 8007b28:	08007b49 	.word	0x08007b49
 8007b2c:	08007bb1 	.word	0x08007bb1
 8007b30:	08007bc5 	.word	0x08007bc5
 8007b34:	08007c15 	.word	0x08007c15
 8007b38:	08007b49 	.word	0x08007b49
 8007b3c:	08007b49 	.word	0x08007b49
 8007b40:	08007bb1 	.word	0x08007bb1
 8007b44:	08007bc5 	.word	0x08007bc5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	18d1      	adds	r1, r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	69f8      	ldr	r0, [r7, #28]
 8007b68:	f7ff ff7a 	bl	8007a60 <prvInsertTimerInActiveList>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d067      	beq.n	8007c42 <prvProcessReceivedCommands+0x15e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d009      	beq.n	8007b94 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	4413      	add	r3, r2
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	69f8      	ldr	r0, [r7, #28]
 8007b8e:	f7ff fe6f 	bl	8007870 <prvReloadTimer>
 8007b92:	e008      	b.n	8007ba6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b9a:	f023 0301 	bic.w	r3, r3, #1
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	69f8      	ldr	r0, [r7, #28]
 8007bac:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007bae:	e048      	b.n	8007c42 <prvProcessReceivedCommands+0x15e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8007bc2:	e03f      	b.n	8007c44 <prvProcessReceivedCommands+0x160>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10d      	bne.n	8007c00 <prvProcessReceivedCommands+0x11c>
        __asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be8:	b672      	cpsid	i
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	b662      	cpsie	i
 8007bf8:	617b      	str	r3, [r7, #20]
    }
 8007bfa:	bf00      	nop
 8007bfc:	bf00      	nop
 8007bfe:	e7fd      	b.n	8007bfc <prvProcessReceivedCommands+0x118>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	699a      	ldr	r2, [r3, #24]
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	18d1      	adds	r1, r2, r3
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	69f8      	ldr	r0, [r7, #28]
 8007c0e:	f7ff ff27 	bl	8007a60 <prvInsertTimerInActiveList>
                        break;
 8007c12:	e017      	b.n	8007c44 <prvProcessReceivedCommands+0x160>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d103      	bne.n	8007c2a <prvProcessReceivedCommands+0x146>
                            {
                                vPortFree( pxTimer );
 8007c22:	69f8      	ldr	r0, [r7, #28]
 8007c24:	f000 fb82 	bl	800832c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007c28:	e00c      	b.n	8007c44 <prvProcessReceivedCommands+0x160>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8007c3c:	e002      	b.n	8007c44 <prvProcessReceivedCommands+0x160>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007c3e:	bf00      	nop
 8007c40:	e000      	b.n	8007c44 <prvProcessReceivedCommands+0x160>
                        break;
 8007c42:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c44:	4b08      	ldr	r3, [pc, #32]	@ (8007c68 <prvProcessReceivedCommands+0x184>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f107 0108 	add.w	r1, r7, #8
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe fabc 	bl	80061cc <xQueueReceive>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f47f af48 	bne.w	8007aec <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007c5c:	bf00      	nop
 8007c5e:	bf00      	nop
 8007c60:	3720      	adds	r7, #32
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	200003ec 	.word	0x200003ec

08007c6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c72:	e009      	b.n	8007c88 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c74:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb0 <prvSwitchTimerLists+0x44>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8007c82:	6838      	ldr	r0, [r7, #0]
 8007c84:	f7ff fe16 	bl	80078b4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c88:	4b09      	ldr	r3, [pc, #36]	@ (8007cb0 <prvSwitchTimerLists+0x44>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1f0      	bne.n	8007c74 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007c92:	4b07      	ldr	r3, [pc, #28]	@ (8007cb0 <prvSwitchTimerLists+0x44>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007c98:	4b06      	ldr	r3, [pc, #24]	@ (8007cb4 <prvSwitchTimerLists+0x48>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a04      	ldr	r2, [pc, #16]	@ (8007cb0 <prvSwitchTimerLists+0x44>)
 8007c9e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007ca0:	4a04      	ldr	r2, [pc, #16]	@ (8007cb4 <prvSwitchTimerLists+0x48>)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6013      	str	r3, [r2, #0]
    }
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200003e4 	.word	0x200003e4
 8007cb4:	200003e8 	.word	0x200003e8

08007cb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007cbc:	f000 f940 	bl	8007f40 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007cc0:	4b12      	ldr	r3, [pc, #72]	@ (8007d0c <prvCheckForValidListAndQueue+0x54>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d11d      	bne.n	8007d04 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007cc8:	4811      	ldr	r0, [pc, #68]	@ (8007d10 <prvCheckForValidListAndQueue+0x58>)
 8007cca:	f7fe f829 	bl	8005d20 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007cce:	4811      	ldr	r0, [pc, #68]	@ (8007d14 <prvCheckForValidListAndQueue+0x5c>)
 8007cd0:	f7fe f826 	bl	8005d20 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007cd4:	4b10      	ldr	r3, [pc, #64]	@ (8007d18 <prvCheckForValidListAndQueue+0x60>)
 8007cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8007d10 <prvCheckForValidListAndQueue+0x58>)
 8007cd8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007cda:	4b10      	ldr	r3, [pc, #64]	@ (8007d1c <prvCheckForValidListAndQueue+0x64>)
 8007cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8007d14 <prvCheckForValidListAndQueue+0x5c>)
 8007cde:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	210c      	movs	r1, #12
 8007ce4:	200a      	movs	r0, #10
 8007ce6:	f7fe f941 	bl	8005f6c <xQueueGenericCreate>
 8007cea:	4603      	mov	r3, r0
 8007cec:	4a07      	ldr	r2, [pc, #28]	@ (8007d0c <prvCheckForValidListAndQueue+0x54>)
 8007cee:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007cf0:	4b06      	ldr	r3, [pc, #24]	@ (8007d0c <prvCheckForValidListAndQueue+0x54>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007cf8:	4b04      	ldr	r3, [pc, #16]	@ (8007d0c <prvCheckForValidListAndQueue+0x54>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4908      	ldr	r1, [pc, #32]	@ (8007d20 <prvCheckForValidListAndQueue+0x68>)
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fc44 	bl	800658c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007d04:	f000 f952 	bl	8007fac <vPortExitCritical>
    }
 8007d08:	bf00      	nop
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	200003ec 	.word	0x200003ec
 8007d10:	200003bc 	.word	0x200003bc
 8007d14:	200003d0 	.word	0x200003d0
 8007d18:	200003e4 	.word	0x200003e4
 8007d1c:	200003e8 	.word	0x200003e8
 8007d20:	08008664 	.word	0x08008664

08007d24 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3b04      	subs	r3, #4
 8007d34:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d3c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3b04      	subs	r3, #4
 8007d42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f023 0201 	bic.w	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3b04      	subs	r3, #4
 8007d52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007d54:	4a0c      	ldr	r2, [pc, #48]	@ (8007d88 <pxPortInitialiseStack+0x64>)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3b14      	subs	r3, #20
 8007d5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3b04      	subs	r3, #4
 8007d6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f06f 0202 	mvn.w	r2, #2
 8007d72:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3b20      	subs	r3, #32
 8007d78:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	08007d8d 	.word	0x08007d8d

08007d8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007d96:	4b15      	ldr	r3, [pc, #84]	@ (8007dec <prvTaskExitError+0x60>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9e:	d00d      	beq.n	8007dbc <prvTaskExitError+0x30>
        __asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da4:	b672      	cpsid	i
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	b662      	cpsie	i
 8007db4:	60fb      	str	r3, [r7, #12]
    }
 8007db6:	bf00      	nop
 8007db8:	bf00      	nop
 8007dba:	e7fd      	b.n	8007db8 <prvTaskExitError+0x2c>
        __asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc0:	b672      	cpsid	i
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	b662      	cpsie	i
 8007dd0:	60bb      	str	r3, [r7, #8]
    }
 8007dd2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007dd4:	bf00      	nop
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d0fc      	beq.n	8007dd6 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	20000024 	.word	0x20000024

08007df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007df0:	4b07      	ldr	r3, [pc, #28]	@ (8007e10 <pxCurrentTCBConst2>)
 8007df2:	6819      	ldr	r1, [r3, #0]
 8007df4:	6808      	ldr	r0, [r1, #0]
 8007df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfa:	f380 8809 	msr	PSP, r0
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f04f 0000 	mov.w	r0, #0
 8007e06:	f380 8811 	msr	BASEPRI, r0
 8007e0a:	4770      	bx	lr
 8007e0c:	f3af 8000 	nop.w

08007e10 <pxCurrentTCBConst2>:
 8007e10:	200002b8 	.word	0x200002b8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop

08007e18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007e18:	4808      	ldr	r0, [pc, #32]	@ (8007e3c <prvPortStartFirstTask+0x24>)
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	6800      	ldr	r0, [r0, #0]
 8007e1e:	f380 8808 	msr	MSP, r0
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f380 8814 	msr	CONTROL, r0
 8007e2a:	b662      	cpsie	i
 8007e2c:	b661      	cpsie	f
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	df00      	svc	0
 8007e38:	bf00      	nop
 8007e3a:	0000      	.short	0x0000
 8007e3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007e40:	bf00      	nop
 8007e42:	bf00      	nop

08007e44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e4a:	4b37      	ldr	r3, [pc, #220]	@ (8007f28 <xPortStartScheduler+0xe4>)
 8007e4c:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	22ff      	movs	r2, #255	@ 0xff
 8007e5a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f2c <xPortStartScheduler+0xe8>)
 8007e70:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e72:	4b2f      	ldr	r3, [pc, #188]	@ (8007f30 <xPortStartScheduler+0xec>)
 8007e74:	2207      	movs	r2, #7
 8007e76:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e78:	e009      	b.n	8007e8e <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8007e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8007f30 <xPortStartScheduler+0xec>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	4a2b      	ldr	r2, [pc, #172]	@ (8007f30 <xPortStartScheduler+0xec>)
 8007e82:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e96:	2b80      	cmp	r3, #128	@ 0x80
 8007e98:	d0ef      	beq.n	8007e7a <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e9a:	4b25      	ldr	r3, [pc, #148]	@ (8007f30 <xPortStartScheduler+0xec>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f1c3 0307 	rsb	r3, r3, #7
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d00d      	beq.n	8007ec2 <xPortStartScheduler+0x7e>
        __asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eaa:	b672      	cpsid	i
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	b662      	cpsie	i
 8007eba:	60bb      	str	r3, [r7, #8]
    }
 8007ebc:	bf00      	nop
 8007ebe:	bf00      	nop
 8007ec0:	e7fd      	b.n	8007ebe <xPortStartScheduler+0x7a>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f30 <xPortStartScheduler+0xec>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	4a19      	ldr	r2, [pc, #100]	@ (8007f30 <xPortStartScheduler+0xec>)
 8007eca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ecc:	4b18      	ldr	r3, [pc, #96]	@ (8007f30 <xPortStartScheduler+0xec>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ed4:	4a16      	ldr	r2, [pc, #88]	@ (8007f30 <xPortStartScheduler+0xec>)
 8007ed6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007ee0:	4b14      	ldr	r3, [pc, #80]	@ (8007f34 <xPortStartScheduler+0xf0>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a13      	ldr	r2, [pc, #76]	@ (8007f34 <xPortStartScheduler+0xf0>)
 8007ee6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007eea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007eec:	4b11      	ldr	r3, [pc, #68]	@ (8007f34 <xPortStartScheduler+0xf0>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a10      	ldr	r2, [pc, #64]	@ (8007f34 <xPortStartScheduler+0xf0>)
 8007ef2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ef6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007ef8:	f000 f8e2 	bl	80080c0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007efc:	4b0e      	ldr	r3, [pc, #56]	@ (8007f38 <xPortStartScheduler+0xf4>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007f02:	f000 f901 	bl	8008108 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f06:	4b0d      	ldr	r3, [pc, #52]	@ (8007f3c <xPortStartScheduler+0xf8>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f3c <xPortStartScheduler+0xf8>)
 8007f0c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007f10:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007f12:	f7ff ff81 	bl	8007e18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007f16:	f7ff f843 	bl	8006fa0 <vTaskSwitchContext>
    prvTaskExitError();
 8007f1a:	f7ff ff37 	bl	8007d8c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	e000e400 	.word	0xe000e400
 8007f2c:	200003f8 	.word	0x200003f8
 8007f30:	200003fc 	.word	0x200003fc
 8007f34:	e000ed20 	.word	0xe000ed20
 8007f38:	20000024 	.word	0x20000024
 8007f3c:	e000ef34 	.word	0xe000ef34

08007f40 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
        __asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4a:	b672      	cpsid	i
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	b662      	cpsie	i
 8007f5a:	607b      	str	r3, [r7, #4]
    }
 8007f5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007f5e:	4b11      	ldr	r3, [pc, #68]	@ (8007fa4 <vPortEnterCritical+0x64>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3301      	adds	r3, #1
 8007f64:	4a0f      	ldr	r2, [pc, #60]	@ (8007fa4 <vPortEnterCritical+0x64>)
 8007f66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007f68:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa4 <vPortEnterCritical+0x64>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d112      	bne.n	8007f96 <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f70:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa8 <vPortEnterCritical+0x68>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00d      	beq.n	8007f96 <vPortEnterCritical+0x56>
        __asm volatile
 8007f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7e:	b672      	cpsid	i
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	b662      	cpsie	i
 8007f8e:	603b      	str	r3, [r7, #0]
    }
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	e7fd      	b.n	8007f92 <vPortEnterCritical+0x52>
    }
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	20000024 	.word	0x20000024
 8007fa8:	e000ed04 	.word	0xe000ed04

08007fac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007fb2:	4b13      	ldr	r3, [pc, #76]	@ (8008000 <vPortExitCritical+0x54>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10d      	bne.n	8007fd6 <vPortExitCritical+0x2a>
        __asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fbe:	b672      	cpsid	i
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	b662      	cpsie	i
 8007fce:	607b      	str	r3, [r7, #4]
    }
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
 8007fd4:	e7fd      	b.n	8007fd2 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8007fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008000 <vPortExitCritical+0x54>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4a08      	ldr	r2, [pc, #32]	@ (8008000 <vPortExitCritical+0x54>)
 8007fde:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007fe0:	4b07      	ldr	r3, [pc, #28]	@ (8008000 <vPortExitCritical+0x54>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d105      	bne.n	8007ff4 <vPortExitCritical+0x48>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	f383 8811 	msr	BASEPRI, r3
    }
 8007ff2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	20000024 	.word	0x20000024
	...

08008010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008010:	f3ef 8009 	mrs	r0, PSP
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	4b15      	ldr	r3, [pc, #84]	@ (8008070 <pxCurrentTCBConst>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	f01e 0f10 	tst.w	lr, #16
 8008020:	bf08      	it	eq
 8008022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802a:	6010      	str	r0, [r2, #0]
 800802c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008030:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008034:	b672      	cpsid	i
 8008036:	f380 8811 	msr	BASEPRI, r0
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	b662      	cpsie	i
 8008044:	f7fe ffac 	bl	8006fa0 <vTaskSwitchContext>
 8008048:	f04f 0000 	mov.w	r0, #0
 800804c:	f380 8811 	msr	BASEPRI, r0
 8008050:	bc09      	pop	{r0, r3}
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	6808      	ldr	r0, [r1, #0]
 8008056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805a:	f01e 0f10 	tst.w	lr, #16
 800805e:	bf08      	it	eq
 8008060:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008064:	f380 8809 	msr	PSP, r0
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop

08008070 <pxCurrentTCBConst>:
 8008070:	200002b8 	.word	0x200002b8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop

08008078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
        __asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	b672      	cpsid	i
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	b662      	cpsie	i
 8008092:	607b      	str	r3, [r7, #4]
    }
 8008094:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008096:	f7fe fe69 	bl	8006d6c <xTaskIncrementTick>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080a0:	4b06      	ldr	r3, [pc, #24]	@ (80080bc <SysTick_Handler+0x44>)
 80080a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	2300      	movs	r3, #0
 80080aa:	603b      	str	r3, [r7, #0]
        __asm volatile
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	f383 8811 	msr	BASEPRI, r3
    }
 80080b2:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080c4:	4b0b      	ldr	r3, [pc, #44]	@ (80080f4 <vPortSetupTimerInterrupt+0x34>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080ca:	4b0b      	ldr	r3, [pc, #44]	@ (80080f8 <vPortSetupTimerInterrupt+0x38>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080d0:	4b0a      	ldr	r3, [pc, #40]	@ (80080fc <vPortSetupTimerInterrupt+0x3c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a0a      	ldr	r2, [pc, #40]	@ (8008100 <vPortSetupTimerInterrupt+0x40>)
 80080d6:	fba2 2303 	umull	r2, r3, r2, r3
 80080da:	099b      	lsrs	r3, r3, #6
 80080dc:	4a09      	ldr	r2, [pc, #36]	@ (8008104 <vPortSetupTimerInterrupt+0x44>)
 80080de:	3b01      	subs	r3, #1
 80080e0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080e2:	4b04      	ldr	r3, [pc, #16]	@ (80080f4 <vPortSetupTimerInterrupt+0x34>)
 80080e4:	2207      	movs	r2, #7
 80080e6:	601a      	str	r2, [r3, #0]
}
 80080e8:	bf00      	nop
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	e000e010 	.word	0xe000e010
 80080f8:	e000e018 	.word	0xe000e018
 80080fc:	20000014 	.word	0x20000014
 8008100:	10624dd3 	.word	0x10624dd3
 8008104:	e000e014 	.word	0xe000e014

08008108 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008108:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008118 <vPortEnableVFP+0x10>
 800810c:	6801      	ldr	r1, [r0, #0]
 800810e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008112:	6001      	str	r1, [r0, #0]
 8008114:	4770      	bx	lr
 8008116:	0000      	.short	0x0000
 8008118:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop

08008120 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008126:	f3ef 8305 	mrs	r3, IPSR
 800812a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b0f      	cmp	r3, #15
 8008130:	d917      	bls.n	8008162 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008132:	4a1a      	ldr	r2, [pc, #104]	@ (800819c <vPortValidateInterruptPriority+0x7c>)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4413      	add	r3, r2
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800813c:	4b18      	ldr	r3, [pc, #96]	@ (80081a0 <vPortValidateInterruptPriority+0x80>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	7afa      	ldrb	r2, [r7, #11]
 8008142:	429a      	cmp	r2, r3
 8008144:	d20d      	bcs.n	8008162 <vPortValidateInterruptPriority+0x42>
        __asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	b672      	cpsid	i
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	b662      	cpsie	i
 800815a:	607b      	str	r3, [r7, #4]
    }
 800815c:	bf00      	nop
 800815e:	bf00      	nop
 8008160:	e7fd      	b.n	800815e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008162:	4b10      	ldr	r3, [pc, #64]	@ (80081a4 <vPortValidateInterruptPriority+0x84>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800816a:	4b0f      	ldr	r3, [pc, #60]	@ (80081a8 <vPortValidateInterruptPriority+0x88>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	429a      	cmp	r2, r3
 8008170:	d90d      	bls.n	800818e <vPortValidateInterruptPriority+0x6e>
        __asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008176:	b672      	cpsid	i
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	b662      	cpsie	i
 8008186:	603b      	str	r3, [r7, #0]
    }
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	e7fd      	b.n	800818a <vPortValidateInterruptPriority+0x6a>
    }
 800818e:	bf00      	nop
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	e000e3f0 	.word	0xe000e3f0
 80081a0:	200003f8 	.word	0x200003f8
 80081a4:	e000ed0c 	.word	0xe000ed0c
 80081a8:	200003fc 	.word	0x200003fc

080081ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	@ 0x28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80081b8:	f7fe fcb0 	bl	8006b1c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80081bc:	4b56      	ldr	r3, [pc, #344]	@ (8008318 <pvPortMalloc+0x16c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80081c4:	f000 f914 	bl	80083f0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d012      	beq.n	80081f4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80081ce:	2208      	movs	r2, #8
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	3308      	adds	r3, #8
 80081da:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	43db      	mvns	r3, r3
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d804      	bhi.n	80081f0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	4413      	add	r3, r2
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	e001      	b.n	80081f4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	db73      	blt.n	80082e2 <pvPortMalloc+0x136>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d070      	beq.n	80082e2 <pvPortMalloc+0x136>
 8008200:	4b46      	ldr	r3, [pc, #280]	@ (800831c <pvPortMalloc+0x170>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	429a      	cmp	r2, r3
 8008208:	d86b      	bhi.n	80082e2 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800820a:	4b45      	ldr	r3, [pc, #276]	@ (8008320 <pvPortMalloc+0x174>)
 800820c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800820e:	4b44      	ldr	r3, [pc, #272]	@ (8008320 <pvPortMalloc+0x174>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008214:	e004      	b.n	8008220 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008218:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d903      	bls.n	8008232 <pvPortMalloc+0x86>
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1f1      	bne.n	8008216 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008232:	4b39      	ldr	r3, [pc, #228]	@ (8008318 <pvPortMalloc+0x16c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008238:	429a      	cmp	r2, r3
 800823a:	d052      	beq.n	80082e2 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2208      	movs	r2, #8
 8008242:	4413      	add	r3, r2
 8008244:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	1ad2      	subs	r2, r2, r3
 8008256:	2308      	movs	r3, #8
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	429a      	cmp	r2, r3
 800825c:	d922      	bls.n	80082a4 <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800825e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4413      	add	r3, r2
 8008264:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00d      	beq.n	800828c <pvPortMalloc+0xe0>
        __asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008274:	b672      	cpsid	i
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	b662      	cpsie	i
 8008284:	613b      	str	r3, [r7, #16]
    }
 8008286:	bf00      	nop
 8008288:	bf00      	nop
 800828a:	e7fd      	b.n	8008288 <pvPortMalloc+0xdc>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800828c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	1ad2      	subs	r2, r2, r3
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800829e:	6978      	ldr	r0, [r7, #20]
 80082a0:	f000 f902 	bl	80084a8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082a4:	4b1d      	ldr	r3, [pc, #116]	@ (800831c <pvPortMalloc+0x170>)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	4a1b      	ldr	r2, [pc, #108]	@ (800831c <pvPortMalloc+0x170>)
 80082b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082b2:	4b1a      	ldr	r3, [pc, #104]	@ (800831c <pvPortMalloc+0x170>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008324 <pvPortMalloc+0x178>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d203      	bcs.n	80082c6 <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082be:	4b17      	ldr	r3, [pc, #92]	@ (800831c <pvPortMalloc+0x170>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a18      	ldr	r2, [pc, #96]	@ (8008324 <pvPortMalloc+0x178>)
 80082c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80082c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80082ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80082d8:	4b13      	ldr	r3, [pc, #76]	@ (8008328 <pvPortMalloc+0x17c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3301      	adds	r3, #1
 80082de:	4a12      	ldr	r2, [pc, #72]	@ (8008328 <pvPortMalloc+0x17c>)
 80082e0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80082e2:	f7fe fc29 	bl	8006b38 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	f003 0307 	and.w	r3, r3, #7
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00d      	beq.n	800830c <pvPortMalloc+0x160>
        __asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	b672      	cpsid	i
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	b662      	cpsie	i
 8008304:	60fb      	str	r3, [r7, #12]
    }
 8008306:	bf00      	nop
 8008308:	bf00      	nop
 800830a:	e7fd      	b.n	8008308 <pvPortMalloc+0x15c>
    return pvReturn;
 800830c:	69fb      	ldr	r3, [r7, #28]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3728      	adds	r7, #40	@ 0x28
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20004008 	.word	0x20004008
 800831c:	2000400c 	.word	0x2000400c
 8008320:	20004000 	.word	0x20004000
 8008324:	20004010 	.word	0x20004010
 8008328:	20004014 	.word	0x20004014

0800832c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d04f      	beq.n	80083de <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800833e:	2308      	movs	r3, #8
 8008340:	425b      	negs	r3, r3
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	4413      	add	r3, r2
 8008346:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	db0d      	blt.n	8008370 <vPortFree+0x44>
        __asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	b672      	cpsid	i
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	b662      	cpsie	i
 8008368:	60fb      	str	r3, [r7, #12]
    }
 800836a:	bf00      	nop
 800836c:	bf00      	nop
 800836e:	e7fd      	b.n	800836c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00d      	beq.n	8008394 <vPortFree+0x68>
        __asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837c:	b672      	cpsid	i
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	b662      	cpsie	i
 800838c:	60bb      	str	r3, [r7, #8]
    }
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	e7fd      	b.n	8008390 <vPortFree+0x64>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	0fdb      	lsrs	r3, r3, #31
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01c      	beq.n	80083de <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d118      	bne.n	80083de <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80083b8:	f7fe fbb0 	bl	8006b1c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <vPortFree+0xbc>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4413      	add	r3, r2
 80083c6:	4a08      	ldr	r2, [pc, #32]	@ (80083e8 <vPortFree+0xbc>)
 80083c8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083ca:	6938      	ldr	r0, [r7, #16]
 80083cc:	f000 f86c 	bl	80084a8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80083d0:	4b06      	ldr	r3, [pc, #24]	@ (80083ec <vPortFree+0xc0>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3301      	adds	r3, #1
 80083d6:	4a05      	ldr	r2, [pc, #20]	@ (80083ec <vPortFree+0xc0>)
 80083d8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80083da:	f7fe fbad 	bl	8006b38 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80083de:	bf00      	nop
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	2000400c 	.word	0x2000400c
 80083ec:	20004018 	.word	0x20004018

080083f0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80083fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80083fc:	4b25      	ldr	r3, [pc, #148]	@ (8008494 <prvHeapInit+0xa4>)
 80083fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00c      	beq.n	8008424 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3307      	adds	r3, #7
 800840e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 0307 	bic.w	r3, r3, #7
 8008416:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	4a1d      	ldr	r2, [pc, #116]	@ (8008494 <prvHeapInit+0xa4>)
 8008420:	4413      	add	r3, r2
 8008422:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008428:	4a1b      	ldr	r2, [pc, #108]	@ (8008498 <prvHeapInit+0xa8>)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800842e:	4b1a      	ldr	r3, [pc, #104]	@ (8008498 <prvHeapInit+0xa8>)
 8008430:	2200      	movs	r2, #0
 8008432:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	4413      	add	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800843c:	2208      	movs	r2, #8
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1a9b      	subs	r3, r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0307 	bic.w	r3, r3, #7
 800844a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4a13      	ldr	r2, [pc, #76]	@ (800849c <prvHeapInit+0xac>)
 8008450:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008452:	4b12      	ldr	r3, [pc, #72]	@ (800849c <prvHeapInit+0xac>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2200      	movs	r2, #0
 8008458:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800845a:	4b10      	ldr	r3, [pc, #64]	@ (800849c <prvHeapInit+0xac>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2200      	movs	r2, #0
 8008460:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	1ad2      	subs	r2, r2, r3
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008470:	4b0a      	ldr	r3, [pc, #40]	@ (800849c <prvHeapInit+0xac>)
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	4a08      	ldr	r2, [pc, #32]	@ (80084a0 <prvHeapInit+0xb0>)
 800847e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	4a07      	ldr	r2, [pc, #28]	@ (80084a4 <prvHeapInit+0xb4>)
 8008486:	6013      	str	r3, [r2, #0]
}
 8008488:	bf00      	nop
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	20000400 	.word	0x20000400
 8008498:	20004000 	.word	0x20004000
 800849c:	20004008 	.word	0x20004008
 80084a0:	20004010 	.word	0x20004010
 80084a4:	2000400c 	.word	0x2000400c

080084a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084b0:	4b28      	ldr	r3, [pc, #160]	@ (8008554 <prvInsertBlockIntoFreeList+0xac>)
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	e002      	b.n	80084bc <prvInsertBlockIntoFreeList+0x14>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d8f7      	bhi.n	80084b6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	4413      	add	r3, r2
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d108      	bne.n	80084ea <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	441a      	add	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	441a      	add	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d118      	bne.n	8008530 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	4b15      	ldr	r3, [pc, #84]	@ (8008558 <prvInsertBlockIntoFreeList+0xb0>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	429a      	cmp	r2, r3
 8008508:	d00d      	beq.n	8008526 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	441a      	add	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	e008      	b.n	8008538 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008526:	4b0c      	ldr	r3, [pc, #48]	@ (8008558 <prvInsertBlockIntoFreeList+0xb0>)
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	e003      	b.n	8008538 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	429a      	cmp	r2, r3
 800853e:	d002      	beq.n	8008546 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008546:	bf00      	nop
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	20004000 	.word	0x20004000
 8008558:	20004008 	.word	0x20004008

0800855c <memset>:
 800855c:	4402      	add	r2, r0
 800855e:	4603      	mov	r3, r0
 8008560:	4293      	cmp	r3, r2
 8008562:	d100      	bne.n	8008566 <memset+0xa>
 8008564:	4770      	bx	lr
 8008566:	f803 1b01 	strb.w	r1, [r3], #1
 800856a:	e7f9      	b.n	8008560 <memset+0x4>

0800856c <__libc_init_array>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	4d0d      	ldr	r5, [pc, #52]	@ (80085a4 <__libc_init_array+0x38>)
 8008570:	4c0d      	ldr	r4, [pc, #52]	@ (80085a8 <__libc_init_array+0x3c>)
 8008572:	1b64      	subs	r4, r4, r5
 8008574:	10a4      	asrs	r4, r4, #2
 8008576:	2600      	movs	r6, #0
 8008578:	42a6      	cmp	r6, r4
 800857a:	d109      	bne.n	8008590 <__libc_init_array+0x24>
 800857c:	4d0b      	ldr	r5, [pc, #44]	@ (80085ac <__libc_init_array+0x40>)
 800857e:	4c0c      	ldr	r4, [pc, #48]	@ (80085b0 <__libc_init_array+0x44>)
 8008580:	f000 f826 	bl	80085d0 <_init>
 8008584:	1b64      	subs	r4, r4, r5
 8008586:	10a4      	asrs	r4, r4, #2
 8008588:	2600      	movs	r6, #0
 800858a:	42a6      	cmp	r6, r4
 800858c:	d105      	bne.n	800859a <__libc_init_array+0x2e>
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	f855 3b04 	ldr.w	r3, [r5], #4
 8008594:	4798      	blx	r3
 8008596:	3601      	adds	r6, #1
 8008598:	e7ee      	b.n	8008578 <__libc_init_array+0xc>
 800859a:	f855 3b04 	ldr.w	r3, [r5], #4
 800859e:	4798      	blx	r3
 80085a0:	3601      	adds	r6, #1
 80085a2:	e7f2      	b.n	800858a <__libc_init_array+0x1e>
 80085a4:	0800868c 	.word	0x0800868c
 80085a8:	0800868c 	.word	0x0800868c
 80085ac:	0800868c 	.word	0x0800868c
 80085b0:	08008690 	.word	0x08008690

080085b4 <memcpy>:
 80085b4:	440a      	add	r2, r1
 80085b6:	4291      	cmp	r1, r2
 80085b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085bc:	d100      	bne.n	80085c0 <memcpy+0xc>
 80085be:	4770      	bx	lr
 80085c0:	b510      	push	{r4, lr}
 80085c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ca:	4291      	cmp	r1, r2
 80085cc:	d1f9      	bne.n	80085c2 <memcpy+0xe>
 80085ce:	bd10      	pop	{r4, pc}

080085d0 <_init>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	bf00      	nop
 80085d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d6:	bc08      	pop	{r3}
 80085d8:	469e      	mov	lr, r3
 80085da:	4770      	bx	lr

080085dc <_fini>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr
